
Keeby1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080037ac  080037ac  000137ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  20000000  080037b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000710  200001e8  08003998  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200008f8  08003998  000208f8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d0d2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000038dd  00000000  00000000  0003d2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000b7de  00000000  00000000  00040bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c38  00000000  00000000  0004c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000cb0  00000000  00000000  0004cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000104f6  00000000  00000000  0004dc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000155a9  00000000  00000000  0005e17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00049e4c  00000000  00000000  00073727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000bd573  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ef0  00000000  00000000  000bd5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003668 	.word	0x08003668

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	08003668 	.word	0x08003668

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000224:	f001 fe40 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8000228:	21fa      	movs	r1, #250	; 0xfa
 800022a:	0089      	lsls	r1, r1, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 f872 	bl	8000318 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000234:	2001      	movs	r0, #1
 8000236:	2200      	movs	r2, #0
 8000238:	0021      	movs	r1, r4
 800023a:	4240      	negs	r0, r0
 800023c:	f000 f832 	bl	80002a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000240:	2000      	movs	r0, #0
 8000242:	bd10      	pop	{r4, pc}

08000244 <HAL_Init>:
{
 8000244:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_Init+0x1c>)
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	2110      	movs	r1, #16
 800024c:	430b      	orrs	r3, r1
 800024e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000250:	2000      	movs	r0, #0
 8000252:	f7ff ffe5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000256:	f002 ff01 	bl	800305c <HAL_MspInit>
}
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_IncTick+0xc>)
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	2000021c 	.word	0x2000021c

08000274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_GetTick+0x8>)
 8000276:	6818      	ldr	r0, [r3, #0]
}
 8000278:	4770      	bx	lr
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	2000021c 	.word	0x2000021c

08000280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	b083      	sub	sp, #12
 8000284:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000286:	f7ff fff5 	bl	8000274 <HAL_GetTick>
 800028a:	0005      	movs	r5, r0
  uint32_t wait = Delay;
 800028c:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800028e:	1c63      	adds	r3, r4, #1
 8000290:	d000      	beq.n	8000294 <HAL_Delay+0x14>
  {
     wait++;
 8000292:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000294:	f7ff ffee 	bl	8000274 <HAL_GetTick>
 8000298:	1b40      	subs	r0, r0, r5
 800029a:	42a0      	cmp	r0, r4
 800029c:	d3fa      	bcc.n	8000294 <HAL_Delay+0x14>
  {
  }
}
 800029e:	b003      	add	sp, #12
 80002a0:	bd30      	pop	{r4, r5, pc}
	...

080002a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a4:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002a6:	2800      	cmp	r0, #0
 80002a8:	db11      	blt.n	80002ce <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002aa:	0883      	lsrs	r3, r0, #2
 80002ac:	4d13      	ldr	r5, [pc, #76]	; (80002fc <HAL_NVIC_SetPriority+0x58>)
 80002ae:	33c0      	adds	r3, #192	; 0xc0
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	595c      	ldr	r4, [r3, r5]
 80002b4:	2203      	movs	r2, #3
 80002b6:	4010      	ands	r0, r2
 80002b8:	00c0      	lsls	r0, r0, #3
 80002ba:	32fc      	adds	r2, #252	; 0xfc
 80002bc:	0016      	movs	r6, r2
 80002be:	4086      	lsls	r6, r0
 80002c0:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c2:	0189      	lsls	r1, r1, #6
 80002c4:	400a      	ands	r2, r1
 80002c6:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	4322      	orrs	r2, r4
 80002ca:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002cc:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ce:	230f      	movs	r3, #15
 80002d0:	4003      	ands	r3, r0
 80002d2:	3b08      	subs	r3, #8
 80002d4:	089b      	lsrs	r3, r3, #2
 80002d6:	3306      	adds	r3, #6
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	4a09      	ldr	r2, [pc, #36]	; (8000300 <HAL_NVIC_SetPriority+0x5c>)
 80002dc:	4694      	mov	ip, r2
 80002de:	4463      	add	r3, ip
 80002e0:	685d      	ldr	r5, [r3, #4]
 80002e2:	2403      	movs	r4, #3
 80002e4:	4020      	ands	r0, r4
 80002e6:	00c0      	lsls	r0, r0, #3
 80002e8:	22ff      	movs	r2, #255	; 0xff
 80002ea:	0014      	movs	r4, r2
 80002ec:	4084      	lsls	r4, r0
 80002ee:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f0:	0189      	lsls	r1, r1, #6
 80002f2:	400a      	ands	r2, r1
 80002f4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f6:	432a      	orrs	r2, r5
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	e7e7      	b.n	80002cc <HAL_NVIC_SetPriority+0x28>
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000304:	231f      	movs	r3, #31
 8000306:	4018      	ands	r0, r3
 8000308:	3b1e      	subs	r3, #30
 800030a:	4083      	lsls	r3, r0
 800030c:	4a01      	ldr	r2, [pc, #4]	; (8000314 <HAL_NVIC_EnableIRQ+0x10>)
 800030e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000310:	4770      	bx	lr
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	e000e100 	.word	0xe000e100

08000318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	3801      	subs	r0, #1
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	045b      	lsls	r3, r3, #17
 800031e:	4298      	cmp	r0, r3
 8000320:	d20f      	bcs.n	8000342 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000322:	4a09      	ldr	r2, [pc, #36]	; (8000348 <HAL_SYSTICK_Config+0x30>)
 8000324:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	4809      	ldr	r0, [pc, #36]	; (800034c <HAL_SYSTICK_Config+0x34>)
 8000328:	6a03      	ldr	r3, [r0, #32]
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	21c0      	movs	r1, #192	; 0xc0
 8000330:	0609      	lsls	r1, r1, #24
 8000332:	430b      	orrs	r3, r1
 8000334:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	2300      	movs	r3, #0
 8000338:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033a:	3307      	adds	r3, #7
 800033c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000340:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000342:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000344:	e7fc      	b.n	8000340 <HAL_SYSTICK_Config+0x28>
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000352:	46d6      	mov	lr, sl
 8000354:	464f      	mov	r7, r9
 8000356:	4646      	mov	r6, r8
 8000358:	b5c0      	push	{r6, r7, lr}
 800035a:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 800035c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035e:	e038      	b.n	80003d2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000360:	2603      	movs	r6, #3
 8000362:	e000      	b.n	8000366 <HAL_GPIO_Init+0x16>
 8000364:	2600      	movs	r6, #0
 8000366:	40a6      	lsls	r6, r4
 8000368:	0034      	movs	r4, r6
 800036a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800036c:	3202      	adds	r2, #2
 800036e:	0092      	lsls	r2, r2, #2
 8000370:	4e5c      	ldr	r6, [pc, #368]	; (80004e4 <HAL_GPIO_Init+0x194>)
 8000372:	5194      	str	r4, [r2, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000374:	4a5c      	ldr	r2, [pc, #368]	; (80004e8 <HAL_GPIO_Init+0x198>)
 8000376:	6814      	ldr	r4, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000378:	464a      	mov	r2, r9
 800037a:	43d2      	mvns	r2, r2
 800037c:	0026      	movs	r6, r4
 800037e:	464d      	mov	r5, r9
 8000380:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000382:	684d      	ldr	r5, [r1, #4]
 8000384:	03ed      	lsls	r5, r5, #15
 8000386:	d502      	bpl.n	800038e <HAL_GPIO_Init+0x3e>
        {
          SET_BIT(temp, iocurrent); 
 8000388:	464d      	mov	r5, r9
 800038a:	432c      	orrs	r4, r5
 800038c:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 800038e:	4c56      	ldr	r4, [pc, #344]	; (80004e8 <HAL_GPIO_Init+0x198>)
 8000390:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000392:	6864      	ldr	r4, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000394:	0026      	movs	r6, r4
 8000396:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000398:	684d      	ldr	r5, [r1, #4]
 800039a:	03ad      	lsls	r5, r5, #14
 800039c:	d502      	bpl.n	80003a4 <HAL_GPIO_Init+0x54>
        { 
          SET_BIT(temp, iocurrent); 
 800039e:	464d      	mov	r5, r9
 80003a0:	432c      	orrs	r4, r5
 80003a2:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 80003a4:	4c50      	ldr	r4, [pc, #320]	; (80004e8 <HAL_GPIO_Init+0x198>)
 80003a6:	6066      	str	r6, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80003a8:	68a4      	ldr	r4, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80003aa:	0026      	movs	r6, r4
 80003ac:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003ae:	684d      	ldr	r5, [r1, #4]
 80003b0:	02ed      	lsls	r5, r5, #11
 80003b2:	d502      	bpl.n	80003ba <HAL_GPIO_Init+0x6a>
        {
          SET_BIT(temp, iocurrent); 
 80003b4:	464d      	mov	r5, r9
 80003b6:	432c      	orrs	r4, r5
 80003b8:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 80003ba:	4c4b      	ldr	r4, [pc, #300]	; (80004e8 <HAL_GPIO_Init+0x198>)
 80003bc:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80003be:	68e4      	ldr	r4, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80003c0:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003c2:	684d      	ldr	r5, [r1, #4]
 80003c4:	02ad      	lsls	r5, r5, #10
 80003c6:	d501      	bpl.n	80003cc <HAL_GPIO_Init+0x7c>
        {
          SET_BIT(temp, iocurrent); 
 80003c8:	464a      	mov	r2, r9
 80003ca:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 80003cc:	4c46      	ldr	r4, [pc, #280]	; (80004e8 <HAL_GPIO_Init+0x198>)
 80003ce:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 80003d0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003d2:	680c      	ldr	r4, [r1, #0]
 80003d4:	0022      	movs	r2, r4
 80003d6:	40da      	lsrs	r2, r3
 80003d8:	d07d      	beq.n	80004d6 <HAL_GPIO_Init+0x186>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003da:	2201      	movs	r2, #1
 80003dc:	409a      	lsls	r2, r3
 80003de:	0025      	movs	r5, r4
 80003e0:	4015      	ands	r5, r2
 80003e2:	46a9      	mov	r9, r5
    if(iocurrent)
 80003e4:	4214      	tst	r4, r2
 80003e6:	d0f3      	beq.n	80003d0 <HAL_GPIO_Init+0x80>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80003e8:	684c      	ldr	r4, [r1, #4]
 80003ea:	2c02      	cmp	r4, #2
 80003ec:	d001      	beq.n	80003f2 <HAL_GPIO_Init+0xa2>
 80003ee:	2c12      	cmp	r4, #18
 80003f0:	d10e      	bne.n	8000410 <HAL_GPIO_Init+0xc0>
        temp = GPIOx->AFR[position >> 3];
 80003f2:	08dc      	lsrs	r4, r3, #3
 80003f4:	3408      	adds	r4, #8
 80003f6:	00a4      	lsls	r4, r4, #2
 80003f8:	5827      	ldr	r7, [r4, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003fa:	2607      	movs	r6, #7
 80003fc:	401e      	ands	r6, r3
 80003fe:	00b6      	lsls	r6, r6, #2
 8000400:	250f      	movs	r5, #15
 8000402:	40b5      	lsls	r5, r6
 8000404:	43af      	bics	r7, r5
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000406:	690d      	ldr	r5, [r1, #16]
 8000408:	40b5      	lsls	r5, r6
 800040a:	002e      	movs	r6, r5
 800040c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800040e:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 8000410:	6804      	ldr	r4, [r0, #0]
 8000412:	46a4      	mov	ip, r4
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000414:	005e      	lsls	r6, r3, #1
 8000416:	2403      	movs	r4, #3
 8000418:	46a2      	mov	sl, r4
 800041a:	0027      	movs	r7, r4
 800041c:	40b7      	lsls	r7, r6
 800041e:	46b8      	mov	r8, r7
 8000420:	43ff      	mvns	r7, r7
 8000422:	4665      	mov	r5, ip
 8000424:	4644      	mov	r4, r8
 8000426:	43a5      	bics	r5, r4
 8000428:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800042a:	684c      	ldr	r4, [r1, #4]
 800042c:	4655      	mov	r5, sl
 800042e:	4025      	ands	r5, r4
 8000430:	002c      	movs	r4, r5
 8000432:	40b4      	lsls	r4, r6
 8000434:	4665      	mov	r5, ip
 8000436:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8000438:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800043a:	684c      	ldr	r4, [r1, #4]
 800043c:	1e65      	subs	r5, r4, #1
 800043e:	2d01      	cmp	r5, #1
 8000440:	d903      	bls.n	800044a <HAL_GPIO_Init+0xfa>
 8000442:	2c11      	cmp	r4, #17
 8000444:	d001      	beq.n	800044a <HAL_GPIO_Init+0xfa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000446:	2c12      	cmp	r4, #18
 8000448:	d113      	bne.n	8000472 <HAL_GPIO_Init+0x122>
        temp = GPIOx->OSPEEDR; 
 800044a:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800044c:	403c      	ands	r4, r7
 800044e:	46a4      	mov	ip, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000450:	68cc      	ldr	r4, [r1, #12]
 8000452:	40b4      	lsls	r4, r6
 8000454:	4665      	mov	r5, ip
 8000456:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000458:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800045a:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800045c:	4394      	bics	r4, r2
 800045e:	0022      	movs	r2, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000460:	684c      	ldr	r4, [r1, #4]
 8000462:	0924      	lsrs	r4, r4, #4
 8000464:	46a4      	mov	ip, r4
 8000466:	2401      	movs	r4, #1
 8000468:	4665      	mov	r5, ip
 800046a:	402c      	ands	r4, r5
 800046c:	409c      	lsls	r4, r3
 800046e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000470:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000472:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000474:	4017      	ands	r7, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000476:	688a      	ldr	r2, [r1, #8]
 8000478:	40b2      	lsls	r2, r6
 800047a:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 800047c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800047e:	684a      	ldr	r2, [r1, #4]
 8000480:	00d2      	lsls	r2, r2, #3
 8000482:	d5a5      	bpl.n	80003d0 <HAL_GPIO_Init+0x80>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000484:	4c19      	ldr	r4, [pc, #100]	; (80004ec <HAL_GPIO_Init+0x19c>)
 8000486:	69a6      	ldr	r6, [r4, #24]
 8000488:	2201      	movs	r2, #1
 800048a:	4316      	orrs	r6, r2
 800048c:	61a6      	str	r6, [r4, #24]
 800048e:	69a4      	ldr	r4, [r4, #24]
 8000490:	4022      	ands	r2, r4
 8000492:	9201      	str	r2, [sp, #4]
 8000494:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000496:	089a      	lsrs	r2, r3, #2
 8000498:	1c94      	adds	r4, r2, #2
 800049a:	00a4      	lsls	r4, r4, #2
 800049c:	4e11      	ldr	r6, [pc, #68]	; (80004e4 <HAL_GPIO_Init+0x194>)
 800049e:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80004a0:	2403      	movs	r4, #3
 80004a2:	401c      	ands	r4, r3
 80004a4:	00a4      	lsls	r4, r4, #2
 80004a6:	260f      	movs	r6, #15
 80004a8:	40a6      	lsls	r6, r4
 80004aa:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ac:	2690      	movs	r6, #144	; 0x90
 80004ae:	05f6      	lsls	r6, r6, #23
 80004b0:	42b0      	cmp	r0, r6
 80004b2:	d100      	bne.n	80004b6 <HAL_GPIO_Init+0x166>
 80004b4:	e756      	b.n	8000364 <HAL_GPIO_Init+0x14>
 80004b6:	4e0e      	ldr	r6, [pc, #56]	; (80004f0 <HAL_GPIO_Init+0x1a0>)
 80004b8:	42b0      	cmp	r0, r6
 80004ba:	d008      	beq.n	80004ce <HAL_GPIO_Init+0x17e>
 80004bc:	4e0d      	ldr	r6, [pc, #52]	; (80004f4 <HAL_GPIO_Init+0x1a4>)
 80004be:	42b0      	cmp	r0, r6
 80004c0:	d007      	beq.n	80004d2 <HAL_GPIO_Init+0x182>
 80004c2:	4e0d      	ldr	r6, [pc, #52]	; (80004f8 <HAL_GPIO_Init+0x1a8>)
 80004c4:	42b0      	cmp	r0, r6
 80004c6:	d100      	bne.n	80004ca <HAL_GPIO_Init+0x17a>
 80004c8:	e74a      	b.n	8000360 <HAL_GPIO_Init+0x10>
 80004ca:	2605      	movs	r6, #5
 80004cc:	e74b      	b.n	8000366 <HAL_GPIO_Init+0x16>
 80004ce:	2601      	movs	r6, #1
 80004d0:	e749      	b.n	8000366 <HAL_GPIO_Init+0x16>
 80004d2:	2602      	movs	r6, #2
 80004d4:	e747      	b.n	8000366 <HAL_GPIO_Init+0x16>
  } 
}
 80004d6:	b002      	add	sp, #8
 80004d8:	bce0      	pop	{r5, r6, r7}
 80004da:	46ba      	mov	sl, r7
 80004dc:	46b1      	mov	r9, r6
 80004de:	46a8      	mov	r8, r5
 80004e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40010000 	.word	0x40010000
 80004e8:	40010400 	.word	0x40010400
 80004ec:	40021000 	.word	0x40021000
 80004f0:	48000400 	.word	0x48000400
 80004f4:	48000800 	.word	0x48000800
 80004f8:	48000c00 	.word	0x48000c00

080004fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004fc:	6903      	ldr	r3, [r0, #16]
 80004fe:	420b      	tst	r3, r1
 8000500:	d001      	beq.n	8000506 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000502:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8000504:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8000506:	2000      	movs	r0, #0
 8000508:	e7fc      	b.n	8000504 <HAL_GPIO_ReadPin+0x8>

0800050a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800050a:	2a00      	cmp	r2, #0
 800050c:	d001      	beq.n	8000512 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800050e:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000510:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000512:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000514:	e7fc      	b.n	8000510 <HAL_GPIO_WritePin+0x6>
	...

08000518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000518:	b510      	push	{r4, lr}
 800051a:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800051c:	d059      	beq.n	80005d2 <HAL_I2C_Init+0xba>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800051e:	2341      	movs	r3, #65	; 0x41
 8000520:	5cc3      	ldrb	r3, [r0, r3]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d043      	beq.n	80005ae <HAL_I2C_Init+0x96>

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000526:	2341      	movs	r3, #65	; 0x41
 8000528:	2224      	movs	r2, #36	; 0x24
 800052a:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800052c:	6822      	ldr	r2, [r4, #0]
 800052e:	6813      	ldr	r3, [r2, #0]
 8000530:	2101      	movs	r1, #1
 8000532:	438b      	bics	r3, r1
 8000534:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000536:	6822      	ldr	r2, [r4, #0]
 8000538:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <HAL_I2C_Init+0xc0>)
 800053a:	6861      	ldr	r1, [r4, #4]
 800053c:	400b      	ands	r3, r1
 800053e:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000540:	6822      	ldr	r2, [r4, #0]
 8000542:	6893      	ldr	r3, [r2, #8]
 8000544:	4925      	ldr	r1, [pc, #148]	; (80005dc <HAL_I2C_Init+0xc4>)
 8000546:	400b      	ands	r3, r1
 8000548:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800054a:	68e3      	ldr	r3, [r4, #12]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d034      	beq.n	80005ba <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000550:	6822      	ldr	r2, [r4, #0]
 8000552:	2384      	movs	r3, #132	; 0x84
 8000554:	021b      	lsls	r3, r3, #8
 8000556:	68a1      	ldr	r1, [r4, #8]
 8000558:	430b      	orrs	r3, r1
 800055a:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800055c:	68e3      	ldr	r3, [r4, #12]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d032      	beq.n	80005c8 <HAL_I2C_Init+0xb0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000562:	6822      	ldr	r2, [r4, #0]
 8000564:	6851      	ldr	r1, [r2, #4]
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <HAL_I2C_Init+0xc8>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800056c:	6822      	ldr	r2, [r4, #0]
 800056e:	68d3      	ldr	r3, [r2, #12]
 8000570:	491a      	ldr	r1, [pc, #104]	; (80005dc <HAL_I2C_Init+0xc4>)
 8000572:	400b      	ands	r3, r1
 8000574:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000576:	6923      	ldr	r3, [r4, #16]
 8000578:	6962      	ldr	r2, [r4, #20]
 800057a:	4313      	orrs	r3, r2
 800057c:	69a2      	ldr	r2, [r4, #24]
 800057e:	0212      	lsls	r2, r2, #8
 8000580:	6821      	ldr	r1, [r4, #0]
 8000582:	4313      	orrs	r3, r2
 8000584:	60cb      	str	r3, [r1, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000586:	6822      	ldr	r2, [r4, #0]
 8000588:	69e3      	ldr	r3, [r4, #28]
 800058a:	6a21      	ldr	r1, [r4, #32]
 800058c:	430b      	orrs	r3, r1
 800058e:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000590:	6822      	ldr	r2, [r4, #0]
 8000592:	6813      	ldr	r3, [r2, #0]
 8000594:	2101      	movs	r1, #1
 8000596:	430b      	orrs	r3, r1
 8000598:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800059a:	2300      	movs	r3, #0
 800059c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800059e:	2241      	movs	r2, #65	; 0x41
 80005a0:	311f      	adds	r1, #31
 80005a2:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80005a4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80005a6:	3201      	adds	r2, #1
 80005a8:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 80005aa:	2000      	movs	r0, #0
}
 80005ac:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80005ae:	3340      	adds	r3, #64	; 0x40
 80005b0:	2200      	movs	r2, #0
 80005b2:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80005b4:	f002 fd6a 	bl	800308c <HAL_I2C_MspInit>
 80005b8:	e7b5      	b.n	8000526 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80005ba:	6822      	ldr	r2, [r4, #0]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	021b      	lsls	r3, r3, #8
 80005c0:	68a1      	ldr	r1, [r4, #8]
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6093      	str	r3, [r2, #8]
 80005c6:	e7c9      	b.n	800055c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	0112      	lsls	r2, r2, #4
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	e7c7      	b.n	8000562 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80005d2:	2001      	movs	r0, #1
 80005d4:	e7ea      	b.n	80005ac <HAL_I2C_Init+0x94>
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	f0ffffff 	.word	0xf0ffffff
 80005dc:	ffff7fff 	.word	0xffff7fff
 80005e0:	02008000 	.word	0x02008000

080005e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80005e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80005e6:	2341      	movs	r3, #65	; 0x41
 80005e8:	5cc3      	ldrb	r3, [r0, r3]
 80005ea:	2b20      	cmp	r3, #32
 80005ec:	d120      	bne.n	8000630 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80005ee:	3320      	adds	r3, #32
 80005f0:	5cc3      	ldrb	r3, [r0, r3]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d01e      	beq.n	8000634 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80005f6:	2440      	movs	r4, #64	; 0x40
 80005f8:	2201      	movs	r2, #1
 80005fa:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80005fc:	2541      	movs	r5, #65	; 0x41
 80005fe:	2324      	movs	r3, #36	; 0x24
 8000600:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000602:	6806      	ldr	r6, [r0, #0]
 8000604:	6833      	ldr	r3, [r6, #0]
 8000606:	4393      	bics	r3, r2
 8000608:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800060a:	6806      	ldr	r6, [r0, #0]
 800060c:	6833      	ldr	r3, [r6, #0]
 800060e:	4f0a      	ldr	r7, [pc, #40]	; (8000638 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8000610:	403b      	ands	r3, r7
 8000612:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000614:	6806      	ldr	r6, [r0, #0]
 8000616:	6833      	ldr	r3, [r6, #0]
 8000618:	4319      	orrs	r1, r3
 800061a:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800061c:	6801      	ldr	r1, [r0, #0]
 800061e:	680b      	ldr	r3, [r1, #0]
 8000620:	4313      	orrs	r3, r2
 8000622:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000624:	2320      	movs	r3, #32
 8000626:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000628:	2300      	movs	r3, #0
 800062a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 800062c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800062e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8000630:	2002      	movs	r0, #2
 8000632:	e7fc      	b.n	800062e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8000634:	2002      	movs	r0, #2
 8000636:	e7fa      	b.n	800062e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8000638:	ffffefff 	.word	0xffffefff

0800063c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800063c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800063e:	2341      	movs	r3, #65	; 0x41
 8000640:	5cc3      	ldrb	r3, [r0, r3]
 8000642:	2b20      	cmp	r3, #32
 8000644:	d11e      	bne.n	8000684 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000646:	3320      	adds	r3, #32
 8000648:	5cc3      	ldrb	r3, [r0, r3]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d01c      	beq.n	8000688 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 800064e:	2440      	movs	r4, #64	; 0x40
 8000650:	2201      	movs	r2, #1
 8000652:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000654:	2541      	movs	r5, #65	; 0x41
 8000656:	2324      	movs	r3, #36	; 0x24
 8000658:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800065a:	6806      	ldr	r6, [r0, #0]
 800065c:	6833      	ldr	r3, [r6, #0]
 800065e:	4393      	bics	r3, r2
 8000660:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000662:	6806      	ldr	r6, [r0, #0]
 8000664:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000666:	4f09      	ldr	r7, [pc, #36]	; (800068c <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8000668:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800066a:	0209      	lsls	r1, r1, #8
 800066c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800066e:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000670:	6801      	ldr	r1, [r0, #0]
 8000672:	680b      	ldr	r3, [r1, #0]
 8000674:	4313      	orrs	r3, r2
 8000676:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000678:	2320      	movs	r3, #32
 800067a:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800067c:	2300      	movs	r3, #0
 800067e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8000680:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8000684:	2002      	movs	r0, #2
 8000686:	e7fc      	b.n	8000682 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8000688:	2002      	movs	r0, #2
 800068a:	e7fa      	b.n	8000682 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 800068c:	fffff0ff 	.word	0xfffff0ff

08000690 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000690:	b570      	push	{r4, r5, r6, lr}
 8000692:	1e04      	subs	r4, r0, #0
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000694:	d058      	beq.n	8000748 <HAL_PCD_Init+0xb8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000696:	23ea      	movs	r3, #234	; 0xea
 8000698:	33ff      	adds	r3, #255	; 0xff
 800069a:	5cc3      	ldrb	r3, [r0, r3]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d01a      	beq.n	80006d6 <HAL_PCD_Init+0x46>
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80006a0:	23ea      	movs	r3, #234	; 0xea
 80006a2:	33ff      	adds	r3, #255	; 0xff
 80006a4:	2203      	movs	r2, #3
 80006a6:	54e2      	strb	r2, [r4, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80006a8:	2200      	movs	r2, #0
 80006aa:	6860      	ldr	r0, [r4, #4]
 80006ac:	4290      	cmp	r0, r2
 80006ae:	d919      	bls.n	80006e4 <HAL_PCD_Init+0x54>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80006b0:	00d3      	lsls	r3, r2, #3
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	18e3      	adds	r3, r4, r3
 80006b8:	0019      	movs	r1, r3
 80006ba:	3129      	adds	r1, #41	; 0x29
 80006bc:	2001      	movs	r0, #1
 80006be:	7008      	strb	r0, [r1, #0]
   hpcd->IN_ep[i].num = i;
 80006c0:	3901      	subs	r1, #1
 80006c2:	700a      	strb	r2, [r1, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 80006c4:	0018      	movs	r0, r3
 80006c6:	302b      	adds	r0, #43	; 0x2b
 80006c8:	2100      	movs	r1, #0
 80006ca:	7001      	strb	r1, [r0, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 80006cc:	6359      	str	r1, [r3, #52]	; 0x34
   hpcd->IN_ep[i].xfer_buff = 0U;
 80006ce:	6399      	str	r1, [r3, #56]	; 0x38
   hpcd->IN_ep[i].xfer_len = 0U;
 80006d0:	63d9      	str	r1, [r3, #60]	; 0x3c
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80006d2:	3201      	adds	r2, #1
 80006d4:	e7e9      	b.n	80006aa <HAL_PCD_Init+0x1a>
    hpcd->Lock = HAL_UNLOCKED;
 80006d6:	33e9      	adds	r3, #233	; 0xe9
 80006d8:	33ff      	adds	r3, #255	; 0xff
 80006da:	2200      	movs	r2, #0
 80006dc:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 80006de:	f002 fd9f 	bl	8003220 <HAL_PCD_MspInit>
 80006e2:	e7dd      	b.n	80006a0 <HAL_PCD_Init+0x10>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80006e4:	2200      	movs	r2, #0
 80006e6:	e014      	b.n	8000712 <HAL_PCD_Init+0x82>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80006e8:	00d3      	lsls	r3, r2, #3
 80006ea:	1a9b      	subs	r3, r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	18e3      	adds	r3, r4, r3
 80006f0:	001d      	movs	r5, r3
 80006f2:	350a      	adds	r5, #10
 80006f4:	35ff      	adds	r5, #255	; 0xff
 80006f6:	2100      	movs	r1, #0
 80006f8:	7029      	strb	r1, [r5, #0]
   hpcd->OUT_ep[i].num = i;
 80006fa:	3d01      	subs	r5, #1
 80006fc:	702a      	strb	r2, [r5, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 80006fe:	3503      	adds	r5, #3
 8000700:	7029      	strb	r1, [r5, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000702:	3509      	adds	r5, #9
 8000704:	6029      	str	r1, [r5, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000706:	3504      	adds	r5, #4
 8000708:	6029      	str	r1, [r5, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800070a:	331d      	adds	r3, #29
 800070c:	33ff      	adds	r3, #255	; 0xff
 800070e:	6019      	str	r1, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000710:	3201      	adds	r2, #1
 8000712:	4290      	cmp	r0, r2
 8000714:	d8e8      	bhi.n	80006e8 <HAL_PCD_Init+0x58>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000716:	2340      	movs	r3, #64	; 0x40
 8000718:	2201      	movs	r2, #1
 800071a:	6821      	ldr	r1, [r4, #0]
 800071c:	52ca      	strh	r2, [r1, r3]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 800071e:	2200      	movs	r2, #0
 8000720:	6821      	ldr	r1, [r4, #0]
 8000722:	52ca      	strh	r2, [r1, r3]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8000724:	2144      	movs	r1, #68	; 0x44
 8000726:	6820      	ldr	r0, [r4, #0]
 8000728:	5242      	strh	r2, [r0, r1]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 800072a:	310c      	adds	r1, #12
 800072c:	6820      	ldr	r0, [r4, #0]
 800072e:	5242      	strh	r2, [r0, r1]
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_PCD_Init+0xbc>)
 8000732:	6821      	ldr	r1, [r4, #0]
 8000734:	52ca      	strh	r2, [r1, r3]
  
  hpcd->USB_Address = 0U;
 8000736:	2200      	movs	r2, #0
 8000738:	3b1c      	subs	r3, #28
 800073a:	54e2      	strb	r2, [r4, r3]
  hpcd->State= HAL_PCD_STATE_READY;
 800073c:	2201      	movs	r2, #1
 800073e:	23ea      	movs	r3, #234	; 0xea
 8000740:	33ff      	adds	r3, #255	; 0xff
 8000742:	54e2      	strb	r2, [r4, r3]

 return HAL_OK;
 8000744:	2000      	movs	r0, #0
}
 8000746:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000748:	2001      	movs	r0, #1
 800074a:	e7fc      	b.n	8000746 <HAL_PCD_Init+0xb6>
 800074c:	ffffbf00 	.word	0xffffbf00

08000750 <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8000750:	6801      	ldr	r1, [r0, #0]
 8000752:	2258      	movs	r2, #88	; 0x58
 8000754:	5a8b      	ldrh	r3, [r1, r2]
 8000756:	4803      	ldr	r0, [pc, #12]	; (8000764 <HAL_PCD_Start+0x14>)
 8000758:	4303      	orrs	r3, r0
 800075a:	b29b      	uxth	r3, r3
 800075c:	528b      	strh	r3, [r1, r2]
  
  return HAL_OK;
}
 800075e:	2000      	movs	r0, #0
 8000760:	4770      	bx	lr
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	ffff8000 	.word	0xffff8000

08000768 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8000768:	23f4      	movs	r3, #244	; 0xf4
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	5cc3      	ldrb	r3, [r0, r3]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d013      	beq.n	800079a <HAL_PCD_SetAddress+0x32>
 8000772:	23f4      	movs	r3, #244	; 0xf4
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	2201      	movs	r2, #1
 8000778:	54c2      	strb	r2, [r0, r3]

   if(address == 0U) 
 800077a:	2900      	cmp	r1, #0
 800077c:	d10a      	bne.n	8000794 <HAL_PCD_SetAddress+0x2c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 800077e:	3b9d      	subs	r3, #157	; 0x9d
 8000780:	3bff      	subs	r3, #255	; 0xff
 8000782:	327f      	adds	r2, #127	; 0x7f
 8000784:	6801      	ldr	r1, [r0, #0]
 8000786:	52ca      	strh	r2, [r1, r3]
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 8000788:	23f4      	movs	r3, #244	; 0xf4
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	2200      	movs	r2, #0
 800078e:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8000790:	2000      	movs	r0, #0
}
 8000792:	4770      	bx	lr
     hpcd->USB_Address = address;
 8000794:	2324      	movs	r3, #36	; 0x24
 8000796:	54c1      	strb	r1, [r0, r3]
 8000798:	e7f6      	b.n	8000788 <HAL_PCD_SetAddress+0x20>
   __HAL_LOCK(hpcd); 
 800079a:	2002      	movs	r0, #2
 800079c:	e7f9      	b.n	8000792 <HAL_PCD_SetAddress+0x2a>
	...

080007a0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80007a2:	b24d      	sxtb	r5, r1
 80007a4:	2d00      	cmp	r5, #0
 80007a6:	db2c      	blt.n	8000802 <HAL_PCD_EP_Open+0x62>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80007a8:	267f      	movs	r6, #127	; 0x7f
 80007aa:	400e      	ands	r6, r1
 80007ac:	00f4      	lsls	r4, r6, #3
 80007ae:	1ba4      	subs	r4, r4, r6
 80007b0:	00a4      	lsls	r4, r4, #2
 80007b2:	3409      	adds	r4, #9
 80007b4:	34ff      	adds	r4, #255	; 0xff
 80007b6:	1904      	adds	r4, r0, r4
  }
  ep->num   = ep_addr & 0x7FU;
 80007b8:	267f      	movs	r6, #127	; 0x7f
 80007ba:	4031      	ands	r1, r6
 80007bc:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80007be:	0fed      	lsrs	r5, r5, #31
 80007c0:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 80007c2:	60e2      	str	r2, [r4, #12]
  ep->type = ep_type;
 80007c4:	70e3      	strb	r3, [r4, #3]
  
  __HAL_LOCK(hpcd); 
 80007c6:	23f4      	movs	r3, #244	; 0xf4
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	5cc3      	ldrb	r3, [r0, r3]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d100      	bne.n	80007d2 <HAL_PCD_EP_Open+0x32>
 80007d0:	e152      	b.n	8000a78 <HAL_PCD_EP_Open+0x2d8>
 80007d2:	23f4      	movs	r3, #244	; 0xf4
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	2201      	movs	r2, #1
 80007d8:	54c2      	strb	r2, [r0, r3]

  /* initialize Endpoint */
  switch (ep->type)
 80007da:	78e3      	ldrb	r3, [r4, #3]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d100      	bne.n	80007e2 <HAL_PCD_EP_Open+0x42>
 80007e0:	e06b      	b.n	80008ba <HAL_PCD_EP_Open+0x11a>
 80007e2:	d816      	bhi.n	8000812 <HAL_PCD_EP_Open+0x72>
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d021      	beq.n	800082c <HAL_PCD_EP_Open+0x8c>
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d129      	bne.n	8000840 <HAL_PCD_EP_Open+0xa0>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 80007ec:	6805      	ldr	r5, [r0, #0]
 80007ee:	7823      	ldrb	r3, [r4, #0]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	5aea      	ldrh	r2, [r5, r3]
 80007f4:	49a1      	ldr	r1, [pc, #644]	; (8000a7c <HAL_PCD_EP_Open+0x2dc>)
 80007f6:	4011      	ands	r1, r2
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	00d2      	lsls	r2, r2, #3
 80007fc:	430a      	orrs	r2, r1
 80007fe:	52ea      	strh	r2, [r5, r3]
    break;
 8000800:	e01e      	b.n	8000840 <HAL_PCD_EP_Open+0xa0>
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000802:	267f      	movs	r6, #127	; 0x7f
 8000804:	400e      	ands	r6, r1
 8000806:	00f4      	lsls	r4, r6, #3
 8000808:	1ba4      	subs	r4, r4, r6
 800080a:	00a4      	lsls	r4, r4, #2
 800080c:	3428      	adds	r4, #40	; 0x28
 800080e:	1904      	adds	r4, r0, r4
 8000810:	e7d2      	b.n	80007b8 <HAL_PCD_EP_Open+0x18>
  switch (ep->type)
 8000812:	2b03      	cmp	r3, #3
 8000814:	d114      	bne.n	8000840 <HAL_PCD_EP_Open+0xa0>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8000816:	6805      	ldr	r5, [r0, #0]
 8000818:	7823      	ldrb	r3, [r4, #0]
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	5aea      	ldrh	r2, [r5, r3]
 800081e:	4997      	ldr	r1, [pc, #604]	; (8000a7c <HAL_PCD_EP_Open+0x2dc>)
 8000820:	4011      	ands	r1, r2
 8000822:	22c0      	movs	r2, #192	; 0xc0
 8000824:	00d2      	lsls	r2, r2, #3
 8000826:	430a      	orrs	r2, r1
 8000828:	52ea      	strh	r2, [r5, r3]
    break;
 800082a:	e009      	b.n	8000840 <HAL_PCD_EP_Open+0xa0>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 800082c:	6805      	ldr	r5, [r0, #0]
 800082e:	7823      	ldrb	r3, [r4, #0]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	5aea      	ldrh	r2, [r5, r3]
 8000834:	4991      	ldr	r1, [pc, #580]	; (8000a7c <HAL_PCD_EP_Open+0x2dc>)
 8000836:	4011      	ands	r1, r2
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0092      	lsls	r2, r2, #2
 800083c:	430a      	orrs	r2, r1
 800083e:	52ea      	strh	r2, [r5, r3]
  default:
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8000840:	6801      	ldr	r1, [r0, #0]
 8000842:	7823      	ldrb	r3, [r4, #0]
 8000844:	009d      	lsls	r5, r3, #2
 8000846:	5b4a      	ldrh	r2, [r1, r5]
 8000848:	4e8d      	ldr	r6, [pc, #564]	; (8000a80 <HAL_PCD_EP_Open+0x2e0>)
 800084a:	4032      	ands	r2, r6
 800084c:	4313      	orrs	r3, r2
 800084e:	4a8d      	ldr	r2, [pc, #564]	; (8000a84 <HAL_PCD_EP_Open+0x2e4>)
 8000850:	4313      	orrs	r3, r2
 8000852:	534b      	strh	r3, [r1, r5]
  
  if (ep->doublebuffer == 0U) 
 8000854:	7aa3      	ldrb	r3, [r4, #10]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d000      	beq.n	800085c <HAL_PCD_EP_Open+0xbc>
 800085a:	e07d      	b.n	8000958 <HAL_PCD_EP_Open+0x1b8>
  {
    if (ep->is_in)
 800085c:	7863      	ldrb	r3, [r4, #1]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d033      	beq.n	80008ca <HAL_PCD_EP_Open+0x12a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8000862:	88a2      	ldrh	r2, [r4, #4]
 8000864:	6805      	ldr	r5, [r0, #0]
 8000866:	2350      	movs	r3, #80	; 0x50
 8000868:	5aeb      	ldrh	r3, [r5, r3]
 800086a:	7821      	ldrb	r1, [r4, #0]
 800086c:	00c9      	lsls	r1, r1, #3
 800086e:	185b      	adds	r3, r3, r1
 8000870:	195b      	adds	r3, r3, r5
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	00c9      	lsls	r1, r1, #3
 8000876:	468c      	mov	ip, r1
 8000878:	4463      	add	r3, ip
 800087a:	2101      	movs	r1, #1
 800087c:	438a      	bics	r2, r1
 800087e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000880:	6802      	ldr	r2, [r0, #0]
 8000882:	7823      	ldrb	r3, [r4, #0]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	18d1      	adds	r1, r2, r3
 8000888:	5ad3      	ldrh	r3, [r2, r3]
 800088a:	065a      	lsls	r2, r3, #25
 800088c:	d503      	bpl.n	8000896 <HAL_PCD_EP_Open+0xf6>
 800088e:	4033      	ands	r3, r6
 8000890:	4a7d      	ldr	r2, [pc, #500]	; (8000a88 <HAL_PCD_EP_Open+0x2e8>)
 8000892:	4313      	orrs	r3, r2
 8000894:	800b      	strh	r3, [r1, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8000896:	6801      	ldr	r1, [r0, #0]
 8000898:	7822      	ldrb	r2, [r4, #0]
 800089a:	0092      	lsls	r2, r2, #2
 800089c:	5a8b      	ldrh	r3, [r1, r2]
 800089e:	4c7b      	ldr	r4, [pc, #492]	; (8000a8c <HAL_PCD_EP_Open+0x2ec>)
 80008a0:	4023      	ands	r3, r4
 80008a2:	2420      	movs	r4, #32
 80008a4:	4063      	eors	r3, r4
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4c76      	ldr	r4, [pc, #472]	; (8000a84 <HAL_PCD_EP_Open+0x2e4>)
 80008aa:	4323      	orrs	r3, r4
 80008ac:	528b      	strh	r3, [r1, r2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80008ae:	23f4      	movs	r3, #244	; 0xf4
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2200      	movs	r2, #0
 80008b4:	54c2      	strb	r2, [r0, r3]
  return ret;
 80008b6:	2000      	movs	r0, #0
}
 80008b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80008ba:	6801      	ldr	r1, [r0, #0]
 80008bc:	7823      	ldrb	r3, [r4, #0]
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	5aca      	ldrh	r2, [r1, r3]
 80008c2:	4d6e      	ldr	r5, [pc, #440]	; (8000a7c <HAL_PCD_EP_Open+0x2dc>)
 80008c4:	402a      	ands	r2, r5
 80008c6:	52ca      	strh	r2, [r1, r3]
    break;
 80008c8:	e7ba      	b.n	8000840 <HAL_PCD_EP_Open+0xa0>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80008ca:	88a2      	ldrh	r2, [r4, #4]
 80008cc:	6805      	ldr	r5, [r0, #0]
 80008ce:	2650      	movs	r6, #80	; 0x50
 80008d0:	5bab      	ldrh	r3, [r5, r6]
 80008d2:	7821      	ldrb	r1, [r4, #0]
 80008d4:	00c9      	lsls	r1, r1, #3
 80008d6:	185b      	adds	r3, r3, r1
 80008d8:	195b      	adds	r3, r3, r5
 80008da:	496d      	ldr	r1, [pc, #436]	; (8000a90 <HAL_PCD_EP_Open+0x2f0>)
 80008dc:	468c      	mov	ip, r1
 80008de:	4463      	add	r3, ip
 80008e0:	2101      	movs	r1, #1
 80008e2:	438a      	bics	r2, r1
 80008e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 80008e6:	6801      	ldr	r1, [r0, #0]
 80008e8:	5b8b      	ldrh	r3, [r1, r6]
 80008ea:	7822      	ldrb	r2, [r4, #0]
 80008ec:	00d2      	lsls	r2, r2, #3
 80008ee:	189b      	adds	r3, r3, r2
 80008f0:	185b      	adds	r3, r3, r1
 80008f2:	4a68      	ldr	r2, [pc, #416]	; (8000a94 <HAL_PCD_EP_Open+0x2f4>)
 80008f4:	4694      	mov	ip, r2
 80008f6:	4463      	add	r3, ip
 80008f8:	68e1      	ldr	r1, [r4, #12]
 80008fa:	293e      	cmp	r1, #62	; 0x3e
 80008fc:	d923      	bls.n	8000946 <HAL_PCD_EP_Open+0x1a6>
 80008fe:	094a      	lsrs	r2, r1, #5
 8000900:	b292      	uxth	r2, r2
 8000902:	06c9      	lsls	r1, r1, #27
 8000904:	d101      	bne.n	800090a <HAL_PCD_EP_Open+0x16a>
 8000906:	3a01      	subs	r2, #1
 8000908:	b292      	uxth	r2, r2
 800090a:	0292      	lsls	r2, r2, #10
 800090c:	b292      	uxth	r2, r2
 800090e:	4962      	ldr	r1, [pc, #392]	; (8000a98 <HAL_PCD_EP_Open+0x2f8>)
 8000910:	430a      	orrs	r2, r1
 8000912:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000914:	6802      	ldr	r2, [r0, #0]
 8000916:	7823      	ldrb	r3, [r4, #0]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	18d1      	adds	r1, r2, r3
 800091c:	5ad3      	ldrh	r3, [r2, r3]
 800091e:	045a      	lsls	r2, r3, #17
 8000920:	d504      	bpl.n	800092c <HAL_PCD_EP_Open+0x18c>
 8000922:	4a57      	ldr	r2, [pc, #348]	; (8000a80 <HAL_PCD_EP_Open+0x2e0>)
 8000924:	4013      	ands	r3, r2
 8000926:	4a5d      	ldr	r2, [pc, #372]	; (8000a9c <HAL_PCD_EP_Open+0x2fc>)
 8000928:	4313      	orrs	r3, r2
 800092a:	800b      	strh	r3, [r1, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800092c:	6805      	ldr	r5, [r0, #0]
 800092e:	7823      	ldrb	r3, [r4, #0]
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	5ae9      	ldrh	r1, [r5, r3]
 8000934:	4a5a      	ldr	r2, [pc, #360]	; (8000aa0 <HAL_PCD_EP_Open+0x300>)
 8000936:	4011      	ands	r1, r2
 8000938:	22c0      	movs	r2, #192	; 0xc0
 800093a:	0192      	lsls	r2, r2, #6
 800093c:	4051      	eors	r1, r2
 800093e:	4a51      	ldr	r2, [pc, #324]	; (8000a84 <HAL_PCD_EP_Open+0x2e4>)
 8000940:	430a      	orrs	r2, r1
 8000942:	52ea      	strh	r2, [r5, r3]
 8000944:	e7b3      	b.n	80008ae <HAL_PCD_EP_Open+0x10e>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8000946:	084a      	lsrs	r2, r1, #1
 8000948:	b292      	uxth	r2, r2
 800094a:	07c9      	lsls	r1, r1, #31
 800094c:	d501      	bpl.n	8000952 <HAL_PCD_EP_Open+0x1b2>
 800094e:	3201      	adds	r2, #1
 8000950:	b292      	uxth	r2, r2
 8000952:	0292      	lsls	r2, r2, #10
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	e7dd      	b.n	8000914 <HAL_PCD_EP_Open+0x174>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8000958:	6805      	ldr	r5, [r0, #0]
 800095a:	7823      	ldrb	r3, [r4, #0]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	5aea      	ldrh	r2, [r5, r3]
 8000960:	4950      	ldr	r1, [pc, #320]	; (8000aa4 <HAL_PCD_EP_Open+0x304>)
 8000962:	4011      	ands	r1, r2
 8000964:	4a50      	ldr	r2, [pc, #320]	; (8000aa8 <HAL_PCD_EP_Open+0x308>)
 8000966:	430a      	orrs	r2, r1
 8000968:	52ea      	strh	r2, [r5, r3]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 800096a:	88e2      	ldrh	r2, [r4, #6]
 800096c:	6805      	ldr	r5, [r0, #0]
 800096e:	2750      	movs	r7, #80	; 0x50
 8000970:	5beb      	ldrh	r3, [r5, r7]
 8000972:	7821      	ldrb	r1, [r4, #0]
 8000974:	00c9      	lsls	r1, r1, #3
 8000976:	185b      	adds	r3, r3, r1
 8000978:	195b      	adds	r3, r3, r5
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	00c9      	lsls	r1, r1, #3
 800097e:	468c      	mov	ip, r1
 8000980:	4463      	add	r3, ip
 8000982:	2601      	movs	r6, #1
 8000984:	43b2      	bics	r2, r6
 8000986:	801a      	strh	r2, [r3, #0]
 8000988:	8922      	ldrh	r2, [r4, #8]
 800098a:	6805      	ldr	r5, [r0, #0]
 800098c:	5beb      	ldrh	r3, [r5, r7]
 800098e:	7821      	ldrb	r1, [r4, #0]
 8000990:	00c9      	lsls	r1, r1, #3
 8000992:	185b      	adds	r3, r3, r1
 8000994:	195b      	adds	r3, r3, r5
 8000996:	493e      	ldr	r1, [pc, #248]	; (8000a90 <HAL_PCD_EP_Open+0x2f0>)
 8000998:	468c      	mov	ip, r1
 800099a:	4463      	add	r3, ip
 800099c:	43b2      	bics	r2, r6
 800099e:	801a      	strh	r2, [r3, #0]
    if (ep->is_in==0U)
 80009a0:	7863      	ldrb	r3, [r4, #1]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d135      	bne.n	8000a12 <HAL_PCD_EP_Open+0x272>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80009a6:	6802      	ldr	r2, [r0, #0]
 80009a8:	7823      	ldrb	r3, [r4, #0]
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	18d1      	adds	r1, r2, r3
 80009ae:	5ad3      	ldrh	r3, [r2, r3]
 80009b0:	045a      	lsls	r2, r3, #17
 80009b2:	d504      	bpl.n	80009be <HAL_PCD_EP_Open+0x21e>
 80009b4:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <HAL_PCD_EP_Open+0x2e0>)
 80009b6:	4013      	ands	r3, r2
 80009b8:	4a38      	ldr	r2, [pc, #224]	; (8000a9c <HAL_PCD_EP_Open+0x2fc>)
 80009ba:	4313      	orrs	r3, r2
 80009bc:	800b      	strh	r3, [r1, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80009be:	6802      	ldr	r2, [r0, #0]
 80009c0:	7823      	ldrb	r3, [r4, #0]
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	18d1      	adds	r1, r2, r3
 80009c6:	5ad3      	ldrh	r3, [r2, r3]
 80009c8:	065a      	lsls	r2, r3, #25
 80009ca:	d504      	bpl.n	80009d6 <HAL_PCD_EP_Open+0x236>
 80009cc:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <HAL_PCD_EP_Open+0x2e0>)
 80009ce:	4013      	ands	r3, r2
 80009d0:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <HAL_PCD_EP_Open+0x2e8>)
 80009d2:	4313      	orrs	r3, r2
 80009d4:	800b      	strh	r3, [r1, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80009d6:	6805      	ldr	r5, [r0, #0]
 80009d8:	7823      	ldrb	r3, [r4, #0]
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	5aea      	ldrh	r2, [r5, r3]
 80009de:	4928      	ldr	r1, [pc, #160]	; (8000a80 <HAL_PCD_EP_Open+0x2e0>)
 80009e0:	4011      	ands	r1, r2
 80009e2:	4a29      	ldr	r2, [pc, #164]	; (8000a88 <HAL_PCD_EP_Open+0x2e8>)
 80009e4:	430a      	orrs	r2, r1
 80009e6:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80009e8:	6805      	ldr	r5, [r0, #0]
 80009ea:	7821      	ldrb	r1, [r4, #0]
 80009ec:	0089      	lsls	r1, r1, #2
 80009ee:	5a6b      	ldrh	r3, [r5, r1]
 80009f0:	4a2b      	ldr	r2, [pc, #172]	; (8000aa0 <HAL_PCD_EP_Open+0x300>)
 80009f2:	401a      	ands	r2, r3
 80009f4:	23c0      	movs	r3, #192	; 0xc0
 80009f6:	019b      	lsls	r3, r3, #6
 80009f8:	4053      	eors	r3, r2
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <HAL_PCD_EP_Open+0x2e4>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	526b      	strh	r3, [r5, r1]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000a00:	6805      	ldr	r5, [r0, #0]
 8000a02:	7823      	ldrb	r3, [r4, #0]
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	5ae9      	ldrh	r1, [r5, r3]
 8000a08:	4c20      	ldr	r4, [pc, #128]	; (8000a8c <HAL_PCD_EP_Open+0x2ec>)
 8000a0a:	4021      	ands	r1, r4
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	52ea      	strh	r2, [r5, r3]
 8000a10:	e74d      	b.n	80008ae <HAL_PCD_EP_Open+0x10e>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000a12:	6802      	ldr	r2, [r0, #0]
 8000a14:	7823      	ldrb	r3, [r4, #0]
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	18d1      	adds	r1, r2, r3
 8000a1a:	5ad3      	ldrh	r3, [r2, r3]
 8000a1c:	045a      	lsls	r2, r3, #17
 8000a1e:	d504      	bpl.n	8000a2a <HAL_PCD_EP_Open+0x28a>
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <HAL_PCD_EP_Open+0x2e0>)
 8000a22:	4013      	ands	r3, r2
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <HAL_PCD_EP_Open+0x2fc>)
 8000a26:	4313      	orrs	r3, r2
 8000a28:	800b      	strh	r3, [r1, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000a2a:	6802      	ldr	r2, [r0, #0]
 8000a2c:	7823      	ldrb	r3, [r4, #0]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	18d1      	adds	r1, r2, r3
 8000a32:	5ad3      	ldrh	r3, [r2, r3]
 8000a34:	065a      	lsls	r2, r3, #25
 8000a36:	d504      	bpl.n	8000a42 <HAL_PCD_EP_Open+0x2a2>
 8000a38:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <HAL_PCD_EP_Open+0x2e0>)
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_PCD_EP_Open+0x2e8>)
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	800b      	strh	r3, [r1, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8000a42:	6805      	ldr	r5, [r0, #0]
 8000a44:	7823      	ldrb	r3, [r4, #0]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	5aea      	ldrh	r2, [r5, r3]
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <HAL_PCD_EP_Open+0x2e0>)
 8000a4c:	4011      	ands	r1, r2
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <HAL_PCD_EP_Open+0x2fc>)
 8000a50:	430a      	orrs	r2, r1
 8000a52:	52ea      	strh	r2, [r5, r3]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000a54:	6805      	ldr	r5, [r0, #0]
 8000a56:	7821      	ldrb	r1, [r4, #0]
 8000a58:	0089      	lsls	r1, r1, #2
 8000a5a:	5a6b      	ldrh	r3, [r5, r1]
 8000a5c:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <HAL_PCD_EP_Open+0x2ec>)
 8000a5e:	4013      	ands	r3, r2
 8000a60:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_PCD_EP_Open+0x2e4>)
 8000a62:	4313      	orrs	r3, r2
 8000a64:	526b      	strh	r3, [r5, r1]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000a66:	6805      	ldr	r5, [r0, #0]
 8000a68:	7823      	ldrb	r3, [r4, #0]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	5ae9      	ldrh	r1, [r5, r3]
 8000a6e:	4c0c      	ldr	r4, [pc, #48]	; (8000aa0 <HAL_PCD_EP_Open+0x300>)
 8000a70:	4021      	ands	r1, r4
 8000a72:	430a      	orrs	r2, r1
 8000a74:	52ea      	strh	r2, [r5, r3]
 8000a76:	e71a      	b.n	80008ae <HAL_PCD_EP_Open+0x10e>
  __HAL_LOCK(hpcd); 
 8000a78:	2002      	movs	r0, #2
 8000a7a:	e71d      	b.n	80008b8 <HAL_PCD_EP_Open+0x118>
 8000a7c:	ffff898f 	.word	0xffff898f
 8000a80:	00000f0f 	.word	0x00000f0f
 8000a84:	ffff8080 	.word	0xffff8080
 8000a88:	ffff80c0 	.word	0xffff80c0
 8000a8c:	ffff8fbf 	.word	0xffff8fbf
 8000a90:	00000404 	.word	0x00000404
 8000a94:	00000406 	.word	0x00000406
 8000a98:	ffff8000 	.word	0xffff8000
 8000a9c:	ffffc080 	.word	0xffffc080
 8000aa0:	ffffbf8f 	.word	0xffffbf8f
 8000aa4:	00000e0f 	.word	0x00000e0f
 8000aa8:	ffff8180 	.word	0xffff8180

08000aac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8000aac:	b530      	push	{r4, r5, lr}
 8000aae:	000c      	movs	r4, r1
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000ab0:	b24a      	sxtb	r2, r1
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	db37      	blt.n	8000b26 <HAL_PCD_EP_Close+0x7a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000ab6:	217f      	movs	r1, #127	; 0x7f
 8000ab8:	4021      	ands	r1, r4
 8000aba:	00cb      	lsls	r3, r1, #3
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	3309      	adds	r3, #9
 8000ac2:	33ff      	adds	r3, #255	; 0xff
 8000ac4:	18c3      	adds	r3, r0, r3
  }
  ep->num   = ep_addr & 0x7FU;
 8000ac6:	217f      	movs	r1, #127	; 0x7f
 8000ac8:	4021      	ands	r1, r4
 8000aca:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000acc:	0fd2      	lsrs	r2, r2, #31
 8000ace:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8000ad0:	22f4      	movs	r2, #244	; 0xf4
 8000ad2:	0052      	lsls	r2, r2, #1
 8000ad4:	5c82      	ldrb	r2, [r0, r2]
 8000ad6:	2a01      	cmp	r2, #1
 8000ad8:	d100      	bne.n	8000adc <HAL_PCD_EP_Close+0x30>
 8000ada:	e0ab      	b.n	8000c34 <HAL_PCD_EP_Close+0x188>
 8000adc:	22f4      	movs	r2, #244	; 0xf4
 8000ade:	0052      	lsls	r2, r2, #1
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	5481      	strb	r1, [r0, r2]

  if (ep->doublebuffer == 0U) 
 8000ae4:	7a9a      	ldrb	r2, [r3, #10]
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	d13b      	bne.n	8000b62 <HAL_PCD_EP_Close+0xb6>
  {
    if (ep->is_in)
 8000aea:	785a      	ldrb	r2, [r3, #1]
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d022      	beq.n	8000b36 <HAL_PCD_EP_Close+0x8a>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000af0:	6801      	ldr	r1, [r0, #0]
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	188c      	adds	r4, r1, r2
 8000af8:	5a8a      	ldrh	r2, [r1, r2]
 8000afa:	0651      	lsls	r1, r2, #25
 8000afc:	d504      	bpl.n	8000b08 <HAL_PCD_EP_Close+0x5c>
 8000afe:	494e      	ldr	r1, [pc, #312]	; (8000c38 <HAL_PCD_EP_Close+0x18c>)
 8000b00:	400a      	ands	r2, r1
 8000b02:	494e      	ldr	r1, [pc, #312]	; (8000c3c <HAL_PCD_EP_Close+0x190>)
 8000b04:	430a      	orrs	r2, r1
 8000b06:	8022      	strh	r2, [r4, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000b08:	6804      	ldr	r4, [r0, #0]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	5ae2      	ldrh	r2, [r4, r3]
 8000b10:	494b      	ldr	r1, [pc, #300]	; (8000c40 <HAL_PCD_EP_Close+0x194>)
 8000b12:	4011      	ands	r1, r2
 8000b14:	4a4b      	ldr	r2, [pc, #300]	; (8000c44 <HAL_PCD_EP_Close+0x198>)
 8000b16:	430a      	orrs	r2, r1
 8000b18:	52e2      	strh	r2, [r4, r3]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8000b1a:	23f4      	movs	r3, #244	; 0xf4
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8000b22:	2000      	movs	r0, #0
}
 8000b24:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000b26:	217f      	movs	r1, #127	; 0x7f
 8000b28:	4021      	ands	r1, r4
 8000b2a:	00cb      	lsls	r3, r1, #3
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	3328      	adds	r3, #40	; 0x28
 8000b32:	18c3      	adds	r3, r0, r3
 8000b34:	e7c7      	b.n	8000ac6 <HAL_PCD_EP_Close+0x1a>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000b36:	6801      	ldr	r1, [r0, #0]
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	0092      	lsls	r2, r2, #2
 8000b3c:	188c      	adds	r4, r1, r2
 8000b3e:	5a8a      	ldrh	r2, [r1, r2]
 8000b40:	0451      	lsls	r1, r2, #17
 8000b42:	d504      	bpl.n	8000b4e <HAL_PCD_EP_Close+0xa2>
 8000b44:	493c      	ldr	r1, [pc, #240]	; (8000c38 <HAL_PCD_EP_Close+0x18c>)
 8000b46:	400a      	ands	r2, r1
 8000b48:	493f      	ldr	r1, [pc, #252]	; (8000c48 <HAL_PCD_EP_Close+0x19c>)
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000b4e:	6804      	ldr	r4, [r0, #0]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	5ae2      	ldrh	r2, [r4, r3]
 8000b56:	493d      	ldr	r1, [pc, #244]	; (8000c4c <HAL_PCD_EP_Close+0x1a0>)
 8000b58:	4011      	ands	r1, r2
 8000b5a:	4a3a      	ldr	r2, [pc, #232]	; (8000c44 <HAL_PCD_EP_Close+0x198>)
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	52e2      	strh	r2, [r4, r3]
 8000b60:	e7db      	b.n	8000b1a <HAL_PCD_EP_Close+0x6e>
    if (ep->is_in==0U)
 8000b62:	785a      	ldrb	r2, [r3, #1]
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	d132      	bne.n	8000bce <HAL_PCD_EP_Close+0x122>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000b68:	6801      	ldr	r1, [r0, #0]
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	188c      	adds	r4, r1, r2
 8000b70:	5a8a      	ldrh	r2, [r1, r2]
 8000b72:	0451      	lsls	r1, r2, #17
 8000b74:	d504      	bpl.n	8000b80 <HAL_PCD_EP_Close+0xd4>
 8000b76:	4930      	ldr	r1, [pc, #192]	; (8000c38 <HAL_PCD_EP_Close+0x18c>)
 8000b78:	400a      	ands	r2, r1
 8000b7a:	4933      	ldr	r1, [pc, #204]	; (8000c48 <HAL_PCD_EP_Close+0x19c>)
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	8022      	strh	r2, [r4, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000b80:	6801      	ldr	r1, [r0, #0]
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	0092      	lsls	r2, r2, #2
 8000b86:	188c      	adds	r4, r1, r2
 8000b88:	5a8a      	ldrh	r2, [r1, r2]
 8000b8a:	0651      	lsls	r1, r2, #25
 8000b8c:	d504      	bpl.n	8000b98 <HAL_PCD_EP_Close+0xec>
 8000b8e:	492a      	ldr	r1, [pc, #168]	; (8000c38 <HAL_PCD_EP_Close+0x18c>)
 8000b90:	400a      	ands	r2, r1
 8000b92:	492a      	ldr	r1, [pc, #168]	; (8000c3c <HAL_PCD_EP_Close+0x190>)
 8000b94:	430a      	orrs	r2, r1
 8000b96:	8022      	strh	r2, [r4, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8000b98:	6805      	ldr	r5, [r0, #0]
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	5aa9      	ldrh	r1, [r5, r2]
 8000ba0:	4c25      	ldr	r4, [pc, #148]	; (8000c38 <HAL_PCD_EP_Close+0x18c>)
 8000ba2:	400c      	ands	r4, r1
 8000ba4:	4925      	ldr	r1, [pc, #148]	; (8000c3c <HAL_PCD_EP_Close+0x190>)
 8000ba6:	4321      	orrs	r1, r4
 8000ba8:	52a9      	strh	r1, [r5, r2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000baa:	6805      	ldr	r5, [r0, #0]
 8000bac:	781c      	ldrb	r4, [r3, #0]
 8000bae:	00a4      	lsls	r4, r4, #2
 8000bb0:	5b2a      	ldrh	r2, [r5, r4]
 8000bb2:	4926      	ldr	r1, [pc, #152]	; (8000c4c <HAL_PCD_EP_Close+0x1a0>)
 8000bb4:	400a      	ands	r2, r1
 8000bb6:	4923      	ldr	r1, [pc, #140]	; (8000c44 <HAL_PCD_EP_Close+0x198>)
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	532a      	strh	r2, [r5, r4]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000bbc:	6804      	ldr	r4, [r0, #0]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	5ae2      	ldrh	r2, [r4, r3]
 8000bc4:	4d1e      	ldr	r5, [pc, #120]	; (8000c40 <HAL_PCD_EP_Close+0x194>)
 8000bc6:	402a      	ands	r2, r5
 8000bc8:	4311      	orrs	r1, r2
 8000bca:	52e1      	strh	r1, [r4, r3]
 8000bcc:	e7a5      	b.n	8000b1a <HAL_PCD_EP_Close+0x6e>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000bce:	6801      	ldr	r1, [r0, #0]
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	188c      	adds	r4, r1, r2
 8000bd6:	5a8a      	ldrh	r2, [r1, r2]
 8000bd8:	0451      	lsls	r1, r2, #17
 8000bda:	d504      	bpl.n	8000be6 <HAL_PCD_EP_Close+0x13a>
 8000bdc:	4916      	ldr	r1, [pc, #88]	; (8000c38 <HAL_PCD_EP_Close+0x18c>)
 8000bde:	400a      	ands	r2, r1
 8000be0:	4919      	ldr	r1, [pc, #100]	; (8000c48 <HAL_PCD_EP_Close+0x19c>)
 8000be2:	430a      	orrs	r2, r1
 8000be4:	8022      	strh	r2, [r4, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000be6:	6801      	ldr	r1, [r0, #0]
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	188c      	adds	r4, r1, r2
 8000bee:	5a8a      	ldrh	r2, [r1, r2]
 8000bf0:	0651      	lsls	r1, r2, #25
 8000bf2:	d504      	bpl.n	8000bfe <HAL_PCD_EP_Close+0x152>
 8000bf4:	4910      	ldr	r1, [pc, #64]	; (8000c38 <HAL_PCD_EP_Close+0x18c>)
 8000bf6:	400a      	ands	r2, r1
 8000bf8:	4910      	ldr	r1, [pc, #64]	; (8000c3c <HAL_PCD_EP_Close+0x190>)
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	8022      	strh	r2, [r4, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8000bfe:	6805      	ldr	r5, [r0, #0]
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	5aa9      	ldrh	r1, [r5, r2]
 8000c06:	4c0c      	ldr	r4, [pc, #48]	; (8000c38 <HAL_PCD_EP_Close+0x18c>)
 8000c08:	400c      	ands	r4, r1
 8000c0a:	490f      	ldr	r1, [pc, #60]	; (8000c48 <HAL_PCD_EP_Close+0x19c>)
 8000c0c:	4321      	orrs	r1, r4
 8000c0e:	52a9      	strh	r1, [r5, r2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000c10:	6805      	ldr	r5, [r0, #0]
 8000c12:	781c      	ldrb	r4, [r3, #0]
 8000c14:	00a4      	lsls	r4, r4, #2
 8000c16:	5b2a      	ldrh	r2, [r5, r4]
 8000c18:	4909      	ldr	r1, [pc, #36]	; (8000c40 <HAL_PCD_EP_Close+0x194>)
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	4909      	ldr	r1, [pc, #36]	; (8000c44 <HAL_PCD_EP_Close+0x198>)
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	532a      	strh	r2, [r5, r4]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000c22:	6804      	ldr	r4, [r0, #0]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	5ae2      	ldrh	r2, [r4, r3]
 8000c2a:	4d08      	ldr	r5, [pc, #32]	; (8000c4c <HAL_PCD_EP_Close+0x1a0>)
 8000c2c:	402a      	ands	r2, r5
 8000c2e:	4311      	orrs	r1, r2
 8000c30:	52e1      	strh	r1, [r4, r3]
 8000c32:	e772      	b.n	8000b1a <HAL_PCD_EP_Close+0x6e>
  __HAL_LOCK(hpcd); 
 8000c34:	2002      	movs	r0, #2
 8000c36:	e775      	b.n	8000b24 <HAL_PCD_EP_Close+0x78>
 8000c38:	00000f0f 	.word	0x00000f0f
 8000c3c:	ffff80c0 	.word	0xffff80c0
 8000c40:	ffff8fbf 	.word	0xffff8fbf
 8000c44:	ffff8080 	.word	0xffff8080
 8000c48:	ffffc080 	.word	0xffffc080
 8000c4c:	ffffbf8f 	.word	0xffffbf8f

08000c50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000c50:	b530      	push	{r4, r5, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000c52:	247f      	movs	r4, #127	; 0x7f
 8000c54:	4021      	ands	r1, r4
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000c56:	00cc      	lsls	r4, r1, #3
 8000c58:	1a64      	subs	r4, r4, r1
 8000c5a:	00a4      	lsls	r4, r4, #2
 8000c5c:	1904      	adds	r4, r0, r4
 8000c5e:	0025      	movs	r5, r4
 8000c60:	3519      	adds	r5, #25
 8000c62:	35ff      	adds	r5, #255	; 0xff
 8000c64:	602a      	str	r2, [r5, #0]
  ep->xfer_len = len;
 8000c66:	0022      	movs	r2, r4
 8000c68:	321d      	adds	r2, #29
 8000c6a:	32ff      	adds	r2, #255	; 0xff
 8000c6c:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 8000c6e:	3508      	adds	r5, #8
 8000c70:	2200      	movs	r2, #0
 8000c72:	602a      	str	r2, [r5, #0]
  ep->is_in = 0U;
 8000c74:	3d17      	subs	r5, #23
 8000c76:	702a      	strb	r2, [r5, #0]
  ep->num = ep_addr & 0x7FU;
 8000c78:	0022      	movs	r2, r4
 8000c7a:	3209      	adds	r2, #9
 8000c7c:	32ff      	adds	r2, #255	; 0xff
 8000c7e:	7011      	strb	r1, [r2, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8000c80:	3415      	adds	r4, #21
 8000c82:	34ff      	adds	r4, #255	; 0xff
 8000c84:	6822      	ldr	r2, [r4, #0]
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d941      	bls.n	8000d0e <HAL_PCD_EP_Receive+0xbe>
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8000c8a:	00cc      	lsls	r4, r1, #3
 8000c8c:	1a64      	subs	r4, r4, r1
 8000c8e:	00a4      	lsls	r4, r4, #2
 8000c90:	1904      	adds	r4, r0, r4
 8000c92:	341d      	adds	r4, #29
 8000c94:	34ff      	adds	r4, #255	; 0xff
 8000c96:	1a9b      	subs	r3, r3, r2
 8000c98:	6023      	str	r3, [r4, #0]
    len=ep->xfer_len;
    ep->xfer_len =0U;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8000c9a:	00cb      	lsls	r3, r1, #3
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	18c3      	adds	r3, r0, r3
 8000ca2:	3313      	adds	r3, #19
 8000ca4:	33ff      	adds	r3, #255	; 0xff
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d143      	bne.n	8000d34 <HAL_PCD_EP_Receive+0xe4>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8000cac:	6804      	ldr	r4, [r0, #0]
 8000cae:	3350      	adds	r3, #80	; 0x50
 8000cb0:	5ae5      	ldrh	r5, [r4, r3]
 8000cb2:	00cb      	lsls	r3, r1, #3
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	18c3      	adds	r3, r0, r3
 8000cba:	3309      	adds	r3, #9
 8000cbc:	33ff      	adds	r3, #255	; 0xff
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	18eb      	adds	r3, r5, r3
 8000cc4:	191c      	adds	r4, r3, r4
 8000cc6:	4b60      	ldr	r3, [pc, #384]	; (8000e48 <HAL_PCD_EP_Receive+0x1f8>)
 8000cc8:	469c      	mov	ip, r3
 8000cca:	4464      	add	r4, ip
 8000ccc:	2a3e      	cmp	r2, #62	; 0x3e
 8000cce:	d928      	bls.n	8000d22 <HAL_PCD_EP_Receive+0xd2>
 8000cd0:	0953      	lsrs	r3, r2, #5
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	06d2      	lsls	r2, r2, #27
 8000cd6:	d101      	bne.n	8000cdc <HAL_PCD_EP_Receive+0x8c>
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	029b      	lsls	r3, r3, #10
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	4a5a      	ldr	r2, [pc, #360]	; (8000e4c <HAL_PCD_EP_Receive+0x1fc>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	8023      	strh	r3, [r4, #0]
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000ce6:	6804      	ldr	r4, [r0, #0]
 8000ce8:	00cb      	lsls	r3, r1, #3
 8000cea:	1a59      	subs	r1, r3, r1
 8000cec:	0089      	lsls	r1, r1, #2
 8000cee:	1840      	adds	r0, r0, r1
 8000cf0:	3009      	adds	r0, #9
 8000cf2:	30ff      	adds	r0, #255	; 0xff
 8000cf4:	7803      	ldrb	r3, [r0, #0]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	5ae1      	ldrh	r1, [r4, r3]
 8000cfa:	4a55      	ldr	r2, [pc, #340]	; (8000e50 <HAL_PCD_EP_Receive+0x200>)
 8000cfc:	4011      	ands	r1, r2
 8000cfe:	22c0      	movs	r2, #192	; 0xc0
 8000d00:	0192      	lsls	r2, r2, #6
 8000d02:	4051      	eors	r1, r2
 8000d04:	4a53      	ldr	r2, [pc, #332]	; (8000e54 <HAL_PCD_EP_Receive+0x204>)
 8000d06:	430a      	orrs	r2, r1
 8000d08:	52e2      	strh	r2, [r4, r3]
  
  return HAL_OK;
}
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	bd30      	pop	{r4, r5, pc}
    ep->xfer_len =0U;
 8000d0e:	00ca      	lsls	r2, r1, #3
 8000d10:	1a52      	subs	r2, r2, r1
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	1882      	adds	r2, r0, r2
 8000d16:	321d      	adds	r2, #29
 8000d18:	32ff      	adds	r2, #255	; 0xff
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	6014      	str	r4, [r2, #0]
    len=ep->xfer_len;
 8000d1e:	001a      	movs	r2, r3
 8000d20:	e7bb      	b.n	8000c9a <HAL_PCD_EP_Receive+0x4a>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8000d22:	0853      	lsrs	r3, r2, #1
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	07d2      	lsls	r2, r2, #31
 8000d28:	d501      	bpl.n	8000d2e <HAL_PCD_EP_Receive+0xde>
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	029b      	lsls	r3, r3, #10
 8000d30:	8023      	strh	r3, [r4, #0]
 8000d32:	e7d8      	b.n	8000ce6 <HAL_PCD_EP_Receive+0x96>
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000d34:	00cb      	lsls	r3, r1, #3
 8000d36:	1a5b      	subs	r3, r3, r1
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	18c3      	adds	r3, r0, r3
 8000d3c:	330a      	adds	r3, #10
 8000d3e:	33ff      	adds	r3, #255	; 0xff
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d126      	bne.n	8000d94 <HAL_PCD_EP_Receive+0x144>
 8000d46:	6804      	ldr	r4, [r0, #0]
 8000d48:	3350      	adds	r3, #80	; 0x50
 8000d4a:	5ae5      	ldrh	r5, [r4, r3]
 8000d4c:	00cb      	lsls	r3, r1, #3
 8000d4e:	1a5b      	subs	r3, r3, r1
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	18c3      	adds	r3, r0, r3
 8000d54:	3309      	adds	r3, #9
 8000d56:	33ff      	adds	r3, #255	; 0xff
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	18eb      	adds	r3, r5, r3
 8000d5e:	191c      	adds	r4, r3, r4
 8000d60:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <HAL_PCD_EP_Receive+0x208>)
 8000d62:	469c      	mov	ip, r3
 8000d64:	4464      	add	r4, ip
 8000d66:	2a3e      	cmp	r2, #62	; 0x3e
 8000d68:	d90b      	bls.n	8000d82 <HAL_PCD_EP_Receive+0x132>
 8000d6a:	0953      	lsrs	r3, r2, #5
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	06d5      	lsls	r5, r2, #27
 8000d70:	d101      	bne.n	8000d76 <HAL_PCD_EP_Receive+0x126>
 8000d72:	3b01      	subs	r3, #1
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	029b      	lsls	r3, r3, #10
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4d34      	ldr	r5, [pc, #208]	; (8000e4c <HAL_PCD_EP_Receive+0x1fc>)
 8000d7c:	432b      	orrs	r3, r5
 8000d7e:	8023      	strh	r3, [r4, #0]
 8000d80:	e00a      	b.n	8000d98 <HAL_PCD_EP_Receive+0x148>
 8000d82:	0853      	lsrs	r3, r2, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	07d5      	lsls	r5, r2, #31
 8000d88:	d501      	bpl.n	8000d8e <HAL_PCD_EP_Receive+0x13e>
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	029b      	lsls	r3, r3, #10
 8000d90:	8023      	strh	r3, [r4, #0]
 8000d92:	e001      	b.n	8000d98 <HAL_PCD_EP_Receive+0x148>
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d026      	beq.n	8000de6 <HAL_PCD_EP_Receive+0x196>
 8000d98:	00cb      	lsls	r3, r1, #3
 8000d9a:	1a5b      	subs	r3, r3, r1
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	18c3      	adds	r3, r0, r3
 8000da0:	330a      	adds	r3, #10
 8000da2:	33ff      	adds	r3, #255	; 0xff
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d138      	bne.n	8000e1c <HAL_PCD_EP_Receive+0x1cc>
 8000daa:	6804      	ldr	r4, [r0, #0]
 8000dac:	3350      	adds	r3, #80	; 0x50
 8000dae:	5ae5      	ldrh	r5, [r4, r3]
 8000db0:	00cb      	lsls	r3, r1, #3
 8000db2:	1a5b      	subs	r3, r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	18c3      	adds	r3, r0, r3
 8000db8:	3309      	adds	r3, #9
 8000dba:	33ff      	adds	r3, #255	; 0xff
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	18eb      	adds	r3, r5, r3
 8000dc2:	191c      	adds	r4, r3, r4
 8000dc4:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <HAL_PCD_EP_Receive+0x1f8>)
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	4464      	add	r4, ip
 8000dca:	2a3e      	cmp	r2, #62	; 0x3e
 8000dcc:	d91d      	bls.n	8000e0a <HAL_PCD_EP_Receive+0x1ba>
 8000dce:	0953      	lsrs	r3, r2, #5
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	06d2      	lsls	r2, r2, #27
 8000dd4:	d101      	bne.n	8000dda <HAL_PCD_EP_Receive+0x18a>
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	029b      	lsls	r3, r3, #10
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <HAL_PCD_EP_Receive+0x1fc>)
 8000de0:	4313      	orrs	r3, r2
 8000de2:	8023      	strh	r3, [r4, #0]
 8000de4:	e77f      	b.n	8000ce6 <HAL_PCD_EP_Receive+0x96>
 8000de6:	6804      	ldr	r4, [r0, #0]
 8000de8:	334f      	adds	r3, #79	; 0x4f
 8000dea:	5ae5      	ldrh	r5, [r4, r3]
 8000dec:	00cb      	lsls	r3, r1, #3
 8000dee:	1a5b      	subs	r3, r3, r1
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	18c3      	adds	r3, r0, r3
 8000df4:	3309      	adds	r3, #9
 8000df6:	33ff      	adds	r3, #255	; 0xff
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	191c      	adds	r4, r3, r4
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_PCD_EP_Receive+0x208>)
 8000e02:	469c      	mov	ip, r3
 8000e04:	4464      	add	r4, ip
 8000e06:	8022      	strh	r2, [r4, #0]
 8000e08:	e7c6      	b.n	8000d98 <HAL_PCD_EP_Receive+0x148>
 8000e0a:	0853      	lsrs	r3, r2, #1
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	07d2      	lsls	r2, r2, #31
 8000e10:	d501      	bpl.n	8000e16 <HAL_PCD_EP_Receive+0x1c6>
 8000e12:	3301      	adds	r3, #1
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	029b      	lsls	r3, r3, #10
 8000e18:	8023      	strh	r3, [r4, #0]
 8000e1a:	e764      	b.n	8000ce6 <HAL_PCD_EP_Receive+0x96>
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d000      	beq.n	8000e22 <HAL_PCD_EP_Receive+0x1d2>
 8000e20:	e761      	b.n	8000ce6 <HAL_PCD_EP_Receive+0x96>
 8000e22:	6804      	ldr	r4, [r0, #0]
 8000e24:	334f      	adds	r3, #79	; 0x4f
 8000e26:	5ae5      	ldrh	r5, [r4, r3]
 8000e28:	00cb      	lsls	r3, r1, #3
 8000e2a:	1a5b      	subs	r3, r3, r1
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	18c3      	adds	r3, r0, r3
 8000e30:	3309      	adds	r3, #9
 8000e32:	33ff      	adds	r3, #255	; 0xff
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	18eb      	adds	r3, r5, r3
 8000e3a:	191c      	adds	r4, r3, r4
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <HAL_PCD_EP_Receive+0x1f8>)
 8000e3e:	469c      	mov	ip, r3
 8000e40:	4464      	add	r4, ip
 8000e42:	8022      	strh	r2, [r4, #0]
 8000e44:	e74f      	b.n	8000ce6 <HAL_PCD_EP_Receive+0x96>
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	00000406 	.word	0x00000406
 8000e4c:	ffff8000 	.word	0xffff8000
 8000e50:	ffffbf8f 	.word	0xffffbf8f
 8000e54:	ffff8080 	.word	0xffff8080
 8000e58:	00000402 	.word	0x00000402

08000e5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	000c      	movs	r4, r1
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8000e60:	23f4      	movs	r3, #244	; 0xf4
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	5cc3      	ldrb	r3, [r0, r3]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d047      	beq.n	8000efa <HAL_PCD_EP_SetStall+0x9e>
 8000e6a:	23f4      	movs	r3, #244	; 0xf4
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2201      	movs	r2, #1
 8000e70:	54c2      	strb	r2, [r0, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 8000e72:	b24a      	sxtb	r2, r1
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	db1e      	blt.n	8000eb6 <HAL_PCD_EP_SetStall+0x5a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e78:	00cb      	lsls	r3, r1, #3
 8000e7a:	1a5b      	subs	r3, r3, r1
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	3309      	adds	r3, #9
 8000e80:	33ff      	adds	r3, #255	; 0xff
 8000e82:	18c3      	adds	r3, r0, r3
  }
  
  ep->is_stall = 1;
 8000e84:	2101      	movs	r1, #1
 8000e86:	7099      	strb	r1, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000e88:	317e      	adds	r1, #126	; 0x7e
 8000e8a:	4021      	ands	r1, r4
 8000e8c:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000e8e:	0fd2      	lsrs	r2, r2, #31
 8000e90:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d117      	bne.n	8000ec6 <HAL_PCD_EP_SetStall+0x6a>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8000e96:	6804      	ldr	r4, [r0, #0]
 8000e98:	0089      	lsls	r1, r1, #2
 8000e9a:	5a62      	ldrh	r2, [r4, r1]
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_PCD_EP_SetStall+0xa4>)
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_PCD_EP_SetStall+0xa8>)
 8000ea2:	405a      	eors	r2, r3
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_PCD_EP_SetStall+0xac>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	5263      	strh	r3, [r4, r1]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
    }
  }
  __HAL_UNLOCK(hpcd); 
 8000eaa:	23f4      	movs	r3, #244	; 0xf4
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	54c2      	strb	r2, [r0, r3]
  
  return HAL_OK;
 8000eb2:	2000      	movs	r0, #0
}
 8000eb4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000eb6:	217f      	movs	r1, #127	; 0x7f
 8000eb8:	4021      	ands	r1, r4
 8000eba:	00cb      	lsls	r3, r1, #3
 8000ebc:	1a5b      	subs	r3, r3, r1
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	3328      	adds	r3, #40	; 0x28
 8000ec2:	18c3      	adds	r3, r0, r3
 8000ec4:	e7de      	b.n	8000e84 <HAL_PCD_EP_SetStall+0x28>
    if (ep->is_in)
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	d00b      	beq.n	8000ee2 <HAL_PCD_EP_SetStall+0x86>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8000eca:	6802      	ldr	r2, [r0, #0]
 8000ecc:	0089      	lsls	r1, r1, #2
 8000ece:	5a53      	ldrh	r3, [r2, r1]
 8000ed0:	4c0e      	ldr	r4, [pc, #56]	; (8000f0c <HAL_PCD_EP_SetStall+0xb0>)
 8000ed2:	4023      	ands	r3, r4
 8000ed4:	2410      	movs	r4, #16
 8000ed6:	4063      	eors	r3, r4
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4c0b      	ldr	r4, [pc, #44]	; (8000f08 <HAL_PCD_EP_SetStall+0xac>)
 8000edc:	4323      	orrs	r3, r4
 8000ede:	5253      	strh	r3, [r2, r1]
 8000ee0:	e7e3      	b.n	8000eaa <HAL_PCD_EP_SetStall+0x4e>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8000ee2:	6804      	ldr	r4, [r0, #0]
 8000ee4:	0089      	lsls	r1, r1, #2
 8000ee6:	5a62      	ldrh	r2, [r4, r1]
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_PCD_EP_SetStall+0xb4>)
 8000eea:	401a      	ands	r2, r3
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	015b      	lsls	r3, r3, #5
 8000ef0:	405a      	eors	r2, r3
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_PCD_EP_SetStall+0xac>)
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	5263      	strh	r3, [r4, r1]
 8000ef8:	e7d7      	b.n	8000eaa <HAL_PCD_EP_SetStall+0x4e>
  __HAL_LOCK(hpcd); 
 8000efa:	2002      	movs	r0, #2
 8000efc:	e7da      	b.n	8000eb4 <HAL_PCD_EP_SetStall+0x58>
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	ffffbfbf 	.word	0xffffbfbf
 8000f04:	00001010 	.word	0x00001010
 8000f08:	ffff8080 	.word	0xffff8080
 8000f0c:	ffff8fbf 	.word	0xffff8fbf
 8000f10:	ffffbf8f 	.word	0xffffbf8f

08000f14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f14:	b510      	push	{r4, lr}
 8000f16:	000c      	movs	r4, r1
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8000f18:	b24a      	sxtb	r2, r1
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	db36      	blt.n	8000f8c <HAL_PCD_EP_ClrStall+0x78>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f1e:	00cb      	lsls	r3, r1, #3
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	3309      	adds	r3, #9
 8000f26:	33ff      	adds	r3, #255	; 0xff
 8000f28:	18c3      	adds	r3, r0, r3
  }
  
  ep->is_stall = 0U;
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	7099      	strb	r1, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8000f2e:	317f      	adds	r1, #127	; 0x7f
 8000f30:	4021      	ands	r1, r4
 8000f32:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000f34:	0fd2      	lsrs	r2, r2, #31
 8000f36:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8000f38:	22f4      	movs	r2, #244	; 0xf4
 8000f3a:	0052      	lsls	r2, r2, #1
 8000f3c:	5c82      	ldrb	r2, [r0, r2]
 8000f3e:	2a01      	cmp	r2, #1
 8000f40:	d045      	beq.n	8000fce <HAL_PCD_EP_ClrStall+0xba>
 8000f42:	22f4      	movs	r2, #244	; 0xf4
 8000f44:	0052      	lsls	r2, r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	5481      	strb	r1, [r0, r2]
  
  if (ep->is_in)
 8000f4a:	785a      	ldrb	r2, [r3, #1]
 8000f4c:	2a00      	cmp	r2, #0
 8000f4e:	d025      	beq.n	8000f9c <HAL_PCD_EP_ClrStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000f50:	6801      	ldr	r1, [r0, #0]
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	188c      	adds	r4, r1, r2
 8000f58:	5a8a      	ldrh	r2, [r1, r2]
 8000f5a:	0651      	lsls	r1, r2, #25
 8000f5c:	d504      	bpl.n	8000f68 <HAL_PCD_EP_ClrStall+0x54>
 8000f5e:	491d      	ldr	r1, [pc, #116]	; (8000fd4 <HAL_PCD_EP_ClrStall+0xc0>)
 8000f60:	400a      	ands	r2, r1
 8000f62:	491d      	ldr	r1, [pc, #116]	; (8000fd8 <HAL_PCD_EP_ClrStall+0xc4>)
 8000f64:	430a      	orrs	r2, r1
 8000f66:	8022      	strh	r2, [r4, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8000f68:	6801      	ldr	r1, [r0, #0]
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	5a8b      	ldrh	r3, [r1, r2]
 8000f70:	4c1a      	ldr	r4, [pc, #104]	; (8000fdc <HAL_PCD_EP_ClrStall+0xc8>)
 8000f72:	4023      	ands	r3, r4
 8000f74:	2430      	movs	r4, #48	; 0x30
 8000f76:	4063      	eors	r3, r4
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4c19      	ldr	r4, [pc, #100]	; (8000fe0 <HAL_PCD_EP_ClrStall+0xcc>)
 8000f7c:	4323      	orrs	r3, r4
 8000f7e:	528b      	strh	r3, [r1, r2]
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
  }
  __HAL_UNLOCK(hpcd); 
 8000f80:	23f4      	movs	r3, #244	; 0xf4
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2200      	movs	r2, #0
 8000f86:	54c2      	strb	r2, [r0, r3]
    
  return HAL_OK;
 8000f88:	2000      	movs	r0, #0
}
 8000f8a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000f8c:	217f      	movs	r1, #127	; 0x7f
 8000f8e:	4021      	ands	r1, r4
 8000f90:	00cb      	lsls	r3, r1, #3
 8000f92:	1a5b      	subs	r3, r3, r1
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	3328      	adds	r3, #40	; 0x28
 8000f98:	18c3      	adds	r3, r0, r3
 8000f9a:	e7c6      	b.n	8000f2a <HAL_PCD_EP_ClrStall+0x16>
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000f9c:	6801      	ldr	r1, [r0, #0]
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	188c      	adds	r4, r1, r2
 8000fa4:	5a8a      	ldrh	r2, [r1, r2]
 8000fa6:	0451      	lsls	r1, r2, #17
 8000fa8:	d504      	bpl.n	8000fb4 <HAL_PCD_EP_ClrStall+0xa0>
 8000faa:	490a      	ldr	r1, [pc, #40]	; (8000fd4 <HAL_PCD_EP_ClrStall+0xc0>)
 8000fac:	400a      	ands	r2, r1
 8000fae:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <HAL_PCD_EP_ClrStall+0xd0>)
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	8022      	strh	r2, [r4, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000fb4:	6804      	ldr	r4, [r0, #0]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	5ae1      	ldrh	r1, [r4, r3]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_PCD_EP_ClrStall+0xd4>)
 8000fbe:	4011      	ands	r1, r2
 8000fc0:	22c0      	movs	r2, #192	; 0xc0
 8000fc2:	0192      	lsls	r2, r2, #6
 8000fc4:	4051      	eors	r1, r2
 8000fc6:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_PCD_EP_ClrStall+0xcc>)
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	52e2      	strh	r2, [r4, r3]
 8000fcc:	e7d8      	b.n	8000f80 <HAL_PCD_EP_ClrStall+0x6c>
  __HAL_LOCK(hpcd); 
 8000fce:	2002      	movs	r0, #2
 8000fd0:	e7db      	b.n	8000f8a <HAL_PCD_EP_ClrStall+0x76>
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	00000f0f 	.word	0x00000f0f
 8000fd8:	ffff80c0 	.word	0xffff80c0
 8000fdc:	ffff8fbf 	.word	0xffff8fbf
 8000fe0:	ffff8080 	.word	0xffff8080
 8000fe4:	ffffc080 	.word	0xffffc080
 8000fe8:	ffffbf8f 	.word	0xffffbf8f

08000fec <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8000fec:	b510      	push	{r4, lr}
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8000fee:	3301      	adds	r3, #1
 8000ff0:	085b      	lsrs	r3, r3, #1
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000ff2:	1810      	adds	r0, r2, r0
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	00d2      	lsls	r2, r2, #3
 8000ff8:	4694      	mov	ip, r2
 8000ffa:	4460      	add	r0, ip
  
  for (i = n; i != 0; i--)
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <PCD_WritePMA+0x26>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8001000:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8001002:	784a      	ldrb	r2, [r1, #1]
 8001004:	0212      	lsls	r2, r2, #8
 8001006:	4322      	orrs	r2, r4
    *pdwVal++ = temp2;
 8001008:	8002      	strh	r2, [r0, #0]
    pbUsrBuf++;
 800100a:	3102      	adds	r1, #2
  for (i = n; i != 0; i--)
 800100c:	3b01      	subs	r3, #1
    *pdwVal++ = temp2;
 800100e:	3002      	adds	r0, #2
 8001010:	e7f4      	b.n	8000ffc <PCD_WritePMA+0x10>
  }
}
 8001012:	bd10      	pop	{r4, pc}

08001014 <HAL_PCD_EP_Transmit>:
{
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	0005      	movs	r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001018:	247f      	movs	r4, #127	; 0x7f
 800101a:	400c      	ands	r4, r1
  ep->xfer_buff = pBuf;  
 800101c:	00e1      	lsls	r1, r4, #3
 800101e:	1b09      	subs	r1, r1, r4
 8001020:	0089      	lsls	r1, r1, #2
 8001022:	1841      	adds	r1, r0, r1
 8001024:	638a      	str	r2, [r1, #56]	; 0x38
  ep->xfer_len = len;
 8001026:	63cb      	str	r3, [r1, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001028:	2200      	movs	r2, #0
 800102a:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1U;
 800102c:	000a      	movs	r2, r1
 800102e:	3229      	adds	r2, #41	; 0x29
 8001030:	2001      	movs	r0, #1
 8001032:	7010      	strb	r0, [r2, #0]
  ep->num = ep_addr & 0x7FU;
 8001034:	3a01      	subs	r2, #1
 8001036:	7014      	strb	r4, [r2, #0]
  if (ep->xfer_len > ep->maxpacket)
 8001038:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 800103a:	42bb      	cmp	r3, r7
 800103c:	d933      	bls.n	80010a6 <HAL_PCD_EP_Transmit+0x92>
    ep->xfer_len-=len; 
 800103e:	1bdb      	subs	r3, r3, r7
 8001040:	63cb      	str	r3, [r1, #60]	; 0x3c
  if (ep->doublebuffer == 0U) 
 8001042:	00e2      	lsls	r2, r4, #3
 8001044:	1b12      	subs	r2, r2, r4
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	18aa      	adds	r2, r5, r2
 800104a:	3232      	adds	r2, #50	; 0x32
 800104c:	7813      	ldrb	r3, [r2, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d031      	beq.n	80010b6 <HAL_PCD_EP_Transmit+0xa2>
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001052:	682a      	ldr	r2, [r5, #0]
 8001054:	00e3      	lsls	r3, r4, #3
 8001056:	1b1b      	subs	r3, r3, r4
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	18eb      	adds	r3, r5, r3
 800105c:	3328      	adds	r3, #40	; 0x28
 800105e:	7818      	ldrb	r0, [r3, #0]
 8001060:	0083      	lsls	r3, r0, #2
 8001062:	5ad3      	ldrh	r3, [r2, r3]
 8001064:	065b      	lsls	r3, r3, #25
 8001066:	d400      	bmi.n	800106a <HAL_PCD_EP_Transmit+0x56>
 8001068:	e085      	b.n	8001176 <HAL_PCD_EP_Transmit+0x162>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 800106a:	00e3      	lsls	r3, r4, #3
 800106c:	1b1b      	subs	r3, r3, r4
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	18eb      	adds	r3, r5, r3
 8001072:	3329      	adds	r3, #41	; 0x29
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d13e      	bne.n	80010f8 <HAL_PCD_EP_Transmit+0xe4>
 800107a:	3350      	adds	r3, #80	; 0x50
 800107c:	5ad3      	ldrh	r3, [r2, r3]
 800107e:	00c0      	lsls	r0, r0, #3
 8001080:	1818      	adds	r0, r3, r0
 8001082:	1882      	adds	r2, r0, r2
 8001084:	4b61      	ldr	r3, [pc, #388]	; (800120c <HAL_PCD_EP_Transmit+0x1f8>)
 8001086:	469c      	mov	ip, r3
 8001088:	4462      	add	r2, ip
 800108a:	2f3e      	cmp	r7, #62	; 0x3e
 800108c:	d92b      	bls.n	80010e6 <HAL_PCD_EP_Transmit+0xd2>
 800108e:	097b      	lsrs	r3, r7, #5
 8001090:	b29b      	uxth	r3, r3
 8001092:	06f9      	lsls	r1, r7, #27
 8001094:	d101      	bne.n	800109a <HAL_PCD_EP_Transmit+0x86>
 8001096:	3b01      	subs	r3, #1
 8001098:	b29b      	uxth	r3, r3
 800109a:	029b      	lsls	r3, r3, #10
 800109c:	b29b      	uxth	r3, r3
 800109e:	485c      	ldr	r0, [pc, #368]	; (8001210 <HAL_PCD_EP_Transmit+0x1fc>)
 80010a0:	4303      	orrs	r3, r0
 80010a2:	8013      	strh	r3, [r2, #0]
 80010a4:	e02a      	b.n	80010fc <HAL_PCD_EP_Transmit+0xe8>
    ep->xfer_len =0U;
 80010a6:	00e2      	lsls	r2, r4, #3
 80010a8:	1b12      	subs	r2, r2, r4
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	18aa      	adds	r2, r5, r2
 80010ae:	2100      	movs	r1, #0
 80010b0:	63d1      	str	r1, [r2, #60]	; 0x3c
    len=ep->xfer_len;
 80010b2:	001f      	movs	r7, r3
 80010b4:	e7c5      	b.n	8001042 <HAL_PCD_EP_Transmit+0x2e>
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 80010b6:	b2bf      	uxth	r7, r7
 80010b8:	00e6      	lsls	r6, r4, #3
 80010ba:	1b36      	subs	r6, r6, r4
 80010bc:	00b6      	lsls	r6, r6, #2
 80010be:	19ae      	adds	r6, r5, r6
 80010c0:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
 80010c2:	003b      	movs	r3, r7
 80010c4:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80010c6:	6828      	ldr	r0, [r5, #0]
 80010c8:	f7ff ff90 	bl	8000fec <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 80010cc:	682a      	ldr	r2, [r5, #0]
 80010ce:	2350      	movs	r3, #80	; 0x50
 80010d0:	5ad3      	ldrh	r3, [r2, r3]
 80010d2:	3628      	adds	r6, #40	; 0x28
 80010d4:	7831      	ldrb	r1, [r6, #0]
 80010d6:	00c9      	lsls	r1, r1, #3
 80010d8:	185b      	adds	r3, r3, r1
 80010da:	189b      	adds	r3, r3, r2
 80010dc:	4a4d      	ldr	r2, [pc, #308]	; (8001214 <HAL_PCD_EP_Transmit+0x200>)
 80010de:	4694      	mov	ip, r2
 80010e0:	4463      	add	r3, ip
 80010e2:	801f      	strh	r7, [r3, #0]
 80010e4:	e02a      	b.n	800113c <HAL_PCD_EP_Transmit+0x128>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80010e6:	087b      	lsrs	r3, r7, #1
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	07f9      	lsls	r1, r7, #31
 80010ec:	d501      	bpl.n	80010f2 <HAL_PCD_EP_Transmit+0xde>
 80010ee:	3301      	adds	r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	8013      	strh	r3, [r2, #0]
 80010f6:	e001      	b.n	80010fc <HAL_PCD_EP_Transmit+0xe8>
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d032      	beq.n	8001162 <HAL_PCD_EP_Transmit+0x14e>
      pmabuffer = ep->pmaaddr1;
 80010fc:	00e3      	lsls	r3, r4, #3
 80010fe:	1b1b      	subs	r3, r3, r4
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	18eb      	adds	r3, r5, r3
 8001104:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8001106:	b2bb      	uxth	r3, r7
 8001108:	00e6      	lsls	r6, r4, #3
 800110a:	1b36      	subs	r6, r6, r4
 800110c:	00b6      	lsls	r6, r6, #2
 800110e:	19ae      	adds	r6, r5, r6
 8001110:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8001112:	6828      	ldr	r0, [r5, #0]
 8001114:	f7ff ff6a 	bl	8000fec <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8001118:	3629      	adds	r6, #41	; 0x29
 800111a:	7833      	ldrb	r3, [r6, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d163      	bne.n	80011e8 <HAL_PCD_EP_Transmit+0x1d4>
 8001120:	682a      	ldr	r2, [r5, #0]
 8001122:	00e3      	lsls	r3, r4, #3
 8001124:	1b1b      	subs	r3, r3, r4
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	18eb      	adds	r3, r5, r3
 800112a:	3328      	adds	r3, #40	; 0x28
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	5ad1      	ldrh	r1, [r2, r3]
 8001132:	4839      	ldr	r0, [pc, #228]	; (8001218 <HAL_PCD_EP_Transmit+0x204>)
 8001134:	4008      	ands	r0, r1
 8001136:	4939      	ldr	r1, [pc, #228]	; (800121c <HAL_PCD_EP_Transmit+0x208>)
 8001138:	4301      	orrs	r1, r0
 800113a:	52d1      	strh	r1, [r2, r3]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 800113c:	6828      	ldr	r0, [r5, #0]
 800113e:	00e1      	lsls	r1, r4, #3
 8001140:	1b0c      	subs	r4, r1, r4
 8001142:	00a4      	lsls	r4, r4, #2
 8001144:	192d      	adds	r5, r5, r4
 8001146:	3528      	adds	r5, #40	; 0x28
 8001148:	782a      	ldrb	r2, [r5, #0]
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	5a83      	ldrh	r3, [r0, r2]
 800114e:	4934      	ldr	r1, [pc, #208]	; (8001220 <HAL_PCD_EP_Transmit+0x20c>)
 8001150:	400b      	ands	r3, r1
 8001152:	2130      	movs	r1, #48	; 0x30
 8001154:	404b      	eors	r3, r1
 8001156:	b29b      	uxth	r3, r3
 8001158:	4932      	ldr	r1, [pc, #200]	; (8001224 <HAL_PCD_EP_Transmit+0x210>)
 800115a:	430b      	orrs	r3, r1
 800115c:	5283      	strh	r3, [r0, r2]
}
 800115e:	2000      	movs	r0, #0
 8001160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001162:	334f      	adds	r3, #79	; 0x4f
 8001164:	5ad3      	ldrh	r3, [r2, r3]
 8001166:	00c0      	lsls	r0, r0, #3
 8001168:	1818      	adds	r0, r3, r0
 800116a:	1882      	adds	r2, r0, r2
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <HAL_PCD_EP_Transmit+0x1f8>)
 800116e:	469c      	mov	ip, r3
 8001170:	4462      	add	r2, ip
 8001172:	8017      	strh	r7, [r2, #0]
 8001174:	e7c2      	b.n	80010fc <HAL_PCD_EP_Transmit+0xe8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001176:	00e3      	lsls	r3, r4, #3
 8001178:	1b1b      	subs	r3, r3, r4
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	18eb      	adds	r3, r5, r3
 800117e:	3329      	adds	r3, #41	; 0x29
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d11e      	bne.n	80011c4 <HAL_PCD_EP_Transmit+0x1b0>
 8001186:	3350      	adds	r3, #80	; 0x50
 8001188:	5ad3      	ldrh	r3, [r2, r3]
 800118a:	00c0      	lsls	r0, r0, #3
 800118c:	1818      	adds	r0, r3, r0
 800118e:	1882      	adds	r2, r0, r2
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_PCD_EP_Transmit+0x200>)
 8001192:	469c      	mov	ip, r3
 8001194:	4462      	add	r2, ip
 8001196:	2f3e      	cmp	r7, #62	; 0x3e
 8001198:	d90b      	bls.n	80011b2 <HAL_PCD_EP_Transmit+0x19e>
 800119a:	097b      	lsrs	r3, r7, #5
 800119c:	b29b      	uxth	r3, r3
 800119e:	06f9      	lsls	r1, r7, #27
 80011a0:	d101      	bne.n	80011a6 <HAL_PCD_EP_Transmit+0x192>
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	029b      	lsls	r3, r3, #10
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4819      	ldr	r0, [pc, #100]	; (8001210 <HAL_PCD_EP_Transmit+0x1fc>)
 80011ac:	4303      	orrs	r3, r0
 80011ae:	8013      	strh	r3, [r2, #0]
 80011b0:	e00a      	b.n	80011c8 <HAL_PCD_EP_Transmit+0x1b4>
 80011b2:	087b      	lsrs	r3, r7, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	07f9      	lsls	r1, r7, #31
 80011b8:	d501      	bpl.n	80011be <HAL_PCD_EP_Transmit+0x1aa>
 80011ba:	3301      	adds	r3, #1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	029b      	lsls	r3, r3, #10
 80011c0:	8013      	strh	r3, [r2, #0]
 80011c2:	e001      	b.n	80011c8 <HAL_PCD_EP_Transmit+0x1b4>
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d005      	beq.n	80011d4 <HAL_PCD_EP_Transmit+0x1c0>
      pmabuffer = ep->pmaaddr0;
 80011c8:	00e3      	lsls	r3, r4, #3
 80011ca:	1b1b      	subs	r3, r3, r4
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	18eb      	adds	r3, r5, r3
 80011d0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80011d2:	e798      	b.n	8001106 <HAL_PCD_EP_Transmit+0xf2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80011d4:	334f      	adds	r3, #79	; 0x4f
 80011d6:	5ad3      	ldrh	r3, [r2, r3]
 80011d8:	00c0      	lsls	r0, r0, #3
 80011da:	1818      	adds	r0, r3, r0
 80011dc:	1882      	adds	r2, r0, r2
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_PCD_EP_Transmit+0x200>)
 80011e0:	469c      	mov	ip, r3
 80011e2:	4462      	add	r2, ip
 80011e4:	8017      	strh	r7, [r2, #0]
 80011e6:	e7ef      	b.n	80011c8 <HAL_PCD_EP_Transmit+0x1b4>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d1a7      	bne.n	800113c <HAL_PCD_EP_Transmit+0x128>
 80011ec:	682a      	ldr	r2, [r5, #0]
 80011ee:	00e3      	lsls	r3, r4, #3
 80011f0:	1b1b      	subs	r3, r3, r4
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	18eb      	adds	r3, r5, r3
 80011f6:	3328      	adds	r3, #40	; 0x28
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	5ad1      	ldrh	r1, [r2, r3]
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <HAL_PCD_EP_Transmit+0x204>)
 8001200:	4008      	ands	r0, r1
 8001202:	4909      	ldr	r1, [pc, #36]	; (8001228 <HAL_PCD_EP_Transmit+0x214>)
 8001204:	4301      	orrs	r1, r0
 8001206:	52d1      	strh	r1, [r2, r3]
 8001208:	e798      	b.n	800113c <HAL_PCD_EP_Transmit+0x128>
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	00000406 	.word	0x00000406
 8001210:	ffff8000 	.word	0xffff8000
 8001214:	00000402 	.word	0x00000402
 8001218:	00000f0f 	.word	0x00000f0f
 800121c:	ffff80c0 	.word	0xffff80c0
 8001220:	ffff8fbf 	.word	0xffff8fbf
 8001224:	ffff8080 	.word	0xffff8080
 8001228:	ffffc080 	.word	0xffffc080

0800122c <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800122c:	b510      	push	{r4, lr}
  uint32_t n = (uint32_t)wNBytes >> 1U;
 800122e:	085c      	lsrs	r4, r3, #1
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001230:	1810      	adds	r0, r2, r0
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	00d2      	lsls	r2, r2, #3
 8001236:	4694      	mov	ip, r2
 8001238:	4460      	add	r0, ip
  
  for (i = n; i != 0U; i--)
 800123a:	2c00      	cmp	r4, #0
 800123c:	d007      	beq.n	800124e <PCD_ReadPMA+0x22>
  {
    temp = *pdwVal++;
 800123e:	8802      	ldrh	r2, [r0, #0]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8001240:	700a      	strb	r2, [r1, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 8001242:	0a12      	lsrs	r2, r2, #8
 8001244:	704a      	strb	r2, [r1, #1]
  for (i = n; i != 0U; i--)
 8001246:	3c01      	subs	r4, #1
    temp = *pdwVal++;
 8001248:	3002      	adds	r0, #2
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 800124a:	3102      	adds	r1, #2
 800124c:	e7f5      	b.n	800123a <PCD_ReadPMA+0xe>
  }
  
  if (wNBytes % 2)
 800124e:	07db      	lsls	r3, r3, #31
 8001250:	d501      	bpl.n	8001256 <PCD_ReadPMA+0x2a>
  {
    temp = *pdwVal++;
 8001252:	8803      	ldrh	r3, [r0, #0]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8001254:	700b      	strb	r3, [r1, #0]
  }
}
 8001256:	bd10      	pop	{r4, pc}

08001258 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	b083      	sub	sp, #12
 800125c:	0004      	movs	r4, r0
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 800125e:	ab01      	add	r3, sp, #4
 8001260:	2200      	movs	r2, #0
 8001262:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8001264:	e1b4      	b.n	80015d0 <PCD_EP_ISR_Handler+0x378>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001266:	8803      	ldrh	r3, [r0, #0]
 8001268:	4aaa      	ldr	r2, [pc, #680]	; (8001514 <PCD_EP_ISR_Handler+0x2bc>)
 800126a:	4013      	ands	r3, r2
 800126c:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800126e:	6821      	ldr	r1, [r4, #0]
 8001270:	2350      	movs	r3, #80	; 0x50
 8001272:	5acb      	ldrh	r3, [r1, r3]
 8001274:	2228      	movs	r2, #40	; 0x28
 8001276:	5ca2      	ldrb	r2, [r4, r2]
 8001278:	00d2      	lsls	r2, r2, #3
 800127a:	189b      	adds	r3, r3, r2
 800127c:	185b      	adds	r3, r3, r1
 800127e:	4aa6      	ldr	r2, [pc, #664]	; (8001518 <PCD_EP_ISR_Handler+0x2c0>)
 8001280:	4694      	mov	ip, r2
 8001282:	4463      	add	r3, ip
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	059b      	lsls	r3, r3, #22
 8001288:	0d9b      	lsrs	r3, r3, #22
 800128a:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800128c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800128e:	4694      	mov	ip, r2
 8001290:	4463      	add	r3, ip
 8001292:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001294:	2100      	movs	r1, #0
 8001296:	0020      	movs	r0, r4
 8001298:	f001 fffb 	bl	8003292 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800129c:	2324      	movs	r3, #36	; 0x24
 800129e:	5ce3      	ldrb	r3, [r4, r3]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d100      	bne.n	80012a6 <PCD_EP_ISR_Handler+0x4e>
 80012a4:	e194      	b.n	80015d0 <PCD_EP_ISR_Handler+0x378>
 80012a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d000      	beq.n	80012ae <PCD_EP_ISR_Handler+0x56>
 80012ac:	e190      	b.n	80015d0 <PCD_EP_ISR_Handler+0x378>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 80012ae:	2224      	movs	r2, #36	; 0x24
 80012b0:	5ca3      	ldrb	r3, [r4, r2]
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	4249      	negs	r1, r1
 80012b6:	430b      	orrs	r3, r1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	31cc      	adds	r1, #204	; 0xcc
 80012bc:	6820      	ldr	r0, [r4, #0]
 80012be:	5243      	strh	r3, [r0, r1]
          hpcd->USB_Address = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	54a3      	strb	r3, [r4, r2]
 80012c4:	e184      	b.n	80015d0 <PCD_EP_ISR_Handler+0x378>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012c6:	2350      	movs	r3, #80	; 0x50
 80012c8:	5ac3      	ldrh	r3, [r0, r3]
 80012ca:	2284      	movs	r2, #132	; 0x84
 80012cc:	0052      	lsls	r2, r2, #1
 80012ce:	5ca2      	ldrb	r2, [r4, r2]
 80012d0:	00d2      	lsls	r2, r2, #3
 80012d2:	189b      	adds	r3, r3, r2
 80012d4:	181b      	adds	r3, r3, r0
 80012d6:	4a91      	ldr	r2, [pc, #580]	; (800151c <PCD_EP_ISR_Handler+0x2c4>)
 80012d8:	4694      	mov	ip, r2
 80012da:	4463      	add	r3, ip
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	059b      	lsls	r3, r3, #22
 80012e0:	0d9b      	lsrs	r3, r3, #22
 80012e2:	0022      	movs	r2, r4
 80012e4:	3209      	adds	r2, #9
 80012e6:	32ff      	adds	r2, #255	; 0xff
 80012e8:	6193      	str	r3, [r2, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80012ea:	0021      	movs	r1, r4
 80012ec:	31ed      	adds	r1, #237	; 0xed
 80012ee:	31ff      	adds	r1, #255	; 0xff
 80012f0:	8892      	ldrh	r2, [r2, #4]
 80012f2:	f7ff ff9b 	bl	800122c <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80012f6:	6822      	ldr	r2, [r4, #0]
 80012f8:	8813      	ldrh	r3, [r2, #0]
 80012fa:	4989      	ldr	r1, [pc, #548]	; (8001520 <PCD_EP_ISR_Handler+0x2c8>)
 80012fc:	400b      	ands	r3, r1
 80012fe:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001300:	0020      	movs	r0, r4
 8001302:	f001 ffad 	bl	8003260 <HAL_PCD_SetupStageCallback>
 8001306:	e163      	b.n	80015d0 <PCD_EP_ISR_Handler+0x378>
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
          
          if (ep->xfer_count != 0U)
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001308:	0015      	movs	r5, r2
 800130a:	8892      	ldrh	r2, [r2, #4]
 800130c:	6929      	ldr	r1, [r5, #16]
 800130e:	f7ff ff8d 	bl	800122c <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001312:	692b      	ldr	r3, [r5, #16]
 8001314:	69aa      	ldr	r2, [r5, #24]
 8001316:	4694      	mov	ip, r2
 8001318:	4463      	add	r3, ip
 800131a:	612b      	str	r3, [r5, #16]
 800131c:	e196      	b.n	800164c <PCD_EP_ISR_Handler+0x3f4>
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 800131e:	084b      	lsrs	r3, r1, #1
 8001320:	b29b      	uxth	r3, r3
 8001322:	07c9      	lsls	r1, r1, #31
 8001324:	d501      	bpl.n	800132a <PCD_EP_ISR_Handler+0xd2>
 8001326:	3301      	adds	r3, #1
 8001328:	b29b      	uxth	r3, r3
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	8013      	strh	r3, [r2, #0]
 800132e:	e1aa      	b.n	8001686 <PCD_EP_ISR_Handler+0x42e>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8001330:	00ae      	lsls	r6, r5, #2
 8001332:	1981      	adds	r1, r0, r6
 8001334:	5b82      	ldrh	r2, [r0, r6]
 8001336:	ab01      	add	r3, sp, #4
 8001338:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	b21b      	sxth	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	db2e      	blt.n	80013a0 <PCD_EP_ISR_Handler+0x148>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001342:	ab01      	add	r3, sp, #4
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	061b      	lsls	r3, r3, #24
 8001348:	d400      	bmi.n	800134c <PCD_EP_ISR_Handler+0xf4>
 800134a:	e141      	b.n	80015d0 <PCD_EP_ISR_Handler+0x378>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800134c:	6822      	ldr	r2, [r4, #0]
 800134e:	5b93      	ldrh	r3, [r2, r6]
 8001350:	4970      	ldr	r1, [pc, #448]	; (8001514 <PCD_EP_ISR_Handler+0x2bc>)
 8001352:	400b      	ands	r3, r1
 8001354:	5393      	strh	r3, [r2, r6]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001356:	00eb      	lsls	r3, r5, #3
 8001358:	1b5b      	subs	r3, r3, r5
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	18e3      	adds	r3, r4, r3
 800135e:	3332      	adds	r3, #50	; 0x32
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d000      	beq.n	8001368 <PCD_EP_ISR_Handler+0x110>
 8001366:	e0e1      	b.n	800152c <PCD_EP_ISR_Handler+0x2d4>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001368:	6820      	ldr	r0, [r4, #0]
 800136a:	3350      	adds	r3, #80	; 0x50
 800136c:	5ac3      	ldrh	r3, [r0, r3]
 800136e:	00ea      	lsls	r2, r5, #3
 8001370:	1b52      	subs	r2, r2, r5
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	18a2      	adds	r2, r4, r2
 8001376:	0011      	movs	r1, r2
 8001378:	3128      	adds	r1, #40	; 0x28
 800137a:	7809      	ldrb	r1, [r1, #0]
 800137c:	00c9      	lsls	r1, r1, #3
 800137e:	185b      	adds	r3, r3, r1
 8001380:	181b      	adds	r3, r3, r0
 8001382:	4965      	ldr	r1, [pc, #404]	; (8001518 <PCD_EP_ISR_Handler+0x2c0>)
 8001384:	468c      	mov	ip, r1
 8001386:	4463      	add	r3, ip
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	059b      	lsls	r3, r3, #22
 800138c:	0d9b      	lsrs	r3, r3, #22
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 8001390:	d100      	bne.n	8001394 <PCD_EP_ISR_Handler+0x13c>
 8001392:	e0f8      	b.n	8001586 <PCD_EP_ISR_Handler+0x32e>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001394:	0011      	movs	r1, r2
 8001396:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001398:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800139a:	f7ff fe27 	bl	8000fec <PCD_WritePMA>
 800139e:	e0f2      	b.n	8001586 <PCD_EP_ISR_Handler+0x32e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 80013a0:	4b5f      	ldr	r3, [pc, #380]	; (8001520 <PCD_EP_ISR_Handler+0x2c8>)
 80013a2:	401a      	ands	r2, r3
 80013a4:	800a      	strh	r2, [r1, #0]
        if (ep->doublebuffer == 0U)
 80013a6:	00eb      	lsls	r3, r5, #3
 80013a8:	1b5b      	subs	r3, r3, r5
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	18e3      	adds	r3, r4, r3
 80013ae:	3313      	adds	r3, #19
 80013b0:	33ff      	adds	r3, #255	; 0xff
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d123      	bne.n	8001400 <PCD_EP_ISR_Handler+0x1a8>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013b8:	6820      	ldr	r0, [r4, #0]
 80013ba:	3350      	adds	r3, #80	; 0x50
 80013bc:	5ac2      	ldrh	r2, [r0, r3]
 80013be:	00eb      	lsls	r3, r5, #3
 80013c0:	1b5b      	subs	r3, r3, r5
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	18e3      	adds	r3, r4, r3
 80013c6:	3309      	adds	r3, #9
 80013c8:	33ff      	adds	r3, #255	; 0xff
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	18d3      	adds	r3, r2, r3
 80013d0:	181b      	adds	r3, r3, r0
 80013d2:	4a52      	ldr	r2, [pc, #328]	; (800151c <PCD_EP_ISR_Handler+0x2c4>)
 80013d4:	4694      	mov	ip, r2
 80013d6:	4463      	add	r3, ip
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	059b      	lsls	r3, r3, #22
 80013dc:	0d9f      	lsrs	r7, r3, #22
          if (count != 0U)
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d036      	beq.n	8001450 <PCD_EP_ISR_Handler+0x1f8>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80013e2:	00eb      	lsls	r3, r5, #3
 80013e4:	1b5b      	subs	r3, r3, r5
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	18e3      	adds	r3, r4, r3
 80013ea:	001a      	movs	r2, r3
 80013ec:	320d      	adds	r2, #13
 80013ee:	32ff      	adds	r2, #255	; 0xff
 80013f0:	8812      	ldrh	r2, [r2, #0]
 80013f2:	3319      	adds	r3, #25
 80013f4:	33ff      	adds	r3, #255	; 0xff
 80013f6:	6819      	ldr	r1, [r3, #0]
 80013f8:	003b      	movs	r3, r7
 80013fa:	f7ff ff17 	bl	800122c <PCD_ReadPMA>
 80013fe:	e027      	b.n	8001450 <PCD_EP_ISR_Handler+0x1f8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8001400:	6820      	ldr	r0, [r4, #0]
 8001402:	00eb      	lsls	r3, r5, #3
 8001404:	1b5b      	subs	r3, r3, r5
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	18e3      	adds	r3, r4, r3
 800140a:	3309      	adds	r3, #9
 800140c:	33ff      	adds	r3, #255	; 0xff
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	009a      	lsls	r2, r3, #2
 8001412:	5a82      	ldrh	r2, [r0, r2]
 8001414:	0452      	lsls	r2, r2, #17
 8001416:	d555      	bpl.n	80014c4 <PCD_EP_ISR_Handler+0x26c>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001418:	2250      	movs	r2, #80	; 0x50
 800141a:	5a82      	ldrh	r2, [r0, r2]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	18d3      	adds	r3, r2, r3
 8001420:	181b      	adds	r3, r3, r0
 8001422:	4a3d      	ldr	r2, [pc, #244]	; (8001518 <PCD_EP_ISR_Handler+0x2c0>)
 8001424:	4694      	mov	ip, r2
 8001426:	4463      	add	r3, ip
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	059b      	lsls	r3, r3, #22
 800142c:	0d9f      	lsrs	r7, r3, #22
            if (count != 0U)
 800142e:	2b00      	cmp	r3, #0
 8001430:	d139      	bne.n	80014a6 <PCD_EP_ISR_Handler+0x24e>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8001432:	6822      	ldr	r2, [r4, #0]
 8001434:	00eb      	lsls	r3, r5, #3
 8001436:	1b5b      	subs	r3, r3, r5
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	18e3      	adds	r3, r4, r3
 800143c:	3309      	adds	r3, #9
 800143e:	33ff      	adds	r3, #255	; 0xff
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	5ad1      	ldrh	r1, [r2, r3]
 8001446:	4837      	ldr	r0, [pc, #220]	; (8001524 <PCD_EP_ISR_Handler+0x2cc>)
 8001448:	4008      	ands	r0, r1
 800144a:	4937      	ldr	r1, [pc, #220]	; (8001528 <PCD_EP_ISR_Handler+0x2d0>)
 800144c:	4301      	orrs	r1, r0
 800144e:	52d1      	strh	r1, [r2, r3]
        ep->xfer_count+=count;
 8001450:	0038      	movs	r0, r7
 8001452:	00e9      	lsls	r1, r5, #3
 8001454:	1b49      	subs	r1, r1, r5
 8001456:	0089      	lsls	r1, r1, #2
 8001458:	1861      	adds	r1, r4, r1
 800145a:	000a      	movs	r2, r1
 800145c:	3221      	adds	r2, #33	; 0x21
 800145e:	32ff      	adds	r2, #255	; 0xff
 8001460:	6813      	ldr	r3, [r2, #0]
 8001462:	19db      	adds	r3, r3, r7
 8001464:	6013      	str	r3, [r2, #0]
        ep->xfer_buff+=count;
 8001466:	000b      	movs	r3, r1
 8001468:	3319      	adds	r3, #25
 800146a:	33ff      	adds	r3, #255	; 0xff
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4694      	mov	ip, r2
 8001470:	4467      	add	r7, ip
 8001472:	601f      	str	r7, [r3, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001474:	311d      	adds	r1, #29
 8001476:	31ff      	adds	r1, #255	; 0xff
 8001478:	680b      	ldr	r3, [r1, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d008      	beq.n	8001490 <PCD_EP_ISR_Handler+0x238>
 800147e:	00e9      	lsls	r1, r5, #3
 8001480:	1b49      	subs	r1, r1, r5
 8001482:	0089      	lsls	r1, r1, #2
 8001484:	1861      	adds	r1, r4, r1
 8001486:	3115      	adds	r1, #21
 8001488:	31ff      	adds	r1, #255	; 0xff
 800148a:	680a      	ldr	r2, [r1, #0]
 800148c:	4290      	cmp	r0, r2
 800148e:	d235      	bcs.n	80014fc <PCD_EP_ISR_Handler+0x2a4>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001490:	00eb      	lsls	r3, r5, #3
 8001492:	1b5b      	subs	r3, r3, r5
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	18e3      	adds	r3, r4, r3
 8001498:	3309      	adds	r3, #9
 800149a:	33ff      	adds	r3, #255	; 0xff
 800149c:	7819      	ldrb	r1, [r3, #0]
 800149e:	0020      	movs	r0, r4
 80014a0:	f001 fee8 	bl	8003274 <HAL_PCD_DataOutStageCallback>
 80014a4:	e74d      	b.n	8001342 <PCD_EP_ISR_Handler+0xea>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80014a6:	00eb      	lsls	r3, r5, #3
 80014a8:	1b5b      	subs	r3, r3, r5
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	18e3      	adds	r3, r4, r3
 80014ae:	001a      	movs	r2, r3
 80014b0:	320f      	adds	r2, #15
 80014b2:	32ff      	adds	r2, #255	; 0xff
 80014b4:	8812      	ldrh	r2, [r2, #0]
 80014b6:	3319      	adds	r3, #25
 80014b8:	33ff      	adds	r3, #255	; 0xff
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	003b      	movs	r3, r7
 80014be:	f7ff feb5 	bl	800122c <PCD_ReadPMA>
 80014c2:	e7b6      	b.n	8001432 <PCD_EP_ISR_Handler+0x1da>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80014c4:	2250      	movs	r2, #80	; 0x50
 80014c6:	5a82      	ldrh	r2, [r0, r2]
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	18d3      	adds	r3, r2, r3
 80014cc:	181b      	adds	r3, r3, r0
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <PCD_EP_ISR_Handler+0x2c4>)
 80014d0:	4694      	mov	ip, r2
 80014d2:	4463      	add	r3, ip
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	059b      	lsls	r3, r3, #22
 80014d8:	0d9f      	lsrs	r7, r3, #22
            if (count != 0U)
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0a9      	beq.n	8001432 <PCD_EP_ISR_Handler+0x1da>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014de:	00eb      	lsls	r3, r5, #3
 80014e0:	1b5b      	subs	r3, r3, r5
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	18e3      	adds	r3, r4, r3
 80014e6:	001a      	movs	r2, r3
 80014e8:	3211      	adds	r2, #17
 80014ea:	32ff      	adds	r2, #255	; 0xff
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	3319      	adds	r3, #25
 80014f0:	33ff      	adds	r3, #255	; 0xff
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	003b      	movs	r3, r7
 80014f6:	f7ff fe99 	bl	800122c <PCD_ReadPMA>
 80014fa:	e79a      	b.n	8001432 <PCD_EP_ISR_Handler+0x1da>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80014fc:	00ea      	lsls	r2, r5, #3
 80014fe:	1b52      	subs	r2, r2, r5
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	18a2      	adds	r2, r4, r2
 8001504:	3209      	adds	r2, #9
 8001506:	32ff      	adds	r2, #255	; 0xff
 8001508:	7811      	ldrb	r1, [r2, #0]
 800150a:	003a      	movs	r2, r7
 800150c:	0020      	movs	r0, r4
 800150e:	f7ff fb9f 	bl	8000c50 <HAL_PCD_EP_Receive>
 8001512:	e716      	b.n	8001342 <PCD_EP_ISR_Handler+0xea>
 8001514:	ffff8f0f 	.word	0xffff8f0f
 8001518:	00000402 	.word	0x00000402
 800151c:	00000406 	.word	0x00000406
 8001520:	00000f8f 	.word	0x00000f8f
 8001524:	00000f0f 	.word	0x00000f0f
 8001528:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 800152c:	6820      	ldr	r0, [r4, #0]
 800152e:	00eb      	lsls	r3, r5, #3
 8001530:	1b5b      	subs	r3, r3, r5
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	18e3      	adds	r3, r4, r3
 8001536:	3328      	adds	r3, #40	; 0x28
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	009a      	lsls	r2, r3, #2
 800153c:	5a82      	ldrh	r2, [r0, r2]
 800153e:	0652      	lsls	r2, r2, #25
 8001540:	d400      	bmi.n	8001544 <PCD_EP_ISR_Handler+0x2ec>
 8001542:	e0b1      	b.n	80016a8 <PCD_EP_ISR_Handler+0x450>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001544:	2250      	movs	r2, #80	; 0x50
 8001546:	5a82      	ldrh	r2, [r0, r2]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	18d3      	adds	r3, r2, r3
 800154c:	181b      	adds	r3, r3, r0
 800154e:	4a69      	ldr	r2, [pc, #420]	; (80016f4 <PCD_EP_ISR_Handler+0x49c>)
 8001550:	4694      	mov	ip, r2
 8001552:	4463      	add	r3, ip
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	059b      	lsls	r3, r3, #22
 8001558:	0d9b      	lsrs	r3, r3, #22
 800155a:	00ea      	lsls	r2, r5, #3
 800155c:	1b52      	subs	r2, r2, r5
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	18a2      	adds	r2, r4, r2
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 8001564:	2b00      	cmp	r3, #0
 8001566:	d000      	beq.n	800156a <PCD_EP_ISR_Handler+0x312>
 8001568:	e098      	b.n	800169c <PCD_EP_ISR_Handler+0x444>
            if (ep->xfer_count != 0U)
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 800156a:	6822      	ldr	r2, [r4, #0]
 800156c:	00eb      	lsls	r3, r5, #3
 800156e:	1b5b      	subs	r3, r3, r5
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	18e3      	adds	r3, r4, r3
 8001574:	3328      	adds	r3, #40	; 0x28
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	5ad1      	ldrh	r1, [r2, r3]
 800157c:	485e      	ldr	r0, [pc, #376]	; (80016f8 <PCD_EP_ISR_Handler+0x4a0>)
 800157e:	4008      	ands	r0, r1
 8001580:	495e      	ldr	r1, [pc, #376]	; (80016fc <PCD_EP_ISR_Handler+0x4a4>)
 8001582:	4301      	orrs	r1, r0
 8001584:	52d1      	strh	r1, [r2, r3]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001586:	6821      	ldr	r1, [r4, #0]
 8001588:	2350      	movs	r3, #80	; 0x50
 800158a:	5aca      	ldrh	r2, [r1, r3]
 800158c:	00eb      	lsls	r3, r5, #3
 800158e:	1b5b      	subs	r3, r3, r5
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	18e3      	adds	r3, r4, r3
 8001594:	0018      	movs	r0, r3
 8001596:	3028      	adds	r0, #40	; 0x28
 8001598:	7800      	ldrb	r0, [r0, #0]
 800159a:	00c0      	lsls	r0, r0, #3
 800159c:	1812      	adds	r2, r2, r0
 800159e:	1852      	adds	r2, r2, r1
 80015a0:	4954      	ldr	r1, [pc, #336]	; (80016f4 <PCD_EP_ISR_Handler+0x49c>)
 80015a2:	468c      	mov	ip, r1
 80015a4:	4462      	add	r2, ip
 80015a6:	8812      	ldrh	r2, [r2, #0]
 80015a8:	0592      	lsls	r2, r2, #22
 80015aa:	0d92      	lsrs	r2, r2, #22
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 80015ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015b0:	468c      	mov	ip, r1
 80015b2:	4462      	add	r2, ip
 80015b4:	639a      	str	r2, [r3, #56]	; 0x38
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d000      	beq.n	80015be <PCD_EP_ISR_Handler+0x366>
 80015bc:	e08d      	b.n	80016da <PCD_EP_ISR_Handler+0x482>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015be:	00eb      	lsls	r3, r5, #3
 80015c0:	1b5b      	subs	r3, r3, r5
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	18e3      	adds	r3, r4, r3
 80015c6:	3328      	adds	r3, #40	; 0x28
 80015c8:	7819      	ldrb	r1, [r3, #0]
 80015ca:	0020      	movs	r0, r4
 80015cc:	f001 fe61 	bl	8003292 <HAL_PCD_DataInStageCallback>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 80015d0:	6820      	ldr	r0, [r4, #0]
 80015d2:	2344      	movs	r3, #68	; 0x44
 80015d4:	5ac3      	ldrh	r3, [r0, r3]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	466a      	mov	r2, sp
 80015da:	80d3      	strh	r3, [r2, #6]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db00      	blt.n	80015e4 <PCD_EP_ISR_Handler+0x38c>
 80015e2:	e084      	b.n	80016ee <PCD_EP_ISR_Handler+0x496>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80015e4:	466b      	mov	r3, sp
 80015e6:	88da      	ldrh	r2, [r3, #6]
 80015e8:	230f      	movs	r3, #15
 80015ea:	0015      	movs	r5, r2
 80015ec:	401d      	ands	r5, r3
    if (EPindex == 0U)
 80015ee:	421a      	tst	r2, r3
 80015f0:	d000      	beq.n	80015f4 <PCD_EP_ISR_Handler+0x39c>
 80015f2:	e69d      	b.n	8001330 <PCD_EP_ISR_Handler+0xd8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80015f4:	466b      	mov	r3, sp
 80015f6:	3306      	adds	r3, #6
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	06db      	lsls	r3, r3, #27
 80015fc:	d400      	bmi.n	8001600 <PCD_EP_ISR_Handler+0x3a8>
 80015fe:	e632      	b.n	8001266 <PCD_EP_ISR_Handler+0xe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001600:	8802      	ldrh	r2, [r0, #0]
 8001602:	ab01      	add	r3, sp, #4
 8001604:	801a      	strh	r2, [r3, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	051b      	lsls	r3, r3, #20
 800160a:	d500      	bpl.n	800160e <PCD_EP_ISR_Handler+0x3b6>
 800160c:	e65b      	b.n	80012c6 <PCD_EP_ISR_Handler+0x6e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800160e:	ab01      	add	r3, sp, #4
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b21b      	sxth	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	dadb      	bge.n	80015d0 <PCD_EP_ISR_Handler+0x378>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001618:	8803      	ldrh	r3, [r0, #0]
 800161a:	4a39      	ldr	r2, [pc, #228]	; (8001700 <PCD_EP_ISR_Handler+0x4a8>)
 800161c:	4013      	ands	r3, r2
 800161e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001620:	6820      	ldr	r0, [r4, #0]
 8001622:	2350      	movs	r3, #80	; 0x50
 8001624:	5ac3      	ldrh	r3, [r0, r3]
 8001626:	2284      	movs	r2, #132	; 0x84
 8001628:	0052      	lsls	r2, r2, #1
 800162a:	5ca2      	ldrb	r2, [r4, r2]
 800162c:	00d2      	lsls	r2, r2, #3
 800162e:	189b      	adds	r3, r3, r2
 8001630:	181b      	adds	r3, r3, r0
 8001632:	4a34      	ldr	r2, [pc, #208]	; (8001704 <PCD_EP_ISR_Handler+0x4ac>)
 8001634:	4694      	mov	ip, r2
 8001636:	4463      	add	r3, ip
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	059b      	lsls	r3, r3, #22
 800163c:	0d9b      	lsrs	r3, r3, #22
 800163e:	0022      	movs	r2, r4
 8001640:	3209      	adds	r2, #9
 8001642:	32ff      	adds	r2, #255	; 0xff
 8001644:	6193      	str	r3, [r2, #24]
          if (ep->xfer_count != 0U)
 8001646:	2b00      	cmp	r3, #0
 8001648:	d000      	beq.n	800164c <PCD_EP_ISR_Handler+0x3f4>
 800164a:	e65d      	b.n	8001308 <PCD_EP_ISR_Handler+0xb0>
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800164c:	2100      	movs	r1, #0
 800164e:	0020      	movs	r0, r4
 8001650:	f001 fe10 	bl	8003274 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8001654:	6823      	ldr	r3, [r4, #0]
 8001656:	2250      	movs	r2, #80	; 0x50
 8001658:	5a9a      	ldrh	r2, [r3, r2]
 800165a:	189a      	adds	r2, r3, r2
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <PCD_EP_ISR_Handler+0x4ac>)
 800165e:	469c      	mov	ip, r3
 8001660:	4462      	add	r2, ip
 8001662:	0023      	movs	r3, r4
 8001664:	3309      	adds	r3, #9
 8001666:	33ff      	adds	r3, #255	; 0xff
 8001668:	68d9      	ldr	r1, [r3, #12]
 800166a:	293e      	cmp	r1, #62	; 0x3e
 800166c:	d800      	bhi.n	8001670 <PCD_EP_ISR_Handler+0x418>
 800166e:	e656      	b.n	800131e <PCD_EP_ISR_Handler+0xc6>
 8001670:	094b      	lsrs	r3, r1, #5
 8001672:	b29b      	uxth	r3, r3
 8001674:	06c9      	lsls	r1, r1, #27
 8001676:	d101      	bne.n	800167c <PCD_EP_ISR_Handler+0x424>
 8001678:	3b01      	subs	r3, #1
 800167a:	b29b      	uxth	r3, r3
 800167c:	029b      	lsls	r3, r3, #10
 800167e:	b29b      	uxth	r3, r3
 8001680:	4921      	ldr	r1, [pc, #132]	; (8001708 <PCD_EP_ISR_Handler+0x4b0>)
 8001682:	430b      	orrs	r3, r1
 8001684:	8013      	strh	r3, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8001686:	6821      	ldr	r1, [r4, #0]
 8001688:	880a      	ldrh	r2, [r1, #0]
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <PCD_EP_ISR_Handler+0x4b4>)
 800168c:	401a      	ands	r2, r3
 800168e:	23c0      	movs	r3, #192	; 0xc0
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	405a      	eors	r2, r3
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <PCD_EP_ISR_Handler+0x4b8>)
 8001696:	4313      	orrs	r3, r2
 8001698:	800b      	strh	r3, [r1, #0]
 800169a:	e799      	b.n	80015d0 <PCD_EP_ISR_Handler+0x378>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800169c:	0011      	movs	r1, r2
 800169e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80016a0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80016a2:	f7ff fca3 	bl	8000fec <PCD_WritePMA>
 80016a6:	e760      	b.n	800156a <PCD_EP_ISR_Handler+0x312>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80016a8:	2250      	movs	r2, #80	; 0x50
 80016aa:	5a82      	ldrh	r2, [r0, r2]
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	181b      	adds	r3, r3, r0
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <PCD_EP_ISR_Handler+0x4ac>)
 80016b4:	4694      	mov	ip, r2
 80016b6:	4463      	add	r3, ip
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	059b      	lsls	r3, r3, #22
 80016bc:	0d9b      	lsrs	r3, r3, #22
 80016be:	00ea      	lsls	r2, r5, #3
 80016c0:	1b52      	subs	r2, r2, r5
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	18a2      	adds	r2, r4, r2
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d100      	bne.n	80016ce <PCD_EP_ISR_Handler+0x476>
 80016cc:	e74d      	b.n	800156a <PCD_EP_ISR_Handler+0x312>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80016ce:	0011      	movs	r1, r2
 80016d0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80016d2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80016d4:	f7ff fc8a 	bl	8000fec <PCD_WritePMA>
 80016d8:	e747      	b.n	800156a <PCD_EP_ISR_Handler+0x312>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80016da:	00e9      	lsls	r1, r5, #3
 80016dc:	1b49      	subs	r1, r1, r5
 80016de:	0089      	lsls	r1, r1, #2
 80016e0:	1861      	adds	r1, r4, r1
 80016e2:	3128      	adds	r1, #40	; 0x28
 80016e4:	7809      	ldrb	r1, [r1, #0]
 80016e6:	0020      	movs	r0, r4
 80016e8:	f7ff fc94 	bl	8001014 <HAL_PCD_EP_Transmit>
 80016ec:	e770      	b.n	80015d0 <PCD_EP_ISR_Handler+0x378>
        }
      } 
    }
  }
  return HAL_OK;
}
 80016ee:	2000      	movs	r0, #0
 80016f0:	b003      	add	sp, #12
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	00000402 	.word	0x00000402
 80016f8:	00000f0f 	.word	0x00000f0f
 80016fc:	ffffc080 	.word	0xffffc080
 8001700:	00000f8f 	.word	0x00000f8f
 8001704:	00000406 	.word	0x00000406
 8001708:	ffff8000 	.word	0xffff8000
 800170c:	ffffbf8f 	.word	0xffffbf8f
 8001710:	ffff8080 	.word	0xffff8080

08001714 <HAL_PCD_IRQHandler>:
{
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001718:	2344      	movs	r3, #68	; 0x44
 800171a:	6802      	ldr	r2, [r0, #0]
 800171c:	5ad3      	ldrh	r3, [r2, r3]
 800171e:	b21b      	sxth	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	db48      	blt.n	80017b6 <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	2244      	movs	r2, #68	; 0x44
 8001728:	5a9a      	ldrh	r2, [r3, r2]
 800172a:	0552      	lsls	r2, r2, #21
 800172c:	d446      	bmi.n	80017bc <HAL_PCD_IRQHandler+0xa8>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	2244      	movs	r2, #68	; 0x44
 8001732:	5a9a      	ldrh	r2, [r3, r2]
 8001734:	0452      	lsls	r2, r2, #17
 8001736:	d504      	bpl.n	8001742 <HAL_PCD_IRQHandler+0x2e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001738:	2144      	movs	r1, #68	; 0x44
 800173a:	5a5a      	ldrh	r2, [r3, r1]
 800173c:	4835      	ldr	r0, [pc, #212]	; (8001814 <HAL_PCD_IRQHandler+0x100>)
 800173e:	4002      	ands	r2, r0
 8001740:	525a      	strh	r2, [r3, r1]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	2244      	movs	r2, #68	; 0x44
 8001746:	5a9a      	ldrh	r2, [r3, r2]
 8001748:	0492      	lsls	r2, r2, #18
 800174a:	d504      	bpl.n	8001756 <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800174c:	2144      	movs	r1, #68	; 0x44
 800174e:	5a5a      	ldrh	r2, [r3, r1]
 8001750:	4831      	ldr	r0, [pc, #196]	; (8001818 <HAL_PCD_IRQHandler+0x104>)
 8001752:	4002      	ands	r2, r0
 8001754:	525a      	strh	r2, [r3, r1]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	2244      	movs	r2, #68	; 0x44
 800175a:	5a9a      	ldrh	r2, [r3, r2]
 800175c:	04d2      	lsls	r2, r2, #19
 800175e:	d43a      	bmi.n	80017d6 <HAL_PCD_IRQHandler+0xc2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	2244      	movs	r2, #68	; 0x44
 8001764:	5a9a      	ldrh	r2, [r3, r2]
 8001766:	0512      	lsls	r2, r2, #20
 8001768:	d515      	bpl.n	8001796 <HAL_PCD_IRQHandler+0x82>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800176a:	2144      	movs	r1, #68	; 0x44
 800176c:	5a5a      	ldrh	r2, [r3, r1]
 800176e:	482b      	ldr	r0, [pc, #172]	; (800181c <HAL_PCD_IRQHandler+0x108>)
 8001770:	4002      	ands	r2, r0
 8001772:	525a      	strh	r2, [r3, r1]
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	2240      	movs	r2, #64	; 0x40
 8001778:	5a83      	ldrh	r3, [r0, r2]
 800177a:	2508      	movs	r5, #8
 800177c:	432b      	orrs	r3, r5
 800177e:	b29b      	uxth	r3, r3
 8001780:	5283      	strh	r3, [r0, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001782:	6820      	ldr	r0, [r4, #0]
 8001784:	5a83      	ldrh	r3, [r0, r2]
 8001786:	2504      	movs	r5, #4
 8001788:	432b      	orrs	r3, r5
 800178a:	b29b      	uxth	r3, r3
 800178c:	5283      	strh	r3, [r0, r2]
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	5a5b      	ldrh	r3, [r3, r1]
 8001792:	04db      	lsls	r3, r3, #19
 8001794:	d531      	bpl.n	80017fa <HAL_PCD_IRQHandler+0xe6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	2244      	movs	r2, #68	; 0x44
 800179a:	5a9a      	ldrh	r2, [r3, r2]
 800179c:	0592      	lsls	r2, r2, #22
 800179e:	d430      	bmi.n	8001802 <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	2244      	movs	r2, #68	; 0x44
 80017a4:	5a9a      	ldrh	r2, [r3, r2]
 80017a6:	05d2      	lsls	r2, r2, #23
 80017a8:	d504      	bpl.n	80017b4 <HAL_PCD_IRQHandler+0xa0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80017aa:	2144      	movs	r1, #68	; 0x44
 80017ac:	5a5a      	ldrh	r2, [r3, r1]
 80017ae:	481c      	ldr	r0, [pc, #112]	; (8001820 <HAL_PCD_IRQHandler+0x10c>)
 80017b0:	4002      	ands	r2, r0
 80017b2:	525a      	strh	r2, [r3, r1]
}
 80017b4:	bd70      	pop	{r4, r5, r6, pc}
    PCD_EP_ISR_Handler(hpcd);
 80017b6:	f7ff fd4f 	bl	8001258 <PCD_EP_ISR_Handler>
 80017ba:	e7b3      	b.n	8001724 <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017bc:	2144      	movs	r1, #68	; 0x44
 80017be:	5a5a      	ldrh	r2, [r3, r1]
 80017c0:	4818      	ldr	r0, [pc, #96]	; (8001824 <HAL_PCD_IRQHandler+0x110>)
 80017c2:	4002      	ands	r2, r0
 80017c4:	525a      	strh	r2, [r3, r1]
    HAL_PCD_ResetCallback(hpcd);
 80017c6:	0020      	movs	r0, r4
 80017c8:	f001 fd77 	bl	80032ba <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80017cc:	2100      	movs	r1, #0
 80017ce:	0020      	movs	r0, r4
 80017d0:	f7fe ffca 	bl	8000768 <HAL_PCD_SetAddress>
 80017d4:	e7ab      	b.n	800172e <HAL_PCD_IRQHandler+0x1a>
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 80017d6:	2240      	movs	r2, #64	; 0x40
 80017d8:	5a99      	ldrh	r1, [r3, r2]
 80017da:	2004      	movs	r0, #4
 80017dc:	4381      	bics	r1, r0
 80017de:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_PCD_IRQHandler+0x114>)
 80017e2:	6821      	ldr	r1, [r4, #0]
 80017e4:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResumeCallback(hpcd);
 80017e6:	0020      	movs	r0, r4
 80017e8:	f001 fd86 	bl	80032f8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80017ec:	6821      	ldr	r1, [r4, #0]
 80017ee:	2244      	movs	r2, #68	; 0x44
 80017f0:	5a8b      	ldrh	r3, [r1, r2]
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <HAL_PCD_IRQHandler+0x118>)
 80017f4:	4003      	ands	r3, r0
 80017f6:	528b      	strh	r3, [r1, r2]
 80017f8:	e7b2      	b.n	8001760 <HAL_PCD_IRQHandler+0x4c>
      HAL_PCD_SuspendCallback(hpcd);
 80017fa:	0020      	movs	r0, r4
 80017fc:	f001 fd6a 	bl	80032d4 <HAL_PCD_SuspendCallback>
 8001800:	e7c9      	b.n	8001796 <HAL_PCD_IRQHandler+0x82>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001802:	2144      	movs	r1, #68	; 0x44
 8001804:	5a5a      	ldrh	r2, [r3, r1]
 8001806:	480a      	ldr	r0, [pc, #40]	; (8001830 <HAL_PCD_IRQHandler+0x11c>)
 8001808:	4002      	ands	r2, r0
 800180a:	525a      	strh	r2, [r3, r1]
    HAL_PCD_SOFCallback(hpcd);
 800180c:	0020      	movs	r0, r4
 800180e:	f001 fd4d 	bl	80032ac <HAL_PCD_SOFCallback>
 8001812:	e7c5      	b.n	80017a0 <HAL_PCD_IRQHandler+0x8c>
 8001814:	ffffbfff 	.word	0xffffbfff
 8001818:	ffffdfff 	.word	0xffffdfff
 800181c:	fffff7ff 	.word	0xfffff7ff
 8001820:	fffffeff 	.word	0xfffffeff
 8001824:	fffffbff 	.word	0xfffffbff
 8001828:	ffffbd00 	.word	0xffffbd00
 800182c:	ffffefff 	.word	0xffffefff
 8001830:	fffffdff 	.word	0xfffffdff

08001834 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8001834:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001836:	060c      	lsls	r4, r1, #24
 8001838:	d50c      	bpl.n	8001854 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800183a:	247f      	movs	r4, #127	; 0x7f
 800183c:	4021      	ands	r1, r4
 800183e:	00cc      	lsls	r4, r1, #3
 8001840:	1a61      	subs	r1, r4, r1
 8001842:	0089      	lsls	r1, r1, #2
 8001844:	3128      	adds	r1, #40	; 0x28
 8001846:	1840      	adds	r0, r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001848:	2a00      	cmp	r2, #0
 800184a:	d10a      	bne.n	8001862 <HAL_PCDEx_PMAConfig+0x2e>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 800184c:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800184e:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK;
}
 8001850:	2000      	movs	r0, #0
 8001852:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001854:	00cc      	lsls	r4, r1, #3
 8001856:	1a61      	subs	r1, r4, r1
 8001858:	0089      	lsls	r1, r1, #2
 800185a:	3109      	adds	r1, #9
 800185c:	31ff      	adds	r1, #255	; 0xff
 800185e:	1840      	adds	r0, r0, r1
 8001860:	e7f2      	b.n	8001848 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8001862:	2201      	movs	r2, #1
 8001864:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8001866:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001868:	0c1b      	lsrs	r3, r3, #16
 800186a:	8103      	strh	r3, [r0, #8]
 800186c:	e7f0      	b.n	8001850 <HAL_PCDEx_PMAConfig+0x1c>
	...

08001870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	6803      	ldr	r3, [r0, #0]
 8001878:	07db      	lsls	r3, r3, #31
 800187a:	d52b      	bpl.n	80018d4 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800187c:	4bb3      	ldr	r3, [pc, #716]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	230c      	movs	r3, #12
 8001882:	4013      	ands	r3, r2
 8001884:	2b04      	cmp	r3, #4
 8001886:	d01d      	beq.n	80018c4 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001888:	4bb0      	ldr	r3, [pc, #704]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	230c      	movs	r3, #12
 800188e:	4013      	ands	r3, r2
 8001890:	2b08      	cmp	r3, #8
 8001892:	d00e      	beq.n	80018b2 <HAL_RCC_OscConfig+0x42>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001894:	6863      	ldr	r3, [r4, #4]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d041      	beq.n	800191e <HAL_RCC_OscConfig+0xae>
 800189a:	2b00      	cmp	r3, #0
 800189c:	d156      	bne.n	800194c <HAL_RCC_OscConfig+0xdc>
 800189e:	4bab      	ldr	r3, [pc, #684]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	49ab      	ldr	r1, [pc, #684]	; (8001b50 <HAL_RCC_OscConfig+0x2e0>)
 80018a4:	400a      	ands	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	49aa      	ldr	r1, [pc, #680]	; (8001b54 <HAL_RCC_OscConfig+0x2e4>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e03b      	b.n	800192a <HAL_RCC_OscConfig+0xba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b2:	4ba6      	ldr	r3, [pc, #664]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	22c0      	movs	r2, #192	; 0xc0
 80018b8:	0252      	lsls	r2, r2, #9
 80018ba:	4013      	ands	r3, r2
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	0252      	lsls	r2, r2, #9
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d1e7      	bne.n	8001894 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	4ba1      	ldr	r3, [pc, #644]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	039b      	lsls	r3, r3, #14
 80018ca:	d503      	bpl.n	80018d4 <HAL_RCC_OscConfig+0x64>
 80018cc:	6863      	ldr	r3, [r4, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d100      	bne.n	80018d4 <HAL_RCC_OscConfig+0x64>
 80018d2:	e1f1      	b.n	8001cb8 <HAL_RCC_OscConfig+0x448>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	079b      	lsls	r3, r3, #30
 80018d8:	d577      	bpl.n	80019ca <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018da:	4b9c      	ldr	r3, [pc, #624]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	220c      	movs	r2, #12
 80018e0:	421a      	tst	r2, r3
 80018e2:	d062      	beq.n	80019aa <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018e4:	4b99      	ldr	r3, [pc, #612]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	230c      	movs	r3, #12
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d053      	beq.n	8001998 <HAL_RCC_OscConfig+0x128>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f0:	68e3      	ldr	r3, [r4, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d100      	bne.n	80018f8 <HAL_RCC_OscConfig+0x88>
 80018f6:	e08a      	b.n	8001a0e <HAL_RCC_OscConfig+0x19e>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4a94      	ldr	r2, [pc, #592]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	430b      	orrs	r3, r1
 8001900:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7fe fcb7 	bl	8000274 <HAL_GetTick>
 8001906:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	4b90      	ldr	r3, [pc, #576]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	079b      	lsls	r3, r3, #30
 800190e:	d475      	bmi.n	80019fc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001910:	f7fe fcb0 	bl	8000274 <HAL_GetTick>
 8001914:	1b40      	subs	r0, r0, r5
 8001916:	2802      	cmp	r0, #2
 8001918:	d9f6      	bls.n	8001908 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800191a:	2003      	movs	r0, #3
 800191c:	e1d1      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	4a8b      	ldr	r2, [pc, #556]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001920:	6811      	ldr	r1, [r2, #0]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	025b      	lsls	r3, r3, #9
 8001926:	430b      	orrs	r3, r1
 8001928:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800192a:	6863      	ldr	r3, [r4, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d025      	beq.n	800197c <HAL_RCC_OscConfig+0x10c>
        tickstart = HAL_GetTick();
 8001930:	f7fe fca0 	bl	8000274 <HAL_GetTick>
 8001934:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b85      	ldr	r3, [pc, #532]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	039b      	lsls	r3, r3, #14
 800193c:	d4ca      	bmi.n	80018d4 <HAL_RCC_OscConfig+0x64>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193e:	f7fe fc99 	bl	8000274 <HAL_GetTick>
 8001942:	1b40      	subs	r0, r0, r5
 8001944:	2864      	cmp	r0, #100	; 0x64
 8001946:	d9f6      	bls.n	8001936 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001948:	2003      	movs	r0, #3
 800194a:	e1ba      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194c:	2b05      	cmp	r3, #5
 800194e:	d009      	beq.n	8001964 <HAL_RCC_OscConfig+0xf4>
 8001950:	4b7e      	ldr	r3, [pc, #504]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	497e      	ldr	r1, [pc, #504]	; (8001b50 <HAL_RCC_OscConfig+0x2e0>)
 8001956:	400a      	ands	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	497d      	ldr	r1, [pc, #500]	; (8001b54 <HAL_RCC_OscConfig+0x2e4>)
 800195e:	400a      	ands	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e7e2      	b.n	800192a <HAL_RCC_OscConfig+0xba>
 8001964:	4b79      	ldr	r3, [pc, #484]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001966:	6819      	ldr	r1, [r3, #0]
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	02d2      	lsls	r2, r2, #11
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	2280      	movs	r2, #128	; 0x80
 8001974:	0252      	lsls	r2, r2, #9
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e7d6      	b.n	800192a <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 800197c:	f7fe fc7a 	bl	8000274 <HAL_GetTick>
 8001980:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b72      	ldr	r3, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	039b      	lsls	r3, r3, #14
 8001988:	d5a4      	bpl.n	80018d4 <HAL_RCC_OscConfig+0x64>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198a:	f7fe fc73 	bl	8000274 <HAL_GetTick>
 800198e:	1b40      	subs	r0, r0, r5
 8001990:	2864      	cmp	r0, #100	; 0x64
 8001992:	d9f6      	bls.n	8001982 <HAL_RCC_OscConfig+0x112>
            return HAL_TIMEOUT;
 8001994:	2003      	movs	r0, #3
 8001996:	e194      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001998:	4b6c      	ldr	r3, [pc, #432]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	22c0      	movs	r2, #192	; 0xc0
 800199e:	0252      	lsls	r2, r2, #9
 80019a0:	4013      	ands	r3, r2
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	0212      	lsls	r2, r2, #8
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d1a2      	bne.n	80018f0 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	4b68      	ldr	r3, [pc, #416]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	079b      	lsls	r3, r3, #30
 80019b0:	d503      	bpl.n	80019ba <HAL_RCC_OscConfig+0x14a>
 80019b2:	68e3      	ldr	r3, [r4, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d000      	beq.n	80019ba <HAL_RCC_OscConfig+0x14a>
 80019b8:	e180      	b.n	8001cbc <HAL_RCC_OscConfig+0x44c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4964      	ldr	r1, [pc, #400]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80019bc:	680b      	ldr	r3, [r1, #0]
 80019be:	22f8      	movs	r2, #248	; 0xf8
 80019c0:	4393      	bics	r3, r2
 80019c2:	6922      	ldr	r2, [r4, #16]
 80019c4:	00d2      	lsls	r2, r2, #3
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	071b      	lsls	r3, r3, #28
 80019ce:	d544      	bpl.n	8001a5a <HAL_RCC_OscConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d0:	69e3      	ldr	r3, [r4, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d02e      	beq.n	8001a34 <HAL_RCC_OscConfig+0x1c4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4a5d      	ldr	r2, [pc, #372]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80019d8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019da:	2101      	movs	r1, #1
 80019dc:	430b      	orrs	r3, r1
 80019de:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e0:	f7fe fc48 	bl	8000274 <HAL_GetTick>
 80019e4:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	079b      	lsls	r3, r3, #30
 80019ec:	d435      	bmi.n	8001a5a <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ee:	f7fe fc41 	bl	8000274 <HAL_GetTick>
 80019f2:	1b40      	subs	r0, r0, r5
 80019f4:	2802      	cmp	r0, #2
 80019f6:	d9f6      	bls.n	80019e6 <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80019f8:	2003      	movs	r0, #3
 80019fa:	e162      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4953      	ldr	r1, [pc, #332]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 80019fe:	680b      	ldr	r3, [r1, #0]
 8001a00:	22f8      	movs	r2, #248	; 0xf8
 8001a02:	4393      	bics	r3, r2
 8001a04:	6922      	ldr	r2, [r4, #16]
 8001a06:	00d2      	lsls	r2, r2, #3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]
 8001a0c:	e7dd      	b.n	80019ca <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8001a0e:	4a4f      	ldr	r2, [pc, #316]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001a10:	6813      	ldr	r3, [r2, #0]
 8001a12:	2101      	movs	r1, #1
 8001a14:	438b      	bics	r3, r1
 8001a16:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001a18:	f7fe fc2c 	bl	8000274 <HAL_GetTick>
 8001a1c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	079b      	lsls	r3, r3, #30
 8001a24:	d5d1      	bpl.n	80019ca <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a26:	f7fe fc25 	bl	8000274 <HAL_GetTick>
 8001a2a:	1b40      	subs	r0, r0, r5
 8001a2c:	2802      	cmp	r0, #2
 8001a2e:	d9f6      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8001a30:	2003      	movs	r0, #3
 8001a32:	e146      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	4a45      	ldr	r2, [pc, #276]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001a36:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a38:	2101      	movs	r1, #1
 8001a3a:	438b      	bics	r3, r1
 8001a3c:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3e:	f7fe fc19 	bl	8000274 <HAL_GetTick>
 8001a42:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	079b      	lsls	r3, r3, #30
 8001a4a:	d506      	bpl.n	8001a5a <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7fe fc12 	bl	8000274 <HAL_GetTick>
 8001a50:	1b40      	subs	r0, r0, r5
 8001a52:	2802      	cmp	r0, #2
 8001a54:	d9f6      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 8001a56:	2003      	movs	r0, #3
 8001a58:	e133      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	075b      	lsls	r3, r3, #29
 8001a5e:	d400      	bmi.n	8001a62 <HAL_RCC_OscConfig+0x1f2>
 8001a60:	e080      	b.n	8001b64 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	d40b      	bmi.n	8001a82 <HAL_RCC_OscConfig+0x212>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4a38      	ldr	r2, [pc, #224]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001a6c:	69d1      	ldr	r1, [r2, #28]
 8001a6e:	2080      	movs	r0, #128	; 0x80
 8001a70:	0540      	lsls	r0, r0, #21
 8001a72:	4301      	orrs	r1, r0
 8001a74:	61d1      	str	r1, [r2, #28]
 8001a76:	69d3      	ldr	r3, [r2, #28]
 8001a78:	4003      	ands	r3, r0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a7e:	2501      	movs	r5, #1
 8001a80:	e000      	b.n	8001a84 <HAL_RCC_OscConfig+0x214>
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_RCC_OscConfig+0x2e8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	05db      	lsls	r3, r3, #23
 8001a8a:	d50e      	bpl.n	8001aaa <HAL_RCC_OscConfig+0x23a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8c:	68a3      	ldr	r3, [r4, #8]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d01f      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x262>
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d134      	bne.n	8001b00 <HAL_RCC_OscConfig+0x290>
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	438a      	bics	r2, r1
 8001a9e:	621a      	str	r2, [r3, #32]
 8001aa0:	6a1a      	ldr	r2, [r3, #32]
 8001aa2:	3103      	adds	r1, #3
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	621a      	str	r2, [r3, #32]
 8001aa8:	e018      	b.n	8001adc <HAL_RCC_OscConfig+0x26c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aaa:	4a2b      	ldr	r2, [pc, #172]	; (8001b58 <HAL_RCC_OscConfig+0x2e8>)
 8001aac:	6811      	ldr	r1, [r2, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ab6:	f7fe fbdd 	bl	8000274 <HAL_GetTick>
 8001aba:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_RCC_OscConfig+0x2e8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	05db      	lsls	r3, r3, #23
 8001ac2:	d4e3      	bmi.n	8001a8c <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac4:	f7fe fbd6 	bl	8000274 <HAL_GetTick>
 8001ac8:	1b80      	subs	r0, r0, r6
 8001aca:	2864      	cmp	r0, #100	; 0x64
 8001acc:	d9f6      	bls.n	8001abc <HAL_RCC_OscConfig+0x24c>
          return HAL_TIMEOUT;
 8001ace:	2003      	movs	r0, #3
 8001ad0:	e0f7      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001ad4:	6a13      	ldr	r3, [r2, #32]
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001adc:	68a3      	ldr	r3, [r4, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d024      	beq.n	8001b2c <HAL_RCC_OscConfig+0x2bc>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7fe fbc7 	bl	8000274 <HAL_GetTick>
 8001ae6:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	079b      	lsls	r3, r3, #30
 8001aee:	d437      	bmi.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af0:	f7fe fbc0 	bl	8000274 <HAL_GetTick>
 8001af4:	1b80      	subs	r0, r0, r6
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_RCC_OscConfig+0x2ec>)
 8001af8:	4298      	cmp	r0, r3
 8001afa:	d9f5      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001afc:	2003      	movs	r0, #3
 8001afe:	e0e0      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d009      	beq.n	8001b18 <HAL_RCC_OscConfig+0x2a8>
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001b06:	6a1a      	ldr	r2, [r3, #32]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	438a      	bics	r2, r1
 8001b0c:	621a      	str	r2, [r3, #32]
 8001b0e:	6a1a      	ldr	r2, [r3, #32]
 8001b10:	3103      	adds	r1, #3
 8001b12:	438a      	bics	r2, r1
 8001b14:	621a      	str	r2, [r3, #32]
 8001b16:	e7e1      	b.n	8001adc <HAL_RCC_OscConfig+0x26c>
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001b1a:	6a1a      	ldr	r2, [r3, #32]
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	621a      	str	r2, [r3, #32]
 8001b22:	6a1a      	ldr	r2, [r3, #32]
 8001b24:	3903      	subs	r1, #3
 8001b26:	430a      	orrs	r2, r1
 8001b28:	621a      	str	r2, [r3, #32]
 8001b2a:	e7d7      	b.n	8001adc <HAL_RCC_OscConfig+0x26c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7fe fba2 	bl	8000274 <HAL_GetTick>
 8001b30:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_OscConfig+0x2dc>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	079b      	lsls	r3, r3, #30
 8001b38:	d512      	bpl.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7fe fb9b 	bl	8000274 <HAL_GetTick>
 8001b3e:	1b80      	subs	r0, r0, r6
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_RCC_OscConfig+0x2ec>)
 8001b42:	4298      	cmp	r0, r3
 8001b44:	d9f5      	bls.n	8001b32 <HAL_RCC_OscConfig+0x2c2>
        {
          return HAL_TIMEOUT;
 8001b46:	2003      	movs	r0, #3
 8001b48:	e0bb      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	fffeffff 	.word	0xfffeffff
 8001b54:	fffbffff 	.word	0xfffbffff
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b60:	2d01      	cmp	r5, #1
 8001b62:	d033      	beq.n	8001bcc <HAL_RCC_OscConfig+0x35c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	06db      	lsls	r3, r3, #27
 8001b68:	d510      	bpl.n	8001b8c <HAL_RCC_OscConfig+0x31c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b6a:	6963      	ldr	r3, [r4, #20]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d033      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x368>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b70:	3305      	adds	r3, #5
 8001b72:	d151      	bne.n	8001c18 <HAL_RCC_OscConfig+0x3a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b74:	4a55      	ldr	r2, [pc, #340]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001b76:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001b78:	2104      	movs	r1, #4
 8001b7a:	438b      	bics	r3, r1
 8001b7c:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b7e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001b80:	31f4      	adds	r1, #244	; 0xf4
 8001b82:	438b      	bics	r3, r1
 8001b84:	69a1      	ldr	r1, [r4, #24]
 8001b86:	00c9      	lsls	r1, r1, #3
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8c:	6a23      	ldr	r3, [r4, #32]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d100      	bne.n	8001b94 <HAL_RCC_OscConfig+0x324>
 8001b92:	e095      	b.n	8001cc0 <HAL_RCC_OscConfig+0x450>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b94:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001b96:	6851      	ldr	r1, [r2, #4]
 8001b98:	220c      	movs	r2, #12
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	2a08      	cmp	r2, #8
 8001b9e:	d100      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x332>
 8001ba0:	e091      	b.n	8001cc6 <HAL_RCC_OscConfig+0x456>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d04f      	beq.n	8001c46 <HAL_RCC_OscConfig+0x3d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001ba8:	6813      	ldr	r3, [r2, #0]
 8001baa:	4949      	ldr	r1, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x460>)
 8001bac:	400b      	ands	r3, r1
 8001bae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7fe fb60 	bl	8000274 <HAL_GetTick>
 8001bb4:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb6:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	019b      	lsls	r3, r3, #6
 8001bbc:	d57a      	bpl.n	8001cb4 <HAL_RCC_OscConfig+0x444>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7fe fb59 	bl	8000274 <HAL_GetTick>
 8001bc2:	1b00      	subs	r0, r0, r4
 8001bc4:	2802      	cmp	r0, #2
 8001bc6:	d9f6      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x346>
          {
            return HAL_TIMEOUT;
 8001bc8:	2003      	movs	r0, #3
 8001bca:	e07a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bcc:	4a3f      	ldr	r2, [pc, #252]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001bce:	69d3      	ldr	r3, [r2, #28]
 8001bd0:	4940      	ldr	r1, [pc, #256]	; (8001cd4 <HAL_RCC_OscConfig+0x464>)
 8001bd2:	400b      	ands	r3, r1
 8001bd4:	61d3      	str	r3, [r2, #28]
 8001bd6:	e7c5      	b.n	8001b64 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bd8:	4b3c      	ldr	r3, [pc, #240]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bdc:	2104      	movs	r1, #4
 8001bde:	430a      	orrs	r2, r1
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be4:	3903      	subs	r1, #3
 8001be6:	430a      	orrs	r2, r1
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001bea:	f7fe fb43 	bl	8000274 <HAL_GetTick>
 8001bee:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf4:	079b      	lsls	r3, r3, #30
 8001bf6:	d406      	bmi.n	8001c06 <HAL_RCC_OscConfig+0x396>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bf8:	f7fe fb3c 	bl	8000274 <HAL_GetTick>
 8001bfc:	1b40      	subs	r0, r0, r5
 8001bfe:	2802      	cmp	r0, #2
 8001c00:	d9f6      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x380>
          return HAL_TIMEOUT;
 8001c02:	2003      	movs	r0, #3
 8001c04:	e05d      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c06:	4931      	ldr	r1, [pc, #196]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001c08:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001c0a:	22f8      	movs	r2, #248	; 0xf8
 8001c0c:	4393      	bics	r3, r2
 8001c0e:	69a2      	ldr	r2, [r4, #24]
 8001c10:	00d2      	lsls	r2, r2, #3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	634b      	str	r3, [r1, #52]	; 0x34
 8001c16:	e7b9      	b.n	8001b8c <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c18:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c24:	3903      	subs	r1, #3
 8001c26:	438a      	bics	r2, r1
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001c2a:	f7fe fb23 	bl	8000274 <HAL_GetTick>
 8001c2e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c30:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	079b      	lsls	r3, r3, #30
 8001c36:	d5a9      	bpl.n	8001b8c <HAL_RCC_OscConfig+0x31c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c38:	f7fe fb1c 	bl	8000274 <HAL_GetTick>
 8001c3c:	1b40      	subs	r0, r0, r5
 8001c3e:	2802      	cmp	r0, #2
 8001c40:	d9f6      	bls.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
          return HAL_TIMEOUT;
 8001c42:	2003      	movs	r0, #3
 8001c44:	e03d      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001c48:	6813      	ldr	r3, [r2, #0]
 8001c4a:	4921      	ldr	r1, [pc, #132]	; (8001cd0 <HAL_RCC_OscConfig+0x460>)
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001c50:	f7fe fb10 	bl	8000274 <HAL_GetTick>
 8001c54:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	019b      	lsls	r3, r3, #6
 8001c5c:	d506      	bpl.n	8001c6c <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe fb09 	bl	8000274 <HAL_GetTick>
 8001c62:	1b40      	subs	r0, r0, r5
 8001c64:	2802      	cmp	r0, #2
 8001c66:	d9f6      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3e6>
            return HAL_TIMEOUT;
 8001c68:	2003      	movs	r0, #3
 8001c6a:	e02a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c70:	210f      	movs	r1, #15
 8001c72:	438a      	bics	r2, r1
 8001c74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c76:	430a      	orrs	r2, r1
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4916      	ldr	r1, [pc, #88]	; (8001cd8 <HAL_RCC_OscConfig+0x468>)
 8001c7e:	400a      	ands	r2, r1
 8001c80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c84:	4301      	orrs	r1, r0
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	0452      	lsls	r2, r2, #17
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c94:	f7fe faee 	bl	8000274 <HAL_GetTick>
 8001c98:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_RCC_OscConfig+0x45c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	019b      	lsls	r3, r3, #6
 8001ca0:	d406      	bmi.n	8001cb0 <HAL_RCC_OscConfig+0x440>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7fe fae7 	bl	8000274 <HAL_GetTick>
 8001ca6:	1b00      	subs	r0, r0, r4
 8001ca8:	2802      	cmp	r0, #2
 8001caa:	d9f6      	bls.n	8001c9a <HAL_RCC_OscConfig+0x42a>
            return HAL_TIMEOUT;
 8001cac:	2003      	movs	r0, #3
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	e006      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	e004      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
        return HAL_ERROR;
 8001cb8:	2001      	movs	r0, #1
 8001cba:	e002      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
        return HAL_ERROR;
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
  return HAL_OK;
 8001cc0:	2000      	movs	r0, #0
}
 8001cc2:	b002      	add	sp, #8
 8001cc4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	e7fb      	b.n	8001cc2 <HAL_RCC_OscConfig+0x452>
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	feffffff 	.word	0xfeffffff
 8001cd4:	efffffff 	.word	0xefffffff
 8001cd8:	ffc27fff 	.word	0xffc27fff

08001cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ce0:	aa04      	add	r2, sp, #16
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x64>)
 8001ce4:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001ce6:	c213      	stmia	r2!, {r0, r1, r4}
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cec:	466a      	mov	r2, sp
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x68>)
 8001cf0:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001cf2:	c213      	stmia	r2!, {r0, r1, r4}
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001cfa:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d002      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x2e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d04:	4811      	ldr	r0, [pc, #68]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d06:	b008      	add	sp, #32
 8001d08:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d0a:	0c91      	lsrs	r1, r2, #18
 8001d0c:	3307      	adds	r3, #7
 8001d0e:	4019      	ands	r1, r3
 8001d10:	a804      	add	r0, sp, #16
 8001d12:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001d16:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001d18:	400b      	ands	r3, r1
 8001d1a:	4669      	mov	r1, sp
 8001d1c:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	025b      	lsls	r3, r3, #9
 8001d22:	401a      	ands	r2, r3
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	025b      	lsls	r3, r3, #9
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d004      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x5a>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001d2c:	4807      	ldr	r0, [pc, #28]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x70>)
 8001d2e:	f7fe f9eb 	bl	8000108 <__udivsi3>
 8001d32:	4360      	muls	r0, r4
 8001d34:	e7e7      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x2a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x70>)
 8001d38:	f7fe f9e6 	bl	8000108 <__udivsi3>
 8001d3c:	4360      	muls	r0, r4
 8001d3e:	e7e2      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x2a>
 8001d40:	08003728 	.word	0x08003728
 8001d44:	0800373c 	.word	0x0800373c
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	007a1200 	.word	0x007a1200

08001d50 <HAL_RCC_ClockConfig>:
{
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	0004      	movs	r4, r0
 8001d54:	000d      	movs	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d56:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <HAL_RCC_ClockConfig+0x140>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	428b      	cmp	r3, r1
 8001d60:	d20a      	bcs.n	8001d78 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	494b      	ldr	r1, [pc, #300]	; (8001e90 <HAL_RCC_ClockConfig+0x140>)
 8001d64:	680b      	ldr	r3, [r1, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4393      	bics	r3, r2
 8001d6a:	432b      	orrs	r3, r5
 8001d6c:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d6e:	680b      	ldr	r3, [r1, #0]
 8001d70:	401a      	ands	r2, r3
 8001d72:	42aa      	cmp	r2, r5
 8001d74:	d000      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x28>
 8001d76:	e084      	b.n	8001e82 <HAL_RCC_ClockConfig+0x132>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	079b      	lsls	r3, r3, #30
 8001d7c:	d506      	bpl.n	8001d8c <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7e:	4a45      	ldr	r2, [pc, #276]	; (8001e94 <HAL_RCC_ClockConfig+0x144>)
 8001d80:	6853      	ldr	r3, [r2, #4]
 8001d82:	21f0      	movs	r1, #240	; 0xf0
 8001d84:	438b      	bics	r3, r1
 8001d86:	68a1      	ldr	r1, [r4, #8]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	07db      	lsls	r3, r3, #31
 8001d90:	d54c      	bpl.n	8001e2c <HAL_RCC_ClockConfig+0xdc>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	6863      	ldr	r3, [r4, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d021      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x8c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d025      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	4a3d      	ldr	r2, [pc, #244]	; (8001e94 <HAL_RCC_ClockConfig+0x144>)
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	0792      	lsls	r2, r2, #30
 8001da2:	d400      	bmi.n	8001da6 <HAL_RCC_ClockConfig+0x56>
 8001da4:	e06f      	b.n	8001e86 <HAL_RCC_ClockConfig+0x136>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	493b      	ldr	r1, [pc, #236]	; (8001e94 <HAL_RCC_ClockConfig+0x144>)
 8001da8:	684a      	ldr	r2, [r1, #4]
 8001daa:	2003      	movs	r0, #3
 8001dac:	4382      	bics	r2, r0
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001db2:	f7fe fa5f 	bl	8000274 <HAL_GetTick>
 8001db6:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db8:	6863      	ldr	r3, [r4, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d01a      	beq.n	8001df4 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d026      	beq.n	8001e10 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc2:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <HAL_RCC_ClockConfig+0x144>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	421a      	tst	r2, r3
 8001dca:	d02f      	beq.n	8001e2c <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dcc:	f7fe fa52 	bl	8000274 <HAL_GetTick>
 8001dd0:	1b80      	subs	r0, r0, r6
 8001dd2:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <HAL_RCC_ClockConfig+0x148>)
 8001dd4:	4290      	cmp	r0, r2
 8001dd6:	d9f4      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x72>
          return HAL_TIMEOUT;
 8001dd8:	2003      	movs	r0, #3
 8001dda:	e051      	b.n	8001e80 <HAL_RCC_ClockConfig+0x130>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ddc:	4a2d      	ldr	r2, [pc, #180]	; (8001e94 <HAL_RCC_ClockConfig+0x144>)
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	0392      	lsls	r2, r2, #14
 8001de2:	d4e0      	bmi.n	8001da6 <HAL_RCC_ClockConfig+0x56>
        return HAL_ERROR;
 8001de4:	2001      	movs	r0, #1
 8001de6:	e04b      	b.n	8001e80 <HAL_RCC_ClockConfig+0x130>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de8:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <HAL_RCC_ClockConfig+0x144>)
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	0192      	lsls	r2, r2, #6
 8001dee:	d4da      	bmi.n	8001da6 <HAL_RCC_ClockConfig+0x56>
        return HAL_ERROR;
 8001df0:	2001      	movs	r0, #1
 8001df2:	e045      	b.n	8001e80 <HAL_RCC_ClockConfig+0x130>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <HAL_RCC_ClockConfig+0x144>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	230c      	movs	r3, #12
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d015      	beq.n	8001e2c <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7fe fa38 	bl	8000274 <HAL_GetTick>
 8001e04:	1b80      	subs	r0, r0, r6
 8001e06:	4a24      	ldr	r2, [pc, #144]	; (8001e98 <HAL_RCC_ClockConfig+0x148>)
 8001e08:	4290      	cmp	r0, r2
 8001e0a:	d9f3      	bls.n	8001df4 <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	e037      	b.n	8001e80 <HAL_RCC_ClockConfig+0x130>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e10:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <HAL_RCC_ClockConfig+0x144>)
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	230c      	movs	r3, #12
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d007      	beq.n	8001e2c <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7fe fa2a 	bl	8000274 <HAL_GetTick>
 8001e20:	1b80      	subs	r0, r0, r6
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_ClockConfig+0x148>)
 8001e24:	4298      	cmp	r0, r3
 8001e26:	d9f3      	bls.n	8001e10 <HAL_RCC_ClockConfig+0xc0>
          return HAL_TIMEOUT;
 8001e28:	2003      	movs	r0, #3
 8001e2a:	e029      	b.n	8001e80 <HAL_RCC_ClockConfig+0x130>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_RCC_ClockConfig+0x140>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2301      	movs	r3, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	42ab      	cmp	r3, r5
 8001e36:	d909      	bls.n	8001e4c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e38:	4915      	ldr	r1, [pc, #84]	; (8001e90 <HAL_RCC_ClockConfig+0x140>)
 8001e3a:	680b      	ldr	r3, [r1, #0]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4393      	bics	r3, r2
 8001e40:	432b      	orrs	r3, r5
 8001e42:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e44:	680b      	ldr	r3, [r1, #0]
 8001e46:	401a      	ands	r2, r3
 8001e48:	42aa      	cmp	r2, r5
 8001e4a:	d11e      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	075b      	lsls	r3, r3, #29
 8001e50:	d506      	bpl.n	8001e60 <HAL_RCC_ClockConfig+0x110>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_RCC_ClockConfig+0x144>)
 8001e54:	6853      	ldr	r3, [r2, #4]
 8001e56:	4911      	ldr	r1, [pc, #68]	; (8001e9c <HAL_RCC_ClockConfig+0x14c>)
 8001e58:	400b      	ands	r3, r1
 8001e5a:	68e1      	ldr	r1, [r4, #12]
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e60:	f7ff ff3c 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_ClockConfig+0x144>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	0912      	lsrs	r2, r2, #4
 8001e6a:	230f      	movs	r3, #15
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_RCC_ClockConfig+0x150>)
 8001e70:	5cd3      	ldrb	r3, [r2, r3]
 8001e72:	40d8      	lsrs	r0, r3
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_ClockConfig+0x154>)
 8001e76:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7fe f9d1 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 8001e7e:	2000      	movs	r0, #0
}
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001e82:	2001      	movs	r0, #1
 8001e84:	e7fc      	b.n	8001e80 <HAL_RCC_ClockConfig+0x130>
        return HAL_ERROR;
 8001e86:	2001      	movs	r0, #1
 8001e88:	e7fa      	b.n	8001e80 <HAL_RCC_ClockConfig+0x130>
      return HAL_ERROR;
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e7f8      	b.n	8001e80 <HAL_RCC_ClockConfig+0x130>
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40022000 	.word	0x40022000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	00001388 	.word	0x00001388
 8001e9c:	fffff8ff 	.word	0xfffff8ff
 8001ea0:	08003710 	.word	0x08003710
 8001ea4:	200001b0 	.word	0x200001b0

08001ea8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001ea8:	4b01      	ldr	r3, [pc, #4]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
}
 8001eac:	4770      	bx	lr
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	200001b0 	.word	0x200001b0

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001eb6:	f7ff fff7 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	0a12      	lsrs	r2, r2, #8
 8001ec0:	2307      	movs	r3, #7
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	4a02      	ldr	r2, [pc, #8]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	40d8      	lsrs	r0, r3
}    
 8001eca:	bd10      	pop	{r4, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08003720 	.word	0x08003720

08001ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eda:	6803      	ldr	r3, [r0, #0]
 8001edc:	03db      	lsls	r3, r3, #15
 8001ede:	d537      	bpl.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee0:	4b42      	ldr	r3, [pc, #264]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	d453      	bmi.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	4a40      	ldr	r2, [pc, #256]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001eea:	69d1      	ldr	r1, [r2, #28]
 8001eec:	2080      	movs	r0, #128	; 0x80
 8001eee:	0540      	lsls	r0, r0, #21
 8001ef0:	4301      	orrs	r1, r0
 8001ef2:	61d1      	str	r1, [r2, #28]
 8001ef4:	69d3      	ldr	r3, [r2, #28]
 8001ef6:	4003      	ands	r3, r0
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001efc:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b3c      	ldr	r3, [pc, #240]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	d546      	bpl.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f06:	4b39      	ldr	r3, [pc, #228]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f08:	6a1a      	ldr	r2, [r3, #32]
 8001f0a:	23c0      	movs	r3, #192	; 0xc0
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	0011      	movs	r1, r2
 8001f10:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f12:	421a      	tst	r2, r3
 8001f14:	d013      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001f16:	6862      	ldr	r2, [r4, #4]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	428b      	cmp	r3, r1
 8001f1c:	d00f      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f20:	6a18      	ldr	r0, [r3, #32]
 8001f22:	4a34      	ldr	r2, [pc, #208]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001f24:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f26:	6a1e      	ldr	r6, [r3, #32]
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	0249      	lsls	r1, r1, #9
 8001f2c:	4331      	orrs	r1, r6
 8001f2e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f30:	6a19      	ldr	r1, [r3, #32]
 8001f32:	4e31      	ldr	r6, [pc, #196]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001f34:	4031      	ands	r1, r6
 8001f36:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f38:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f3a:	07c3      	lsls	r3, r0, #31
 8001f3c:	d43e      	bmi.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f3e:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f40:	6a13      	ldr	r3, [r2, #32]
 8001f42:	492c      	ldr	r1, [pc, #176]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001f44:	400b      	ands	r3, r1
 8001f46:	6861      	ldr	r1, [r4, #4]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f4c:	2d01      	cmp	r5, #1
 8001f4e:	d044      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	07db      	lsls	r3, r3, #31
 8001f54:	d506      	bpl.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f56:	4a25      	ldr	r2, [pc, #148]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f5a:	2103      	movs	r1, #3
 8001f5c:	438b      	bics	r3, r1
 8001f5e:	68a1      	ldr	r1, [r4, #8]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	069b      	lsls	r3, r3, #26
 8001f68:	d506      	bpl.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f6a:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f6e:	2110      	movs	r1, #16
 8001f70:	438b      	bics	r3, r1
 8001f72:	68e1      	ldr	r1, [r4, #12]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	039b      	lsls	r3, r3, #14
 8001f7c:	d532      	bpl.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f7e:	4a1b      	ldr	r2, [pc, #108]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001f80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	438b      	bics	r3, r1
 8001f86:	6921      	ldr	r1, [r4, #16]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	e02a      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    FlagStatus       pwrclkchanged = RESET;
 8001f90:	2500      	movs	r5, #0
 8001f92:	e7b4      	b.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f94:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001f96:	6811      	ldr	r1, [r2, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001fa0:	f7fe f968 	bl	8000274 <HAL_GetTick>
 8001fa4:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	05db      	lsls	r3, r3, #23
 8001fac:	d4ab      	bmi.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7fe f961 	bl	8000274 <HAL_GetTick>
 8001fb2:	1b80      	subs	r0, r0, r6
 8001fb4:	2864      	cmp	r0, #100	; 0x64
 8001fb6:	d9f6      	bls.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          return HAL_TIMEOUT;
 8001fb8:	2003      	movs	r0, #3
 8001fba:	e014      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x112>
        tickstart = HAL_GetTick();
 8001fbc:	f7fe f95a 	bl	8000274 <HAL_GetTick>
 8001fc0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	079b      	lsls	r3, r3, #30
 8001fc8:	d4b9      	bmi.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7fe f953 	bl	8000274 <HAL_GetTick>
 8001fce:	1b80      	subs	r0, r0, r6
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001fd2:	4298      	cmp	r0, r3
 8001fd4:	d9f5      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xee>
            return HAL_TIMEOUT;
 8001fd6:	2003      	movs	r0, #3
 8001fd8:	e005      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	69d3      	ldr	r3, [r2, #28]
 8001fdc:	4908      	ldr	r1, [pc, #32]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001fde:	400b      	ands	r3, r1
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	e7b5      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8001fe4:	2000      	movs	r0, #0
}
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	fffffcff 	.word	0xfffffcff
 8001ff8:	fffeffff 	.word	0xfffeffff
 8001ffc:	00001388 	.word	0x00001388
 8002000:	efffffff 	.word	0xefffffff

08002004 <USART_CheckIdleState>:
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002004:	2300      	movs	r3, #0
 8002006:	6443      	str	r3, [r0, #68]	; 0x44
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the USART state*/
  husart->State= HAL_USART_STATE_READY;
 8002008:	2241      	movs	r2, #65	; 0x41
 800200a:	2101      	movs	r1, #1
 800200c:	5481      	strb	r1, [r0, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800200e:	3a01      	subs	r2, #1
 8002010:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
}
 8002012:	2000      	movs	r0, #0
 8002014:	4770      	bx	lr
	...

08002018 <USART_SetConfig>:
{
 8002018:	b510      	push	{r4, lr}
 800201a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800201c:	6883      	ldr	r3, [r0, #8]
 800201e:	6902      	ldr	r2, [r0, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	6942      	ldr	r2, [r0, #20]
 8002024:	4313      	orrs	r3, r2
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	0212      	lsls	r2, r2, #8
 800202a:	431a      	orrs	r2, r3
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800202c:	6801      	ldr	r1, [r0, #0]
 800202e:	680b      	ldr	r3, [r1, #0]
 8002030:	4837      	ldr	r0, [pc, #220]	; (8002110 <USART_SetConfig+0xf8>)
 8002032:	4003      	ands	r3, r0
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8002038:	69a3      	ldr	r3, [r4, #24]
 800203a:	69e2      	ldr	r2, [r4, #28]
 800203c:	4313      	orrs	r3, r2
 800203e:	2280      	movs	r2, #128	; 0x80
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	431a      	orrs	r2, r3
  tmpreg |= ((uint32_t)husart->Init.CLKLastBit | (uint32_t)husart->Init.StopBits);
 8002044:	6a23      	ldr	r3, [r4, #32]
 8002046:	68e1      	ldr	r1, [r4, #12]
 8002048:	430b      	orrs	r3, r1
 800204a:	431a      	orrs	r2, r3
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800204c:	6821      	ldr	r1, [r4, #0]
 800204e:	684b      	ldr	r3, [r1, #4]
 8002050:	4830      	ldr	r0, [pc, #192]	; (8002114 <USART_SetConfig+0xfc>)
 8002052:	4003      	ands	r3, r0
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <USART_SetConfig+0x100>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00b      	beq.n	8002078 <USART_SetConfig+0x60>
 8002060:	4a2e      	ldr	r2, [pc, #184]	; (800211c <USART_SetConfig+0x104>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d03b      	beq.n	80020de <USART_SetConfig+0xc6>
 8002066:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <USART_SetConfig+0x108>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d038      	beq.n	80020de <USART_SetConfig+0xc6>
 800206c:	4a2d      	ldr	r2, [pc, #180]	; (8002124 <USART_SetConfig+0x10c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d035      	beq.n	80020de <USART_SetConfig+0xc6>
  uint16_t usartdiv                    = 0x0000U;  
 8002072:	2300      	movs	r3, #0
      ret = HAL_ERROR;
 8002074:	2001      	movs	r0, #1
 8002076:	e03d      	b.n	80020f4 <USART_SetConfig+0xdc>
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <USART_SetConfig+0x110>)
 800207a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800207c:	2303      	movs	r3, #3
 800207e:	4013      	ands	r3, r2
 8002080:	2b02      	cmp	r3, #2
 8002082:	d020      	beq.n	80020c6 <USART_SetConfig+0xae>
 8002084:	d812      	bhi.n	80020ac <USART_SetConfig+0x94>
 8002086:	2b00      	cmp	r3, #0
 8002088:	d029      	beq.n	80020de <USART_SetConfig+0xc6>
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10b      	bne.n	80020a6 <USART_SetConfig+0x8e>
      usartdiv = (uint16_t)(((2*HAL_RCC_GetSysClockFreq()) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 800208e:	f7ff fe25 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8002092:	0040      	lsls	r0, r0, #1
 8002094:	6863      	ldr	r3, [r4, #4]
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	18c0      	adds	r0, r0, r3
 800209a:	6861      	ldr	r1, [r4, #4]
 800209c:	f7fe f834 	bl	8000108 <__udivsi3>
 80020a0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret                = HAL_OK;
 80020a2:	2000      	movs	r0, #0
      break;
 80020a4:	e026      	b.n	80020f4 <USART_SetConfig+0xdc>
  USART_GETCLOCKSOURCE(husart, clocksource);
 80020a6:	2300      	movs	r3, #0
 80020a8:	2001      	movs	r0, #1
 80020aa:	e023      	b.n	80020f4 <USART_SetConfig+0xdc>
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d12b      	bne.n	8002108 <USART_SetConfig+0xf0>
      usartdiv = (uint16_t)(((2*HSI_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 80020b0:	6863      	ldr	r3, [r4, #4]
 80020b2:	0858      	lsrs	r0, r3, #1
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <USART_SetConfig+0x114>)
 80020b6:	469c      	mov	ip, r3
 80020b8:	4460      	add	r0, ip
 80020ba:	6861      	ldr	r1, [r4, #4]
 80020bc:	f7fe f824 	bl	8000108 <__udivsi3>
 80020c0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret                = HAL_OK;
 80020c2:	2000      	movs	r0, #0
      break;
 80020c4:	e016      	b.n	80020f4 <USART_SetConfig+0xdc>
      usartdiv = (uint16_t)(((2*LSE_VALUE) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 80020c6:	6863      	ldr	r3, [r4, #4]
 80020c8:	0858      	lsrs	r0, r3, #1
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	025b      	lsls	r3, r3, #9
 80020ce:	469c      	mov	ip, r3
 80020d0:	4460      	add	r0, ip
 80020d2:	6861      	ldr	r1, [r4, #4]
 80020d4:	f7fe f818 	bl	8000108 <__udivsi3>
 80020d8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret                = HAL_OK;
 80020da:	2000      	movs	r0, #0
      break;
 80020dc:	e00a      	b.n	80020f4 <USART_SetConfig+0xdc>
      usartdiv = (uint16_t)(((2*HAL_RCC_GetPCLK1Freq()) + (husart->Init.BaudRate/2)) / husart->Init.BaudRate);
 80020de:	f7ff fee9 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 80020e2:	0040      	lsls	r0, r0, #1
 80020e4:	6863      	ldr	r3, [r4, #4]
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	18c0      	adds	r0, r0, r3
 80020ea:	6861      	ldr	r1, [r4, #4]
 80020ec:	f7fe f80c 	bl	8000108 <__udivsi3>
 80020f0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret                = HAL_OK;
 80020f2:	2000      	movs	r0, #0
  brrtemp = usartdiv & 0xFFF0U;
 80020f4:	220f      	movs	r2, #15
 80020f6:	0019      	movs	r1, r3
 80020f8:	4391      	bics	r1, r2
  brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020fa:	105b      	asrs	r3, r3, #1
 80020fc:	3a08      	subs	r2, #8
 80020fe:	4013      	ands	r3, r2
 8002100:	430b      	orrs	r3, r1
  husart->Instance->BRR = brrtemp;
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	60d3      	str	r3, [r2, #12]
}
 8002106:	bd10      	pop	{r4, pc}
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002108:	2300      	movs	r3, #0
 800210a:	2001      	movs	r0, #1
 800210c:	e7f2      	b.n	80020f4 <USART_SetConfig+0xdc>
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	efff69f3 	.word	0xefff69f3
 8002114:	ffffc0ff 	.word	0xffffc0ff
 8002118:	40013800 	.word	0x40013800
 800211c:	40004400 	.word	0x40004400
 8002120:	40004800 	.word	0x40004800
 8002124:	40004c00 	.word	0x40004c00
 8002128:	40021000 	.word	0x40021000
 800212c:	00f42400 	.word	0x00f42400

08002130 <HAL_USART_Init>:
{
 8002130:	b510      	push	{r4, lr}
 8002132:	1e04      	subs	r4, r0, #0
  if(husart == NULL)
 8002134:	d024      	beq.n	8002180 <HAL_USART_Init+0x50>
  if(husart->State == HAL_USART_STATE_RESET)
 8002136:	2341      	movs	r3, #65	; 0x41
 8002138:	5cc3      	ldrb	r3, [r0, r3]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01a      	beq.n	8002174 <HAL_USART_Init+0x44>
  husart->State = HAL_USART_STATE_BUSY;
 800213e:	2341      	movs	r3, #65	; 0x41
 8002140:	2202      	movs	r2, #2
 8002142:	54e2      	strb	r2, [r4, r3]
  __HAL_USART_DISABLE(husart);
 8002144:	6822      	ldr	r2, [r4, #0]
 8002146:	6813      	ldr	r3, [r2, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	438b      	bics	r3, r1
 800214c:	6013      	str	r3, [r2, #0]
  if (USART_SetConfig(husart) == HAL_ERROR)
 800214e:	0020      	movs	r0, r4
 8002150:	f7ff ff62 	bl	8002018 <USART_SetConfig>
 8002154:	2801      	cmp	r0, #1
 8002156:	d00c      	beq.n	8002172 <HAL_USART_Init+0x42>
  husart->Instance->CR3 &= ~(USART_CR3_HDSEL);
 8002158:	6822      	ldr	r2, [r4, #0]
 800215a:	6893      	ldr	r3, [r2, #8]
 800215c:	2108      	movs	r1, #8
 800215e:	438b      	bics	r3, r1
 8002160:	6093      	str	r3, [r2, #8]
  __HAL_USART_ENABLE(husart);
 8002162:	6822      	ldr	r2, [r4, #0]
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	3907      	subs	r1, #7
 8002168:	430b      	orrs	r3, r1
 800216a:	6013      	str	r3, [r2, #0]
  return (USART_CheckIdleState(husart));
 800216c:	0020      	movs	r0, r4
 800216e:	f7ff ff49 	bl	8002004 <USART_CheckIdleState>
}
 8002172:	bd10      	pop	{r4, pc}
    husart->Lock = HAL_UNLOCKED;
 8002174:	3340      	adds	r3, #64	; 0x40
 8002176:	2200      	movs	r2, #0
 8002178:	54c2      	strb	r2, [r0, r3]
    HAL_USART_MspInit(husart);
 800217a:	f000 ffbd 	bl	80030f8 <HAL_USART_MspInit>
 800217e:	e7de      	b.n	800213e <HAL_USART_Init+0xe>
    return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
 8002182:	e7f6      	b.n	8002172 <HAL_USART_Init+0x42>

08002184 <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 8002184:	2322      	movs	r3, #34	; 0x22
 8002186:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 8002188:	4800      	ldr	r0, [pc, #0]	; (800218c <USBD_HID_GetCfgDesc+0x8>)
 800218a:	4770      	bx	lr
 800218c:	20000000 	.word	0x20000000

08002190 <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002190:	2386      	movs	r3, #134	; 0x86
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	58c3      	ldr	r3, [r0, r3]
 8002196:	2200      	movs	r2, #0
 8002198:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
}
 800219a:	2000      	movs	r0, #0
 800219c:	4770      	bx	lr
	...

080021a0 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 80021a0:	230a      	movs	r3, #10
 80021a2:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
 80021a4:	4801      	ldr	r0, [pc, #4]	; (80021ac <USBD_HID_GetDeviceQualifierDesc+0xc>)
}
 80021a6:	3024      	adds	r0, #36	; 0x24
 80021a8:	4770      	bx	lr
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	20000000 	.word	0x20000000

080021b0 <USBD_HID_Setup>:
{
 80021b0:	b570      	push	{r4, r5, r6, lr}
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 80021b2:	2386      	movs	r3, #134	; 0x86
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	58c5      	ldr	r5, [r0, r3]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80021b8:	780b      	ldrb	r3, [r1, #0]
 80021ba:	2260      	movs	r2, #96	; 0x60
 80021bc:	0014      	movs	r4, r2
 80021be:	401c      	ands	r4, r3
 80021c0:	421a      	tst	r2, r3
 80021c2:	d024      	beq.n	800220e <USBD_HID_Setup+0x5e>
 80021c4:	2c20      	cmp	r4, #32
 80021c6:	d14e      	bne.n	8002266 <USBD_HID_Setup+0xb6>
    switch (req->bRequest)
 80021c8:	784b      	ldrb	r3, [r1, #1]
 80021ca:	2b0a      	cmp	r3, #10
 80021cc:	d010      	beq.n	80021f0 <USBD_HID_Setup+0x40>
 80021ce:	d809      	bhi.n	80021e4 <USBD_HID_Setup+0x34>
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d012      	beq.n	80021fa <USBD_HID_Setup+0x4a>
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d116      	bne.n	8002206 <USBD_HID_Setup+0x56>
      USBD_CtlSendData (pdev, 
 80021d8:	2201      	movs	r2, #1
 80021da:	0029      	movs	r1, r5
 80021dc:	f000 fca1 	bl	8002b22 <USBD_CtlSendData>
  return USBD_OK;
 80021e0:	2400      	movs	r4, #0
      break;
 80021e2:	e041      	b.n	8002268 <USBD_HID_Setup+0xb8>
 80021e4:	2b0b      	cmp	r3, #11
 80021e6:	d10e      	bne.n	8002206 <USBD_HID_Setup+0x56>
      hhid->Protocol = (uint8_t)(req->wValue);
 80021e8:	788b      	ldrb	r3, [r1, #2]
 80021ea:	602b      	str	r3, [r5, #0]
  return USBD_OK;
 80021ec:	2400      	movs	r4, #0
      break;
 80021ee:	e03b      	b.n	8002268 <USBD_HID_Setup+0xb8>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80021f0:	884b      	ldrh	r3, [r1, #2]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	606b      	str	r3, [r5, #4]
  return USBD_OK;
 80021f6:	2400      	movs	r4, #0
      break;
 80021f8:	e036      	b.n	8002268 <USBD_HID_Setup+0xb8>
                        (uint8_t *)&hhid->IdleState,
 80021fa:	1d29      	adds	r1, r5, #4
      USBD_CtlSendData (pdev, 
 80021fc:	2201      	movs	r2, #1
 80021fe:	f000 fc90 	bl	8002b22 <USBD_CtlSendData>
  return USBD_OK;
 8002202:	2400      	movs	r4, #0
      break;      
 8002204:	e030      	b.n	8002268 <USBD_HID_Setup+0xb8>
      USBD_CtlError (pdev, req);
 8002206:	f000 f9fe 	bl	8002606 <USBD_CtlError>
      return USBD_FAIL; 
 800220a:	2402      	movs	r4, #2
 800220c:	e02c      	b.n	8002268 <USBD_HID_Setup+0xb8>
    switch (req->bRequest)
 800220e:	784b      	ldrb	r3, [r1, #1]
 8002210:	2b0a      	cmp	r3, #10
 8002212:	d01f      	beq.n	8002254 <USBD_HID_Setup+0xa4>
 8002214:	2b0b      	cmp	r3, #11
 8002216:	d023      	beq.n	8002260 <USBD_HID_Setup+0xb0>
 8002218:	2b06      	cmp	r3, #6
 800221a:	d125      	bne.n	8002268 <USBD_HID_Setup+0xb8>
      if( req->wValue >> 8 == HID_REPORT_DESC)
 800221c:	884b      	ldrh	r3, [r1, #2]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	2b22      	cmp	r3, #34	; 0x22
 8002222:	d006      	beq.n	8002232 <USBD_HID_Setup+0x82>
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8002224:	2b21      	cmp	r3, #33	; 0x21
 8002226:	d00c      	beq.n	8002242 <USBD_HID_Setup+0x92>
  uint8_t  *pbuf = NULL;
 8002228:	2100      	movs	r1, #0
  uint16_t len = 0;
 800222a:	2200      	movs	r2, #0
      USBD_CtlSendData (pdev, 
 800222c:	f000 fc79 	bl	8002b22 <USBD_CtlSendData>
      break;
 8002230:	e01a      	b.n	8002268 <USBD_HID_Setup+0xb8>
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8002232:	88cb      	ldrh	r3, [r1, #6]
 8002234:	1c1a      	adds	r2, r3, #0
 8002236:	2bbb      	cmp	r3, #187	; 0xbb
 8002238:	d900      	bls.n	800223c <USBD_HID_Setup+0x8c>
 800223a:	22bb      	movs	r2, #187	; 0xbb
 800223c:	b292      	uxth	r2, r2
        pbuf = HID_MOUSE_ReportDesc;
 800223e:	490b      	ldr	r1, [pc, #44]	; (800226c <USBD_HID_Setup+0xbc>)
 8002240:	e7f4      	b.n	800222c <USBD_HID_Setup+0x7c>
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8002242:	88cb      	ldrh	r3, [r1, #6]
 8002244:	1c1a      	adds	r2, r3, #0
 8002246:	2b09      	cmp	r3, #9
 8002248:	d900      	bls.n	800224c <USBD_HID_Setup+0x9c>
 800224a:	2209      	movs	r2, #9
 800224c:	b292      	uxth	r2, r2
        pbuf = USBD_HID_Desc;   
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <USBD_HID_Setup+0xc0>)
 8002250:	3130      	adds	r1, #48	; 0x30
 8002252:	e7eb      	b.n	800222c <USBD_HID_Setup+0x7c>
                        (uint8_t *)&hhid->AltSetting,
 8002254:	0029      	movs	r1, r5
 8002256:	3108      	adds	r1, #8
      USBD_CtlSendData (pdev,
 8002258:	2201      	movs	r2, #1
 800225a:	f000 fc62 	bl	8002b22 <USBD_CtlSendData>
      break;
 800225e:	e003      	b.n	8002268 <USBD_HID_Setup+0xb8>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8002260:	788b      	ldrb	r3, [r1, #2]
 8002262:	60ab      	str	r3, [r5, #8]
      break;
 8002264:	e000      	b.n	8002268 <USBD_HID_Setup+0xb8>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002266:	2400      	movs	r4, #0
}
 8002268:	0020      	movs	r0, r4
 800226a:	bd70      	pop	{r4, r5, r6, pc}
 800226c:	2000003c 	.word	0x2000003c
 8002270:	20000000 	.word	0x20000000

08002274 <USBD_HID_DeInit>:
{
 8002274:	b510      	push	{r4, lr}
 8002276:	0004      	movs	r4, r0
  USBD_LL_CloseEP(pdev,
 8002278:	2181      	movs	r1, #129	; 0x81
 800227a:	f001 f8ae 	bl	80033da <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800227e:	2386      	movs	r3, #134	; 0x86
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	58e0      	ldr	r0, [r4, r3]
 8002284:	2800      	cmp	r0, #0
 8002286:	d005      	beq.n	8002294 <USBD_HID_DeInit+0x20>
    USBD_free(pdev->pClassData);
 8002288:	f001 f92a 	bl	80034e0 <USBD_static_free>
    pdev->pClassData = NULL;
 800228c:	2386      	movs	r3, #134	; 0x86
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	2200      	movs	r2, #0
 8002292:	50e2      	str	r2, [r4, r3]
}
 8002294:	2000      	movs	r0, #0
 8002296:	bd10      	pop	{r4, pc}

08002298 <USBD_HID_Init>:
{
 8002298:	b510      	push	{r4, lr}
 800229a:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev,
 800229c:	2308      	movs	r3, #8
 800229e:	2203      	movs	r2, #3
 80022a0:	2181      	movs	r1, #129	; 0x81
 80022a2:	f001 f886 	bl	80033b2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 80022a6:	2010      	movs	r0, #16
 80022a8:	f001 f916 	bl	80034d8 <USBD_static_malloc>
 80022ac:	2386      	movs	r3, #134	; 0x86
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	50e0      	str	r0, [r4, r3]
  if(pdev->pClassData == NULL)
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d003      	beq.n	80022be <USBD_HID_Init+0x26>
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	7303      	strb	r3, [r0, #12]
  uint8_t ret = 0;
 80022ba:	2000      	movs	r0, #0
}
 80022bc:	bd10      	pop	{r4, pc}
    ret = 1; 
 80022be:	2001      	movs	r0, #1
 80022c0:	e7fc      	b.n	80022bc <USBD_HID_Init+0x24>

080022c2 <USBD_HID_SendReport>:
{
 80022c2:	b510      	push	{r4, lr}
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 80022c4:	2486      	movs	r4, #134	; 0x86
 80022c6:	00a4      	lsls	r4, r4, #2
 80022c8:	5903      	ldr	r3, [r0, r4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80022ca:	3c1c      	subs	r4, #28
 80022cc:	5d04      	ldrb	r4, [r0, r4]
 80022ce:	2c03      	cmp	r4, #3
 80022d0:	d001      	beq.n	80022d6 <USBD_HID_SendReport+0x14>
}
 80022d2:	2000      	movs	r0, #0
 80022d4:	bd10      	pop	{r4, pc}
    if(hhid->state == HID_IDLE)
 80022d6:	7b1c      	ldrb	r4, [r3, #12]
 80022d8:	2c00      	cmp	r4, #0
 80022da:	d1fa      	bne.n	80022d2 <USBD_HID_SendReport+0x10>
      hhid->state = HID_BUSY;
 80022dc:	3401      	adds	r4, #1
 80022de:	731c      	strb	r4, [r3, #12]
      USBD_LL_Transmit (pdev, 
 80022e0:	0013      	movs	r3, r2
 80022e2:	000a      	movs	r2, r1
 80022e4:	2181      	movs	r1, #129	; 0x81
 80022e6:	f001 f8d5 	bl	8003494 <USBD_LL_Transmit>
 80022ea:	e7f2      	b.n	80022d2 <USBD_HID_SendReport+0x10>

080022ec <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80022ec:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80022ee:	2800      	cmp	r0, #0
 80022f0:	d016      	beq.n	8002320 <USBD_Init+0x34>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80022f2:	2385      	movs	r3, #133	; 0x85
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	58c3      	ldr	r3, [r0, r3]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <USBD_Init+0x18>
  {
    pdev->pClass = NULL;
 80022fc:	2385      	movs	r3, #133	; 0x85
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	2400      	movs	r4, #0
 8002302:	50c4      	str	r4, [r0, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002304:	2900      	cmp	r1, #0
 8002306:	d002      	beq.n	800230e <USBD_Init+0x22>
  {
    pdev->pDesc = pdesc;
 8002308:	2384      	movs	r3, #132	; 0x84
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	50c1      	str	r1, [r0, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800230e:	23fe      	movs	r3, #254	; 0xfe
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2101      	movs	r1, #1
 8002314:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8002316:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002318:	f001 f804 	bl	8003324 <USBD_LL_Init>
  
  return USBD_OK; 
 800231c:	2000      	movs	r0, #0
}
 800231e:	bd10      	pop	{r4, pc}
    return USBD_FAIL; 
 8002320:	2002      	movs	r0, #2
 8002322:	e7fc      	b.n	800231e <USBD_Init+0x32>

08002324 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002324:	2900      	cmp	r1, #0
 8002326:	d004      	beq.n	8002332 <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002328:	2385      	movs	r3, #133	; 0x85
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 800232e:	2000      	movs	r0, #0
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
  }
  
  return status;
}
 8002330:	4770      	bx	lr
    status = USBD_FAIL; 
 8002332:	2002      	movs	r0, #2
 8002334:	e7fc      	b.n	8002330 <USBD_RegisterClass+0xc>

08002336 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002336:	b510      	push	{r4, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002338:	f001 f82a 	bl	8003390 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800233c:	2000      	movs	r0, #0
 800233e:	bd10      	pop	{r4, pc}

08002340 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002340:	b510      	push	{r4, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002342:	2385      	movs	r3, #133	; 0x85
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	58c3      	ldr	r3, [r0, r3]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d006      	beq.n	800235a <USBD_SetClassConfig+0x1a>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4798      	blx	r3
 8002350:	2800      	cmp	r0, #0
 8002352:	d100      	bne.n	8002356 <USBD_SetClassConfig+0x16>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002354:	bd10      	pop	{r4, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002356:	2002      	movs	r0, #2
 8002358:	e7fc      	b.n	8002354 <USBD_SetClassConfig+0x14>
 800235a:	2002      	movs	r0, #2
 800235c:	e7fa      	b.n	8002354 <USBD_SetClassConfig+0x14>

0800235e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800235e:	b510      	push	{r4, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002360:	2385      	movs	r3, #133	; 0x85
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	58c3      	ldr	r3, [r0, r3]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4798      	blx	r3
  return USBD_OK;
}
 800236a:	2000      	movs	r0, #0
 800236c:	bd10      	pop	{r4, pc}
	...

08002370 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	0004      	movs	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002374:	2382      	movs	r3, #130	; 0x82
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	18c5      	adds	r5, r0, r3
 800237a:	0028      	movs	r0, r5
 800237c:	f000 f92f 	bl	80025de <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002380:	23fa      	movs	r3, #250	; 0xfa
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2201      	movs	r2, #1
 8002386:	50e2      	str	r2, [r4, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <USBD_LL_SetupStage+0x64>)
 800238a:	5ae2      	ldrh	r2, [r4, r3]
 800238c:	3b16      	subs	r3, #22
 800238e:	50e2      	str	r2, [r4, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002390:	3310      	adds	r3, #16
 8002392:	5ce1      	ldrb	r1, [r4, r3]
 8002394:	3bea      	subs	r3, #234	; 0xea
 8002396:	3bff      	subs	r3, #255	; 0xff
 8002398:	400b      	ands	r3, r1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d00f      	beq.n	80023be <USBD_LL_SetupStage+0x4e>
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d012      	beq.n	80023c8 <USBD_LL_SetupStage+0x58>
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <USBD_LL_SetupStage+0x42>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80023a6:	237f      	movs	r3, #127	; 0x7f
 80023a8:	4399      	bics	r1, r3
 80023aa:	0020      	movs	r0, r4
 80023ac:	f001 f826 	bl	80033fc <USBD_LL_StallEP>
    break;
 80023b0:	e003      	b.n	80023ba <USBD_LL_SetupStage+0x4a>
    USBD_StdDevReq (pdev, &pdev->request);
 80023b2:	0029      	movs	r1, r5
 80023b4:	0020      	movs	r0, r4
 80023b6:	f000 fab5 	bl	8002924 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80023ba:	2000      	movs	r0, #0
 80023bc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80023be:	0029      	movs	r1, r5
 80023c0:	0020      	movs	r0, r4
 80023c2:	f000 fad3 	bl	800296c <USBD_StdItfReq>
    break;
 80023c6:	e7f8      	b.n	80023ba <USBD_LL_SetupStage+0x4a>
    USBD_StdEPReq(pdev, &pdev->request);   
 80023c8:	0029      	movs	r1, r5
 80023ca:	0020      	movs	r0, r4
 80023cc:	f000 faec 	bl	80029a8 <USBD_StdEPReq>
    break;
 80023d0:	e7f3      	b.n	80023ba <USBD_LL_SetupStage+0x4a>
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	0000020e 	.word	0x0000020e

080023d8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80023d8:	b510      	push	{r4, lr}
 80023da:	0004      	movs	r4, r0
 80023dc:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80023de:	2900      	cmp	r1, #0
 80023e0:	d12a      	bne.n	8002438 <USBD_LL_DataOutStage+0x60>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80023e2:	22fa      	movs	r2, #250	; 0xfa
 80023e4:	0052      	lsls	r2, r2, #1
 80023e6:	5882      	ldr	r2, [r0, r2]
 80023e8:	2a03      	cmp	r2, #3
 80023ea:	d001      	beq.n	80023f0 <USBD_LL_DataOutStage+0x18>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80023ec:	2000      	movs	r0, #0
 80023ee:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 80023f0:	1d42      	adds	r2, r0, #5
 80023f2:	32ff      	adds	r2, #255	; 0xff
 80023f4:	6891      	ldr	r1, [r2, #8]
 80023f6:	68d2      	ldr	r2, [r2, #12]
 80023f8:	4291      	cmp	r1, r2
 80023fa:	d80e      	bhi.n	800241a <USBD_LL_DataOutStage+0x42>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80023fc:	2385      	movs	r3, #133	; 0x85
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	58c3      	ldr	r3, [r0, r3]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <USBD_LL_DataOutStage+0x3a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002408:	22fe      	movs	r2, #254	; 0xfe
 800240a:	0052      	lsls	r2, r2, #1
 800240c:	5c82      	ldrb	r2, [r0, r2]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800240e:	2a03      	cmp	r2, #3
 8002410:	d010      	beq.n	8002434 <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 8002412:	0020      	movs	r0, r4
 8002414:	f000 fba3 	bl	8002b5e <USBD_CtlSendStatus>
 8002418:	e7e8      	b.n	80023ec <USBD_LL_DataOutStage+0x14>
        pep->rem_length -=  pep->maxpacket;
 800241a:	1a89      	subs	r1, r1, r2
 800241c:	3005      	adds	r0, #5
 800241e:	30ff      	adds	r0, #255	; 0xff
 8002420:	6081      	str	r1, [r0, #8]
                            MIN(pep->rem_length ,pep->maxpacket));
 8002422:	428a      	cmp	r2, r1
 8002424:	d900      	bls.n	8002428 <USBD_LL_DataOutStage+0x50>
 8002426:	000a      	movs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8002428:	b292      	uxth	r2, r2
 800242a:	0019      	movs	r1, r3
 800242c:	0020      	movs	r0, r4
 800242e:	f000 fb8e 	bl	8002b4e <USBD_CtlContinueRx>
 8002432:	e7db      	b.n	80023ec <USBD_LL_DataOutStage+0x14>
          pdev->pClass->EP0_RxReady(pdev); 
 8002434:	4798      	blx	r3
 8002436:	e7ec      	b.n	8002412 <USBD_LL_DataOutStage+0x3a>
  else if((pdev->pClass->DataOut != NULL)&&
 8002438:	2385      	movs	r3, #133	; 0x85
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	58c3      	ldr	r3, [r0, r3]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0d3      	beq.n	80023ec <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002444:	22fe      	movs	r2, #254	; 0xfe
 8002446:	0052      	lsls	r2, r2, #1
 8002448:	5c82      	ldrb	r2, [r0, r2]
  else if((pdev->pClass->DataOut != NULL)&&
 800244a:	2a03      	cmp	r2, #3
 800244c:	d1ce      	bne.n	80023ec <USBD_LL_DataOutStage+0x14>
    pdev->pClass->DataOut(pdev, epnum); 
 800244e:	4798      	blx	r3
 8002450:	e7cc      	b.n	80023ec <USBD_LL_DataOutStage+0x14>

08002452 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002452:	b570      	push	{r4, r5, r6, lr}
 8002454:	0004      	movs	r4, r0
 8002456:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002458:	2900      	cmp	r1, #0
 800245a:	d14f      	bne.n	80024fc <USBD_LL_DataInStage+0xaa>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800245c:	22fa      	movs	r2, #250	; 0xfa
 800245e:	0052      	lsls	r2, r2, #1
 8002460:	5882      	ldr	r2, [r0, r2]
 8002462:	2a02      	cmp	r2, #2
 8002464:	d006      	beq.n	8002474 <USBD_LL_DataInStage+0x22>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	5ce3      	ldrb	r3, [r4, r3]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d040      	beq.n	80024f2 <USBD_LL_DataInStage+0xa0>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002470:	2000      	movs	r0, #0
 8002472:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8002474:	69c2      	ldr	r2, [r0, #28]
 8002476:	6a05      	ldr	r5, [r0, #32]
 8002478:	42aa      	cmp	r2, r5
 800247a:	d81c      	bhi.n	80024b6 <USBD_LL_DataInStage+0x64>
        if((pep->total_length % pep->maxpacket == 0) &&
 800247c:	6986      	ldr	r6, [r0, #24]
 800247e:	0029      	movs	r1, r5
 8002480:	0030      	movs	r0, r6
 8002482:	f7fd fec7 	bl	8000214 <__aeabi_uidivmod>
 8002486:	2900      	cmp	r1, #0
 8002488:	d106      	bne.n	8002498 <USBD_LL_DataInStage+0x46>
 800248a:	42b5      	cmp	r5, r6
 800248c:	d804      	bhi.n	8002498 <USBD_LL_DataInStage+0x46>
             (pep->total_length < pdev->ep0_data_len ))
 800248e:	23fc      	movs	r3, #252	; 0xfc
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	58e3      	ldr	r3, [r4, r3]
           (pep->total_length >= pep->maxpacket) &&
 8002494:	429e      	cmp	r6, r3
 8002496:	d31b      	bcc.n	80024d0 <USBD_LL_DataInStage+0x7e>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002498:	2385      	movs	r3, #133	; 0x85
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	58e3      	ldr	r3, [r4, r3]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <USBD_LL_DataInStage+0x5c>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80024a4:	22fe      	movs	r2, #254	; 0xfe
 80024a6:	0052      	lsls	r2, r2, #1
 80024a8:	5ca2      	ldrb	r2, [r4, r2]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80024aa:	2a03      	cmp	r2, #3
 80024ac:	d01e      	beq.n	80024ec <USBD_LL_DataInStage+0x9a>
          USBD_CtlReceiveStatus(pdev);
 80024ae:	0020      	movs	r0, r4
 80024b0:	f000 fb61 	bl	8002b76 <USBD_CtlReceiveStatus>
 80024b4:	e7d7      	b.n	8002466 <USBD_LL_DataInStage+0x14>
        pep->rem_length -=  pep->maxpacket;
 80024b6:	1b52      	subs	r2, r2, r5
 80024b8:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 80024ba:	b292      	uxth	r2, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	f000 fb3e 	bl	8002b3e <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 80024c2:	2300      	movs	r3, #0
 80024c4:	2200      	movs	r2, #0
 80024c6:	2100      	movs	r1, #0
 80024c8:	0020      	movs	r0, r4
 80024ca:	f000 fff4 	bl	80034b6 <USBD_LL_PrepareReceive>
 80024ce:	e7ca      	b.n	8002466 <USBD_LL_DataInStage+0x14>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	0020      	movs	r0, r4
 80024d4:	f000 fb33 	bl	8002b3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80024d8:	23fc      	movs	r3, #252	; 0xfc
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2200      	movs	r2, #0
 80024de:	50e2      	str	r2, [r4, r3]
        USBD_LL_PrepareReceive (pdev,
 80024e0:	2300      	movs	r3, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	0020      	movs	r0, r4
 80024e6:	f000 ffe6 	bl	80034b6 <USBD_LL_PrepareReceive>
 80024ea:	e7bc      	b.n	8002466 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev); 
 80024ec:	0020      	movs	r0, r4
 80024ee:	4798      	blx	r3
 80024f0:	e7dd      	b.n	80024ae <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0;
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	2200      	movs	r2, #0
 80024f8:	54e2      	strb	r2, [r4, r3]
 80024fa:	e7b9      	b.n	8002470 <USBD_LL_DataInStage+0x1e>
  else if((pdev->pClass->DataIn != NULL)&& 
 80024fc:	2385      	movs	r3, #133	; 0x85
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	58c3      	ldr	r3, [r0, r3]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0b3      	beq.n	8002470 <USBD_LL_DataInStage+0x1e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002508:	22fe      	movs	r2, #254	; 0xfe
 800250a:	0052      	lsls	r2, r2, #1
 800250c:	5c82      	ldrb	r2, [r0, r2]
  else if((pdev->pClass->DataIn != NULL)&& 
 800250e:	2a03      	cmp	r2, #3
 8002510:	d1ae      	bne.n	8002470 <USBD_LL_DataInStage+0x1e>
    pdev->pClass->DataIn(pdev, epnum); 
 8002512:	4798      	blx	r3
 8002514:	e7ac      	b.n	8002470 <USBD_LL_DataInStage+0x1e>

08002516 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002516:	b570      	push	{r4, r5, r6, lr}
 8002518:	0004      	movs	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	f000 ff47 	bl	80033b2 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002524:	2540      	movs	r5, #64	; 0x40
 8002526:	2388      	movs	r3, #136	; 0x88
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	50e5      	str	r5, [r4, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800252c:	3bd0      	subs	r3, #208	; 0xd0
 800252e:	2200      	movs	r2, #0
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	0020      	movs	r0, r4
 8002534:	f000 ff3d 	bl	80033b2 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002538:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800253a:	23fe      	movs	r3, #254	; 0xfe
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2201      	movs	r2, #1
 8002540:	54e2      	strb	r2, [r4, r3]
  
  if (pdev->pClassData) 
 8002542:	331c      	adds	r3, #28
 8002544:	58e3      	ldr	r3, [r4, r3]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <USBD_LL_Reset+0x42>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800254a:	2385      	movs	r3, #133	; 0x85
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	58e3      	ldr	r3, [r4, r3]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	7921      	ldrb	r1, [r4, #4]
 8002554:	0020      	movs	r0, r4
 8002556:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002558:	2000      	movs	r0, #0
 800255a:	bd70      	pop	{r4, r5, r6, pc}

0800255c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800255c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800255e:	2000      	movs	r0, #0
 8002560:	4770      	bx	lr

08002562 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002562:	23fe      	movs	r3, #254	; 0xfe
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	5cc1      	ldrb	r1, [r0, r3]
 8002568:	22fe      	movs	r2, #254	; 0xfe
 800256a:	32ff      	adds	r2, #255	; 0xff
 800256c:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800256e:	3afa      	subs	r2, #250	; 0xfa
 8002570:	3aff      	subs	r2, #255	; 0xff
 8002572:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8002574:	2000      	movs	r0, #0
 8002576:	4770      	bx	lr

08002578 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002578:	23fe      	movs	r3, #254	; 0xfe
 800257a:	33ff      	adds	r3, #255	; 0xff
 800257c:	5cc2      	ldrb	r2, [r0, r3]
 800257e:	3b01      	subs	r3, #1
 8002580:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8002582:	2000      	movs	r0, #0
 8002584:	4770      	bx	lr

08002586 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002586:	b510      	push	{r4, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002588:	23fe      	movs	r3, #254	; 0xfe
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	5cc3      	ldrb	r3, [r0, r3]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d001      	beq.n	8002596 <USBD_LL_SOF+0x10>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8002592:	2000      	movs	r0, #0
 8002594:	bd10      	pop	{r4, pc}
    if(pdev->pClass->SOF != NULL)
 8002596:	2385      	movs	r3, #133	; 0x85
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	58c3      	ldr	r3, [r0, r3]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f7      	beq.n	8002592 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 80025a2:	4798      	blx	r3
 80025a4:	e7f5      	b.n	8002592 <USBD_LL_SOF+0xc>

080025a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80025a6:	0003      	movs	r3, r0
    uint8_t  len = 0;
 80025a8:	2000      	movs	r0, #0

    while (*buf != '\0') 
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	2a00      	cmp	r2, #0
 80025ae:	d003      	beq.n	80025b8 <USBD_GetLen+0x12>
    {
        len++;
 80025b0:	3001      	adds	r0, #1
 80025b2:	b2c0      	uxtb	r0, r0
        buf++;
 80025b4:	3301      	adds	r3, #1
 80025b6:	e7f8      	b.n	80025aa <USBD_GetLen+0x4>
    }

    return len;
}
 80025b8:	4770      	bx	lr

080025ba <USBD_SetFeature>:
{
 80025ba:	b510      	push	{r4, lr}
 80025bc:	0004      	movs	r4, r0
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80025be:	884b      	ldrh	r3, [r1, #2]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d000      	beq.n	80025c6 <USBD_SetFeature+0xc>
}
 80025c4:	bd10      	pop	{r4, pc}
    pdev->dev_remote_wakeup = 1;  
 80025c6:	2381      	movs	r3, #129	; 0x81
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	2201      	movs	r2, #1
 80025cc:	50c2      	str	r2, [r0, r3]
    pdev->pClass->Setup (pdev, req);   
 80025ce:	3310      	adds	r3, #16
 80025d0:	58c3      	ldr	r3, [r0, r3]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80025d6:	0020      	movs	r0, r4
 80025d8:	f000 fac1 	bl	8002b5e <USBD_CtlSendStatus>
}
 80025dc:	e7f2      	b.n	80025c4 <USBD_SetFeature+0xa>

080025de <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80025de:	780b      	ldrb	r3, [r1, #0]
 80025e0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80025e2:	784b      	ldrb	r3, [r1, #1]
 80025e4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80025e6:	788b      	ldrb	r3, [r1, #2]
 80025e8:	78ca      	ldrb	r2, [r1, #3]
 80025ea:	0212      	lsls	r2, r2, #8
 80025ec:	189b      	adds	r3, r3, r2
 80025ee:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80025f0:	790b      	ldrb	r3, [r1, #4]
 80025f2:	794a      	ldrb	r2, [r1, #5]
 80025f4:	0212      	lsls	r2, r2, #8
 80025f6:	189b      	adds	r3, r3, r2
 80025f8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80025fa:	798b      	ldrb	r3, [r1, #6]
 80025fc:	79ca      	ldrb	r2, [r1, #7]
 80025fe:	0212      	lsls	r2, r2, #8
 8002600:	189b      	adds	r3, r3, r2
 8002602:	80c3      	strh	r3, [r0, #6]
}
 8002604:	4770      	bx	lr

08002606 <USBD_CtlError>:
{
 8002606:	b510      	push	{r4, lr}
 8002608:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800260a:	2180      	movs	r1, #128	; 0x80
 800260c:	f000 fef6 	bl	80033fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002610:	2100      	movs	r1, #0
 8002612:	0020      	movs	r0, r4
 8002614:	f000 fef2 	bl	80033fc <USBD_LL_StallEP>
}
 8002618:	bd10      	pop	{r4, pc}
	...

0800261c <USBD_GetDescriptor>:
{
 800261c:	b530      	push	{r4, r5, lr}
 800261e:	b083      	sub	sp, #12
 8002620:	0004      	movs	r4, r0
 8002622:	000d      	movs	r5, r1
  switch (req->wValue >> 8)
 8002624:	884a      	ldrh	r2, [r1, #2]
 8002626:	0a13      	lsrs	r3, r2, #8
 8002628:	2b07      	cmp	r3, #7
 800262a:	d900      	bls.n	800262e <USBD_GetDescriptor+0x12>
 800262c:	e08e      	b.n	800274c <USBD_GetDescriptor+0x130>
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	494f      	ldr	r1, [pc, #316]	; (8002770 <USBD_GetDescriptor+0x154>)
 8002632:	58cb      	ldr	r3, [r1, r3]
 8002634:	469f      	mov	pc, r3
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002636:	2384      	movs	r3, #132	; 0x84
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	58c3      	ldr	r3, [r0, r3]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	7c00      	ldrb	r0, [r0, #16]
 8002640:	466a      	mov	r2, sp
 8002642:	1d91      	adds	r1, r2, #6
 8002644:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002646:	466b      	mov	r3, sp
 8002648:	3306      	adds	r3, #6
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <USBD_GetDescriptor+0x3c>
 8002650:	88ea      	ldrh	r2, [r5, #6]
 8002652:	2a00      	cmp	r2, #0
 8002654:	d000      	beq.n	8002658 <USBD_GetDescriptor+0x3c>
 8002656:	e07e      	b.n	8002756 <USBD_GetDescriptor+0x13a>
}
 8002658:	b003      	add	sp, #12
 800265a:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800265c:	7c03      	ldrb	r3, [r0, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <USBD_GetDescriptor+0x5a>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002662:	2385      	movs	r3, #133	; 0x85
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	58c3      	ldr	r3, [r0, r3]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	466a      	mov	r2, sp
 800266c:	1d90      	adds	r0, r2, #6
 800266e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002670:	2302      	movs	r3, #2
 8002672:	7043      	strb	r3, [r0, #1]
 8002674:	e7e7      	b.n	8002646 <USBD_GetDescriptor+0x2a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002676:	2385      	movs	r3, #133	; 0x85
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	58c3      	ldr	r3, [r0, r3]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	466a      	mov	r2, sp
 8002680:	1d90      	adds	r0, r2, #6
 8002682:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002684:	2302      	movs	r3, #2
 8002686:	7043      	strb	r3, [r0, #1]
 8002688:	e7dd      	b.n	8002646 <USBD_GetDescriptor+0x2a>
    switch ((uint8_t)(req->wValue))
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	2a05      	cmp	r2, #5
 800268e:	d839      	bhi.n	8002704 <USBD_GetDescriptor+0xe8>
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <USBD_GetDescriptor+0x158>)
 8002694:	589b      	ldr	r3, [r3, r2]
 8002696:	469f      	mov	pc, r3
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002698:	2384      	movs	r3, #132	; 0x84
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	58c3      	ldr	r3, [r0, r3]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	7c00      	ldrb	r0, [r0, #16]
 80026a2:	466a      	mov	r2, sp
 80026a4:	1d91      	adds	r1, r2, #6
 80026a6:	4798      	blx	r3
      break;
 80026a8:	e7cd      	b.n	8002646 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80026aa:	2384      	movs	r3, #132	; 0x84
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	58c3      	ldr	r3, [r0, r3]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	7c00      	ldrb	r0, [r0, #16]
 80026b4:	466a      	mov	r2, sp
 80026b6:	1d91      	adds	r1, r2, #6
 80026b8:	4798      	blx	r3
      break;
 80026ba:	e7c4      	b.n	8002646 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80026bc:	2384      	movs	r3, #132	; 0x84
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	58c3      	ldr	r3, [r0, r3]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	7c00      	ldrb	r0, [r0, #16]
 80026c6:	466a      	mov	r2, sp
 80026c8:	1d91      	adds	r1, r2, #6
 80026ca:	4798      	blx	r3
      break;
 80026cc:	e7bb      	b.n	8002646 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80026ce:	2384      	movs	r3, #132	; 0x84
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	58c3      	ldr	r3, [r0, r3]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	7c00      	ldrb	r0, [r0, #16]
 80026d8:	466a      	mov	r2, sp
 80026da:	1d91      	adds	r1, r2, #6
 80026dc:	4798      	blx	r3
      break;
 80026de:	e7b2      	b.n	8002646 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80026e0:	2384      	movs	r3, #132	; 0x84
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	58c3      	ldr	r3, [r0, r3]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	7c00      	ldrb	r0, [r0, #16]
 80026ea:	466a      	mov	r2, sp
 80026ec:	1d91      	adds	r1, r2, #6
 80026ee:	4798      	blx	r3
      break;
 80026f0:	e7a9      	b.n	8002646 <USBD_GetDescriptor+0x2a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80026f2:	2384      	movs	r3, #132	; 0x84
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	58c3      	ldr	r3, [r0, r3]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	7c00      	ldrb	r0, [r0, #16]
 80026fc:	466a      	mov	r2, sp
 80026fe:	1d91      	adds	r1, r2, #6
 8002700:	4798      	blx	r3
      break;
 8002702:	e7a0      	b.n	8002646 <USBD_GetDescriptor+0x2a>
       USBD_CtlError(pdev , req);
 8002704:	0029      	movs	r1, r5
 8002706:	f7ff ff7e 	bl	8002606 <USBD_CtlError>
      return;
 800270a:	e7a5      	b.n	8002658 <USBD_GetDescriptor+0x3c>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800270c:	7c03      	ldrb	r3, [r0, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <USBD_GetDescriptor+0x106>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002712:	2385      	movs	r3, #133	; 0x85
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	58c3      	ldr	r3, [r0, r3]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	466a      	mov	r2, sp
 800271c:	1d90      	adds	r0, r2, #6
 800271e:	4798      	blx	r3
      break;
 8002720:	e791      	b.n	8002646 <USBD_GetDescriptor+0x2a>
      USBD_CtlError(pdev , req);
 8002722:	0029      	movs	r1, r5
 8002724:	f7ff ff6f 	bl	8002606 <USBD_CtlError>
      return;
 8002728:	e796      	b.n	8002658 <USBD_GetDescriptor+0x3c>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800272a:	7c03      	ldrb	r3, [r0, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <USBD_GetDescriptor+0x128>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002730:	2385      	movs	r3, #133	; 0x85
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	58c3      	ldr	r3, [r0, r3]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	466a      	mov	r2, sp
 800273a:	1d90      	adds	r0, r2, #6
 800273c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800273e:	2307      	movs	r3, #7
 8002740:	7043      	strb	r3, [r0, #1]
      break; 
 8002742:	e780      	b.n	8002646 <USBD_GetDescriptor+0x2a>
      USBD_CtlError(pdev , req);
 8002744:	0029      	movs	r1, r5
 8002746:	f7ff ff5e 	bl	8002606 <USBD_CtlError>
      return;
 800274a:	e785      	b.n	8002658 <USBD_GetDescriptor+0x3c>
     USBD_CtlError(pdev , req);
 800274c:	0029      	movs	r1, r5
 800274e:	0020      	movs	r0, r4
 8002750:	f7ff ff59 	bl	8002606 <USBD_CtlError>
    return;
 8002754:	e780      	b.n	8002658 <USBD_GetDescriptor+0x3c>
    len = MIN(len , req->wLength);
 8002756:	1c19      	adds	r1, r3, #0
 8002758:	4293      	cmp	r3, r2
 800275a:	d900      	bls.n	800275e <USBD_GetDescriptor+0x142>
 800275c:	1c11      	adds	r1, r2, #0
 800275e:	b28a      	uxth	r2, r1
 8002760:	466b      	mov	r3, sp
 8002762:	80d9      	strh	r1, [r3, #6]
    USBD_CtlSendData (pdev, 
 8002764:	0001      	movs	r1, r0
 8002766:	0020      	movs	r0, r4
 8002768:	f000 f9db 	bl	8002b22 <USBD_CtlSendData>
 800276c:	e774      	b.n	8002658 <USBD_GetDescriptor+0x3c>
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	08003680 	.word	0x08003680
 8002774:	080036a0 	.word	0x080036a0

08002778 <USBD_SetAddress>:
{
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	0004      	movs	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800277c:	888b      	ldrh	r3, [r1, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d122      	bne.n	80027c8 <USBD_SetAddress+0x50>
 8002782:	88cb      	ldrh	r3, [r1, #6]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d11f      	bne.n	80027c8 <USBD_SetAddress+0x50>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002788:	788b      	ldrb	r3, [r1, #2]
 800278a:	257f      	movs	r5, #127	; 0x7f
 800278c:	401d      	ands	r5, r3
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800278e:	23fe      	movs	r3, #254	; 0xfe
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	5cc3      	ldrb	r3, [r0, r3]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d00f      	beq.n	80027b8 <USBD_SetAddress+0x40>
      pdev->dev_address = dev_addr;
 8002798:	23ff      	movs	r3, #255	; 0xff
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	54c5      	strb	r5, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800279e:	0029      	movs	r1, r5
 80027a0:	f000 fe67 	bl	8003472 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80027a4:	0020      	movs	r0, r4
 80027a6:	f000 f9da 	bl	8002b5e <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	d007      	beq.n	80027be <USBD_SetAddress+0x46>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80027ae:	23fe      	movs	r3, #254	; 0xfe
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2202      	movs	r2, #2
 80027b4:	54e2      	strb	r2, [r4, r3]
 80027b6:	e00a      	b.n	80027ce <USBD_SetAddress+0x56>
      USBD_CtlError(pdev , req);
 80027b8:	f7ff ff25 	bl	8002606 <USBD_CtlError>
 80027bc:	e007      	b.n	80027ce <USBD_SetAddress+0x56>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80027be:	23fe      	movs	r3, #254	; 0xfe
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2201      	movs	r2, #1
 80027c4:	54e2      	strb	r2, [r4, r3]
 80027c6:	e002      	b.n	80027ce <USBD_SetAddress+0x56>
     USBD_CtlError(pdev , req);                        
 80027c8:	0020      	movs	r0, r4
 80027ca:	f7ff ff1c 	bl	8002606 <USBD_CtlError>
}
 80027ce:	bd70      	pop	{r4, r5, r6, pc}

080027d0 <USBD_SetConfig>:
{
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	0004      	movs	r4, r0
 80027d4:	000d      	movs	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 80027d6:	7889      	ldrb	r1, [r1, #2]
 80027d8:	4b28      	ldr	r3, [pc, #160]	; (800287c <USBD_SetConfig+0xac>)
 80027da:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80027dc:	2901      	cmp	r1, #1
 80027de:	d80a      	bhi.n	80027f6 <USBD_SetConfig+0x26>
    switch (pdev->dev_state) 
 80027e0:	23fe      	movs	r3, #254	; 0xfe
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	5cc3      	ldrb	r3, [r0, r3]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d009      	beq.n	80027fe <USBD_SetConfig+0x2e>
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d01e      	beq.n	800282c <USBD_SetConfig+0x5c>
       USBD_CtlError(pdev , req);                     
 80027ee:	0029      	movs	r1, r5
 80027f0:	f7ff ff09 	bl	8002606 <USBD_CtlError>
      break;
 80027f4:	e002      	b.n	80027fc <USBD_SetConfig+0x2c>
     USBD_CtlError(pdev , req);                              
 80027f6:	0029      	movs	r1, r5
 80027f8:	f7ff ff05 	bl	8002606 <USBD_CtlError>
}
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
      if (cfgidx) 
 80027fe:	2900      	cmp	r1, #0
 8002800:	d011      	beq.n	8002826 <USBD_SetConfig+0x56>
        pdev->dev_config = cfgidx;
 8002802:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002804:	23fe      	movs	r3, #254	; 0xfe
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	54c2      	strb	r2, [r0, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800280c:	f7ff fd98 	bl	8002340 <USBD_SetClassConfig>
 8002810:	2802      	cmp	r0, #2
 8002812:	d003      	beq.n	800281c <USBD_SetConfig+0x4c>
        USBD_CtlSendStatus(pdev);
 8002814:	0020      	movs	r0, r4
 8002816:	f000 f9a2 	bl	8002b5e <USBD_CtlSendStatus>
 800281a:	e7ef      	b.n	80027fc <USBD_SetConfig+0x2c>
          USBD_CtlError(pdev , req);  
 800281c:	0029      	movs	r1, r5
 800281e:	0020      	movs	r0, r4
 8002820:	f7ff fef1 	bl	8002606 <USBD_CtlError>
          return;
 8002824:	e7ea      	b.n	80027fc <USBD_SetConfig+0x2c>
         USBD_CtlSendStatus(pdev);
 8002826:	f000 f99a 	bl	8002b5e <USBD_CtlSendStatus>
 800282a:	e7e7      	b.n	80027fc <USBD_SetConfig+0x2c>
      if (cfgidx == 0) 
 800282c:	2900      	cmp	r1, #0
 800282e:	d011      	beq.n	8002854 <USBD_SetConfig+0x84>
      else  if (cfgidx != pdev->dev_config) 
 8002830:	6843      	ldr	r3, [r0, #4]
 8002832:	4299      	cmp	r1, r3
 8002834:	d01e      	beq.n	8002874 <USBD_SetConfig+0xa4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8002836:	b2d9      	uxtb	r1, r3
 8002838:	f7ff fd91 	bl	800235e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <USBD_SetConfig+0xac>)
 800283e:	7819      	ldrb	r1, [r3, #0]
 8002840:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002842:	0020      	movs	r0, r4
 8002844:	f7ff fd7c 	bl	8002340 <USBD_SetClassConfig>
 8002848:	2802      	cmp	r0, #2
 800284a:	d00e      	beq.n	800286a <USBD_SetConfig+0x9a>
        USBD_CtlSendStatus(pdev);
 800284c:	0020      	movs	r0, r4
 800284e:	f000 f986 	bl	8002b5e <USBD_CtlSendStatus>
 8002852:	e7d3      	b.n	80027fc <USBD_SetConfig+0x2c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002854:	23fe      	movs	r3, #254	; 0xfe
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2202      	movs	r2, #2
 800285a:	54c2      	strb	r2, [r0, r3]
        pdev->dev_config = cfgidx;          
 800285c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800285e:	f7ff fd7e 	bl	800235e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8002862:	0020      	movs	r0, r4
 8002864:	f000 f97b 	bl	8002b5e <USBD_CtlSendStatus>
 8002868:	e7c8      	b.n	80027fc <USBD_SetConfig+0x2c>
          USBD_CtlError(pdev , req);  
 800286a:	0029      	movs	r1, r5
 800286c:	0020      	movs	r0, r4
 800286e:	f7ff feca 	bl	8002606 <USBD_CtlError>
          return;
 8002872:	e7c3      	b.n	80027fc <USBD_SetConfig+0x2c>
        USBD_CtlSendStatus(pdev);
 8002874:	f000 f973 	bl	8002b5e <USBD_CtlSendStatus>
 8002878:	e7c0      	b.n	80027fc <USBD_SetConfig+0x2c>
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	20000204 	.word	0x20000204

08002880 <USBD_GetConfig>:
{
 8002880:	b510      	push	{r4, lr}
  if (req->wLength != 1) 
 8002882:	88cb      	ldrh	r3, [r1, #6]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d109      	bne.n	800289c <USBD_GetConfig+0x1c>
    switch (pdev->dev_state )  
 8002888:	23fe      	movs	r3, #254	; 0xfe
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	5cc3      	ldrb	r3, [r0, r3]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d007      	beq.n	80028a2 <USBD_GetConfig+0x22>
 8002892:	2b03      	cmp	r3, #3
 8002894:	d00d      	beq.n	80028b2 <USBD_GetConfig+0x32>
       USBD_CtlError(pdev , req);
 8002896:	f7ff feb6 	bl	8002606 <USBD_CtlError>
}
 800289a:	e001      	b.n	80028a0 <USBD_GetConfig+0x20>
     USBD_CtlError(pdev , req);
 800289c:	f7ff feb3 	bl	8002606 <USBD_CtlError>
}
 80028a0:	bd10      	pop	{r4, pc}
      pdev->dev_default_config = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	6083      	str	r3, [r0, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80028a6:	0001      	movs	r1, r0
 80028a8:	3108      	adds	r1, #8
      USBD_CtlSendData (pdev, 
 80028aa:	2201      	movs	r2, #1
 80028ac:	f000 f939 	bl	8002b22 <USBD_CtlSendData>
      break;
 80028b0:	e7f6      	b.n	80028a0 <USBD_GetConfig+0x20>
                        (uint8_t *)&pdev->dev_config,
 80028b2:	1d01      	adds	r1, r0, #4
      USBD_CtlSendData (pdev, 
 80028b4:	2201      	movs	r2, #1
 80028b6:	f000 f934 	bl	8002b22 <USBD_CtlSendData>
      break;
 80028ba:	e7f1      	b.n	80028a0 <USBD_GetConfig+0x20>

080028bc <USBD_GetStatus>:
{
 80028bc:	b510      	push	{r4, lr}
  switch (pdev->dev_state) 
 80028be:	23fe      	movs	r3, #254	; 0xfe
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	5cc3      	ldrb	r3, [r0, r3]
 80028c4:	3b02      	subs	r3, #2
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d80e      	bhi.n	80028e8 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80028ca:	2301      	movs	r3, #1
 80028cc:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80028ce:	2381      	movs	r3, #129	; 0x81
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	58c3      	ldr	r3, [r0, r3]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <USBD_GetStatus+0x20>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80028d8:	2303      	movs	r3, #3
 80028da:	60c3      	str	r3, [r0, #12]
                      (uint8_t *)& pdev->dev_config_status,
 80028dc:	0001      	movs	r1, r0
 80028de:	310c      	adds	r1, #12
    USBD_CtlSendData (pdev, 
 80028e0:	2202      	movs	r2, #2
 80028e2:	f000 f91e 	bl	8002b22 <USBD_CtlSendData>
}
 80028e6:	bd10      	pop	{r4, pc}
    USBD_CtlError(pdev , req);                        
 80028e8:	f7ff fe8d 	bl	8002606 <USBD_CtlError>
}
 80028ec:	e7fb      	b.n	80028e6 <USBD_GetStatus+0x2a>

080028ee <USBD_ClrFeature>:
{
 80028ee:	b510      	push	{r4, lr}
 80028f0:	0004      	movs	r4, r0
  switch (pdev->dev_state)
 80028f2:	23fe      	movs	r3, #254	; 0xfe
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	5cc3      	ldrb	r3, [r0, r3]
 80028f8:	3b02      	subs	r3, #2
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d80e      	bhi.n	800291c <USBD_ClrFeature+0x2e>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80028fe:	884b      	ldrh	r3, [r1, #2]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10d      	bne.n	8002920 <USBD_ClrFeature+0x32>
      pdev->dev_remote_wakeup = 0; 
 8002904:	2381      	movs	r3, #129	; 0x81
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	2200      	movs	r2, #0
 800290a:	50c2      	str	r2, [r0, r3]
      pdev->pClass->Setup (pdev, req);   
 800290c:	3310      	adds	r3, #16
 800290e:	58c3      	ldr	r3, [r0, r3]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8002914:	0020      	movs	r0, r4
 8002916:	f000 f922 	bl	8002b5e <USBD_CtlSendStatus>
 800291a:	e001      	b.n	8002920 <USBD_ClrFeature+0x32>
     USBD_CtlError(pdev , req);
 800291c:	f7ff fe73 	bl	8002606 <USBD_CtlError>
}
 8002920:	bd10      	pop	{r4, pc}
	...

08002924 <USBD_StdDevReq>:
{
 8002924:	b510      	push	{r4, lr}
  switch (req->bRequest) 
 8002926:	784b      	ldrb	r3, [r1, #1]
 8002928:	2b09      	cmp	r3, #9
 800292a:	d819      	bhi.n	8002960 <USBD_StdDevReq+0x3c>
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <USBD_StdDevReq+0x44>)
 8002930:	58d3      	ldr	r3, [r2, r3]
 8002932:	469f      	mov	pc, r3
    USBD_GetDescriptor (pdev, req) ;
 8002934:	f7ff fe72 	bl	800261c <USBD_GetDescriptor>
}
 8002938:	2000      	movs	r0, #0
 800293a:	bd10      	pop	{r4, pc}
    USBD_SetAddress(pdev, req);
 800293c:	f7ff ff1c 	bl	8002778 <USBD_SetAddress>
    break;
 8002940:	e7fa      	b.n	8002938 <USBD_StdDevReq+0x14>
    USBD_SetConfig (pdev , req);
 8002942:	f7ff ff45 	bl	80027d0 <USBD_SetConfig>
    break;
 8002946:	e7f7      	b.n	8002938 <USBD_StdDevReq+0x14>
    USBD_GetConfig (pdev , req);
 8002948:	f7ff ff9a 	bl	8002880 <USBD_GetConfig>
    break;
 800294c:	e7f4      	b.n	8002938 <USBD_StdDevReq+0x14>
    USBD_GetStatus (pdev , req);
 800294e:	f7ff ffb5 	bl	80028bc <USBD_GetStatus>
    break;
 8002952:	e7f1      	b.n	8002938 <USBD_StdDevReq+0x14>
    USBD_SetFeature (pdev , req);    
 8002954:	f7ff fe31 	bl	80025ba <USBD_SetFeature>
    break;
 8002958:	e7ee      	b.n	8002938 <USBD_StdDevReq+0x14>
    USBD_ClrFeature (pdev , req);
 800295a:	f7ff ffc8 	bl	80028ee <USBD_ClrFeature>
    break;
 800295e:	e7eb      	b.n	8002938 <USBD_StdDevReq+0x14>
    USBD_CtlError(pdev , req);
 8002960:	f7ff fe51 	bl	8002606 <USBD_CtlError>
    break;
 8002964:	e7e8      	b.n	8002938 <USBD_StdDevReq+0x14>
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	080036b8 	.word	0x080036b8

0800296c <USBD_StdItfReq>:
{
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	0004      	movs	r4, r0
 8002970:	000d      	movs	r5, r1
  switch (pdev->dev_state) 
 8002972:	23fe      	movs	r3, #254	; 0xfe
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	5cc3      	ldrb	r3, [r0, r3]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d111      	bne.n	80029a0 <USBD_StdItfReq+0x34>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800297c:	790b      	ldrb	r3, [r1, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d80b      	bhi.n	800299a <USBD_StdItfReq+0x2e>
      pdev->pClass->Setup (pdev, req); 
 8002982:	2385      	movs	r3, #133	; 0x85
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	58c3      	ldr	r3, [r0, r3]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800298c:	88eb      	ldrh	r3, [r5, #6]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d108      	bne.n	80029a4 <USBD_StdItfReq+0x38>
         USBD_CtlSendStatus(pdev);
 8002992:	0020      	movs	r0, r4
 8002994:	f000 f8e3 	bl	8002b5e <USBD_CtlSendStatus>
 8002998:	e004      	b.n	80029a4 <USBD_StdItfReq+0x38>
       USBD_CtlError(pdev , req);
 800299a:	f7ff fe34 	bl	8002606 <USBD_CtlError>
 800299e:	e001      	b.n	80029a4 <USBD_StdItfReq+0x38>
     USBD_CtlError(pdev , req);
 80029a0:	f7ff fe31 	bl	8002606 <USBD_CtlError>
}
 80029a4:	2000      	movs	r0, #0
 80029a6:	bd70      	pop	{r4, r5, r6, pc}

080029a8 <USBD_StdEPReq>:
{
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	0005      	movs	r5, r0
 80029ac:	000c      	movs	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80029ae:	8888      	ldrh	r0, [r1, #4]
 80029b0:	7909      	ldrb	r1, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80029b2:	7822      	ldrb	r2, [r4, #0]
 80029b4:	2360      	movs	r3, #96	; 0x60
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d008      	beq.n	80029ce <USBD_StdEPReq+0x26>
  switch (req->bRequest) 
 80029bc:	7863      	ldrb	r3, [r4, #1]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d037      	beq.n	8002a32 <USBD_StdEPReq+0x8a>
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d00b      	beq.n	80029de <USBD_StdEPReq+0x36>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d05b      	beq.n	8002a82 <USBD_StdEPReq+0xda>
}
 80029ca:	2000      	movs	r0, #0
 80029cc:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->Setup (pdev, req);
 80029ce:	33f5      	adds	r3, #245	; 0xf5
 80029d0:	33ff      	adds	r3, #255	; 0xff
 80029d2:	58eb      	ldr	r3, [r5, r3]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0021      	movs	r1, r4
 80029d8:	0028      	movs	r0, r5
 80029da:	4798      	blx	r3
    return USBD_OK;
 80029dc:	e7f5      	b.n	80029ca <USBD_StdEPReq+0x22>
    switch (pdev->dev_state) 
 80029de:	23fe      	movs	r3, #254	; 0xfe
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	5ceb      	ldrb	r3, [r5, r3]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d006      	beq.n	80029f6 <USBD_StdEPReq+0x4e>
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d00c      	beq.n	8002a06 <USBD_StdEPReq+0x5e>
      USBD_CtlError(pdev , req);
 80029ec:	0021      	movs	r1, r4
 80029ee:	0028      	movs	r0, r5
 80029f0:	f7ff fe09 	bl	8002606 <USBD_CtlError>
      break;    
 80029f4:	e7e9      	b.n	80029ca <USBD_StdEPReq+0x22>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80029f6:	2900      	cmp	r1, #0
 80029f8:	d0e7      	beq.n	80029ca <USBD_StdEPReq+0x22>
 80029fa:	2980      	cmp	r1, #128	; 0x80
 80029fc:	d0e5      	beq.n	80029ca <USBD_StdEPReq+0x22>
        USBD_LL_StallEP(pdev , ep_addr);
 80029fe:	0028      	movs	r0, r5
 8002a00:	f000 fcfc 	bl	80033fc <USBD_LL_StallEP>
 8002a04:	e7e1      	b.n	80029ca <USBD_StdEPReq+0x22>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002a06:	8863      	ldrh	r3, [r4, #2]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <USBD_StdEPReq+0x6c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002a0c:	2900      	cmp	r1, #0
 8002a0e:	d001      	beq.n	8002a14 <USBD_StdEPReq+0x6c>
 8002a10:	2980      	cmp	r1, #128	; 0x80
 8002a12:	d10a      	bne.n	8002a2a <USBD_StdEPReq+0x82>
      pdev->pClass->Setup (pdev, req);   
 8002a14:	2385      	movs	r3, #133	; 0x85
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	58eb      	ldr	r3, [r5, r3]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	0021      	movs	r1, r4
 8002a1e:	0028      	movs	r0, r5
 8002a20:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8002a22:	0028      	movs	r0, r5
 8002a24:	f000 f89b 	bl	8002b5e <USBD_CtlSendStatus>
      break;
 8002a28:	e7cf      	b.n	80029ca <USBD_StdEPReq+0x22>
          USBD_LL_StallEP(pdev , ep_addr);
 8002a2a:	0028      	movs	r0, r5
 8002a2c:	f000 fce6 	bl	80033fc <USBD_LL_StallEP>
 8002a30:	e7f0      	b.n	8002a14 <USBD_StdEPReq+0x6c>
    switch (pdev->dev_state) 
 8002a32:	23fe      	movs	r3, #254	; 0xfe
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	5ceb      	ldrb	r3, [r5, r3]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d006      	beq.n	8002a4a <USBD_StdEPReq+0xa2>
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d00c      	beq.n	8002a5a <USBD_StdEPReq+0xb2>
      USBD_CtlError(pdev , req);
 8002a40:	0021      	movs	r1, r4
 8002a42:	0028      	movs	r0, r5
 8002a44:	f7ff fddf 	bl	8002606 <USBD_CtlError>
      break;    
 8002a48:	e7bf      	b.n	80029ca <USBD_StdEPReq+0x22>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002a4a:	2900      	cmp	r1, #0
 8002a4c:	d0bd      	beq.n	80029ca <USBD_StdEPReq+0x22>
 8002a4e:	2980      	cmp	r1, #128	; 0x80
 8002a50:	d0bb      	beq.n	80029ca <USBD_StdEPReq+0x22>
        USBD_LL_StallEP(pdev , ep_addr);
 8002a52:	0028      	movs	r0, r5
 8002a54:	f000 fcd2 	bl	80033fc <USBD_LL_StallEP>
 8002a58:	e7b7      	b.n	80029ca <USBD_StdEPReq+0x22>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002a5a:	8863      	ldrh	r3, [r4, #2]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1b4      	bne.n	80029ca <USBD_StdEPReq+0x22>
        if ((ep_addr & 0x7F) != 0x00) 
 8002a60:	064b      	lsls	r3, r1, #25
 8002a62:	d103      	bne.n	8002a6c <USBD_StdEPReq+0xc4>
        USBD_CtlSendStatus(pdev);
 8002a64:	0028      	movs	r0, r5
 8002a66:	f000 f87a 	bl	8002b5e <USBD_CtlSendStatus>
 8002a6a:	e7ae      	b.n	80029ca <USBD_StdEPReq+0x22>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002a6c:	0028      	movs	r0, r5
 8002a6e:	f000 fcd6 	bl	800341e <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8002a72:	2385      	movs	r3, #133	; 0x85
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	58eb      	ldr	r3, [r5, r3]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0021      	movs	r1, r4
 8002a7c:	0028      	movs	r0, r5
 8002a7e:	4798      	blx	r3
 8002a80:	e7f0      	b.n	8002a64 <USBD_StdEPReq+0xbc>
    switch (pdev->dev_state) 
 8002a82:	23fe      	movs	r3, #254	; 0xfe
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	5ceb      	ldrb	r3, [r5, r3]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d006      	beq.n	8002a9a <USBD_StdEPReq+0xf2>
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d00b      	beq.n	8002aa8 <USBD_StdEPReq+0x100>
      USBD_CtlError(pdev , req);
 8002a90:	0021      	movs	r1, r4
 8002a92:	0028      	movs	r0, r5
 8002a94:	f7ff fdb7 	bl	8002606 <USBD_CtlError>
      break;
 8002a98:	e797      	b.n	80029ca <USBD_StdEPReq+0x22>
      if ((ep_addr & 0x7F) != 0x00) 
 8002a9a:	064b      	lsls	r3, r1, #25
 8002a9c:	d100      	bne.n	8002aa0 <USBD_StdEPReq+0xf8>
 8002a9e:	e794      	b.n	80029ca <USBD_StdEPReq+0x22>
        USBD_LL_StallEP(pdev , ep_addr);
 8002aa0:	0028      	movs	r0, r5
 8002aa2:	f000 fcab 	bl	80033fc <USBD_LL_StallEP>
 8002aa6:	e790      	b.n	80029ca <USBD_StdEPReq+0x22>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002aa8:	0603      	lsls	r3, r0, #24
 8002aaa:	d412      	bmi.n	8002ad2 <USBD_StdEPReq+0x12a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8002aac:	247f      	movs	r4, #127	; 0x7f
 8002aae:	400c      	ands	r4, r1
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002ab0:	3410      	adds	r4, #16
 8002ab2:	0124      	lsls	r4, r4, #4
 8002ab4:	192c      	adds	r4, r5, r4
 8002ab6:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002ab8:	0028      	movs	r0, r5
 8002aba:	f000 fcc1 	bl	8003440 <USBD_LL_IsStallEP>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d00e      	beq.n	8002ae0 <USBD_StdEPReq+0x138>
        pep->status = 0x0001;     
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	0021      	movs	r1, r4
 8002aca:	0028      	movs	r0, r5
 8002acc:	f000 f829 	bl	8002b22 <USBD_CtlSendData>
      break;
 8002ad0:	e77b      	b.n	80029ca <USBD_StdEPReq+0x22>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002ad2:	247f      	movs	r4, #127	; 0x7f
 8002ad4:	400c      	ands	r4, r1
 8002ad6:	3401      	adds	r4, #1
 8002ad8:	0124      	lsls	r4, r4, #4
 8002ada:	192c      	adds	r4, r5, r4
 8002adc:	3404      	adds	r4, #4
 8002ade:	e7eb      	b.n	8002ab8 <USBD_StdEPReq+0x110>
        pep->status = 0x0000;  
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	6023      	str	r3, [r4, #0]
 8002ae4:	e7ef      	b.n	8002ac6 <USBD_StdEPReq+0x11e>

08002ae6 <USBD_GetString>:
{
 8002ae6:	b570      	push	{r4, r5, r6, lr}
 8002ae8:	0004      	movs	r4, r0
 8002aea:	000d      	movs	r5, r1
 8002aec:	0016      	movs	r6, r2
  if (desc != NULL) 
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d016      	beq.n	8002b20 <USBD_GetString+0x3a>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002af2:	f7ff fd58 	bl	80025a6 <USBD_GetLen>
 8002af6:	1c43      	adds	r3, r0, #1
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *len;
 8002afe:	702b      	strb	r3, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002b00:	2303      	movs	r3, #3
 8002b02:	706b      	strb	r3, [r5, #1]
 8002b04:	3b01      	subs	r3, #1
    while (*desc != '\0') 
 8002b06:	e008      	b.n	8002b1a <USBD_GetString+0x34>
      unicode[idx++] = *desc++;
 8002b08:	3401      	adds	r4, #1
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0x00;
 8002b10:	3302      	adds	r3, #2
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	18aa      	adds	r2, r5, r2
 8002b16:	2100      	movs	r1, #0
 8002b18:	7011      	strb	r1, [r2, #0]
    while (*desc != '\0') 
 8002b1a:	7820      	ldrb	r0, [r4, #0]
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d1f3      	bne.n	8002b08 <USBD_GetString+0x22>
}
 8002b20:	bd70      	pop	{r4, r5, r6, pc}

08002b22 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002b22:	b510      	push	{r4, lr}
 8002b24:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002b26:	22fa      	movs	r2, #250	; 0xfa
 8002b28:	0052      	lsls	r2, r2, #1
 8002b2a:	2402      	movs	r4, #2
 8002b2c:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
 8002b2e:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8002b30:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002b32:	000a      	movs	r2, r1
 8002b34:	2100      	movs	r1, #0
 8002b36:	f000 fcad 	bl	8003494 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	bd10      	pop	{r4, pc}

08002b3e <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002b3e:	b510      	push	{r4, lr}
 8002b40:	0013      	movs	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002b42:	000a      	movs	r2, r1
 8002b44:	2100      	movs	r1, #0
 8002b46:	f000 fca5 	bl	8003494 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	bd10      	pop	{r4, pc}

08002b4e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002b4e:	b510      	push	{r4, lr}
 8002b50:	0013      	movs	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8002b52:	000a      	movs	r2, r1
 8002b54:	2100      	movs	r1, #0
 8002b56:	f000 fcae 	bl	80034b6 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	bd10      	pop	{r4, pc}

08002b5e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002b5e:	b510      	push	{r4, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002b60:	23fa      	movs	r3, #250	; 0xfa
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	2204      	movs	r2, #4
 8002b66:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	f000 fc91 	bl	8003494 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002b72:	2000      	movs	r0, #0
 8002b74:	bd10      	pop	{r4, pc}

08002b76 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002b76:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002b78:	23fa      	movs	r3, #250	; 0xfa
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2205      	movs	r2, #5
 8002b7e:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002b80:	2300      	movs	r3, #0
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	f000 fc96 	bl	80034b6 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	bd10      	pop	{r4, pc}

08002b8e <NextAveHIDByte.7479>:
	uint8_t hidRelBuffer1[8] = { 1, 0, 0, 0, 0, 0, 0, 0 }; //This is the key release buffer

	int hidAvBytes = 6;

	int NextAveHIDByte(int *c, int s, int e) //Pass Array by ref, then Start and End, (4,8)
	{
 8002b8e:	b510      	push	{r4, lr}
 8002b90:	0003      	movs	r3, r0
		for (int a = 1; a < s; a++) {
 8002b92:	2001      	movs	r0, #1
 8002b94:	4288      	cmp	r0, r1
 8002b96:	da02      	bge.n	8002b9e <NextAveHIDByte.7479+0x10>
			c++;
 8002b98:	3304      	adds	r3, #4
		for (int a = 1; a < s; a++) {
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	e7fa      	b.n	8002b94 <NextAveHIDByte.7479+0x6>
		}
		int r = 0;
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e001      	b.n	8002ba6 <NextAveHIDByte.7479+0x18>
			//printf("%d",*c);
			if (*c == 0) {
				r = l - 1;
				l = 8;
			}
			c++; //lel
 8002ba2:	3304      	adds	r3, #4
		for (int l = s; l < e; l++) {
 8002ba4:	3101      	adds	r1, #1
 8002ba6:	4291      	cmp	r1, r2
 8002ba8:	da05      	bge.n	8002bb6 <NextAveHIDByte.7479+0x28>
			if (*c == 0) {
 8002baa:	681c      	ldr	r4, [r3, #0]
 8002bac:	2c00      	cmp	r4, #0
 8002bae:	d1f8      	bne.n	8002ba2 <NextAveHIDByte.7479+0x14>
				r = l - 1;
 8002bb0:	1e48      	subs	r0, r1, #1
				l = 8;
 8002bb2:	2108      	movs	r1, #8
 8002bb4:	e7f5      	b.n	8002ba2 <NextAveHIDByte.7479+0x14>
		}
		return r;
	}
 8002bb6:	bd10      	pop	{r4, pc}

08002bb8 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bba:	46d6      	mov	lr, sl
 8002bbc:	464f      	mov	r7, r9
 8002bbe:	4646      	mov	r6, r8
 8002bc0:	b5c0      	push	{r6, r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002bc4:	2214      	movs	r2, #20
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	a805      	add	r0, sp, #20
 8002bca:	f000 fd45 	bl	8003658 <memset>

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002bce:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <MX_GPIO_Init+0x118>)
 8002bd0:	6959      	ldr	r1, [r3, #20]
 8002bd2:	2080      	movs	r0, #128	; 0x80
 8002bd4:	0300      	lsls	r0, r0, #12
 8002bd6:	4301      	orrs	r1, r0
 8002bd8:	6159      	str	r1, [r3, #20]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	4002      	ands	r2, r0
 8002bde:	9201      	str	r2, [sp, #4]
 8002be0:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8002be2:	6959      	ldr	r1, [r3, #20]
 8002be4:	2080      	movs	r0, #128	; 0x80
 8002be6:	03c0      	lsls	r0, r0, #15
 8002be8:	4301      	orrs	r1, r0
 8002bea:	6159      	str	r1, [r3, #20]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	4002      	ands	r2, r0
 8002bf0:	9202      	str	r2, [sp, #8]
 8002bf2:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf4:	6959      	ldr	r1, [r3, #20]
 8002bf6:	2080      	movs	r0, #128	; 0x80
 8002bf8:	0280      	lsls	r0, r0, #10
 8002bfa:	4301      	orrs	r1, r0
 8002bfc:	6159      	str	r1, [r3, #20]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	4002      	ands	r2, r0
 8002c02:	9203      	str	r2, [sp, #12]
 8002c04:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	02c9      	lsls	r1, r1, #11
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	615a      	str	r2, [r3, #20]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	400b      	ands	r3, r1
 8002c14:	9304      	str	r3, [sp, #16]
 8002c16:	9b04      	ldr	r3, [sp, #16]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOC, LED7_Pin | LED8_Pin | GPIO4_Pin,
 8002c18:	24e0      	movs	r4, #224	; 0xe0
 8002c1a:	0224      	lsls	r4, r4, #8
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <MX_GPIO_Init+0x11c>)
 8002c1e:	469a      	mov	sl, r3
 8002c20:	2200      	movs	r2, #0
 8002c22:	0021      	movs	r1, r4
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7fd fc70 	bl	800050a <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, STATUS_D1_Pin | D2_Pin, GPIO_PIN_SET);
 8002c2a:	2690      	movs	r6, #144	; 0x90
 8002c2c:	05f6      	lsls	r6, r6, #23
 8002c2e:	2201      	movs	r2, #1
 8002c30:	2103      	movs	r1, #3
 8002c32:	0030      	movs	r0, r6
 8002c34:	f7fd fc69 	bl	800050a <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, GPIO1_Pin | GPIO2_Pin | GPIO3_Pin,
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <MX_GPIO_Init+0x120>)
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	0019      	movs	r1, r3
 8002c40:	0030      	movs	r0, r6
 8002c42:	f7fd fc62 	bl	800050a <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOB,
 8002c46:	23f3      	movs	r3, #243	; 0xf3
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	4698      	mov	r8, r3
 8002c4c:	4f23      	ldr	r7, [pc, #140]	; (8002cdc <MX_GPIO_Init+0x124>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	0019      	movs	r1, r3
 8002c52:	0038      	movs	r0, r7
 8002c54:	f7fd fc59 	bl	800050a <HAL_GPIO_WritePin>
				LED3_Pin | LED4_Pin | LED5_Pin | LED6_Pin | LED1_Pin | LED2_Pin,
				GPIO_PIN_SET);

		/*Configure GPIO pins : LED7_Pin LED8_Pin GPIO4_Pin */
		GPIO_InitStruct.Pin = LED7_Pin | LED8_Pin | GPIO4_Pin;
 8002c58:	9405      	str	r4, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	9506      	str	r5, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2400      	movs	r4, #0
 8002c60:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	9408      	str	r4, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c64:	a905      	add	r1, sp, #20
 8002c66:	4650      	mov	r0, sl
 8002c68:	f7fd fb72 	bl	8000350 <HAL_GPIO_Init>

		/*Configure GPIO pins : STATUS_D1_Pin D2_Pin */
		GPIO_InitStruct.Pin = STATUS_D1_Pin | D2_Pin;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c70:	9506      	str	r5, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c72:	3b01      	subs	r3, #1
 8002c74:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	9408      	str	r4, [sp, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	a905      	add	r1, sp, #20
 8002c7a:	0030      	movs	r0, r6
 8002c7c:	f7fd fb68 	bl	8000350 <HAL_GPIO_Init>

		/*Configure GPIO pins : RevisionBit0_Pin RevisionBit1_Pin RevisionBit2_Pin RevisionBit3_Pin */
		GPIO_InitStruct.Pin = RevisionBit0_Pin | RevisionBit1_Pin
 8002c80:	233c      	movs	r3, #60	; 0x3c
 8002c82:	9305      	str	r3, [sp, #20]
				| RevisionBit2_Pin | RevisionBit3_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c84:	9406      	str	r4, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	9407      	str	r4, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	a905      	add	r1, sp, #20
 8002c8a:	0030      	movs	r0, r6
 8002c8c:	f7fd fb60 	bl	8000350 <HAL_GPIO_Init>

		/*Configure GPIO pins : GPIO1_Pin GPIO2_Pin GPIO3_Pin */
		GPIO_InitStruct.Pin = GPIO1_Pin | GPIO2_Pin | GPIO3_Pin;
 8002c90:	464b      	mov	r3, r9
 8002c92:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c94:	9506      	str	r5, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	9408      	str	r4, [sp, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	a905      	add	r1, sp, #20
 8002c9c:	0030      	movs	r0, r6
 8002c9e:	f7fd fb57 	bl	8000350 <HAL_GPIO_Init>

		/*Configure GPIO pins : Switch1_Pin Switch2_Pin Switch3_Pin Switch4_Pin
		 Switch5_Pin Switch6_Pin Switch7_Pin Switch8_Pin */
		GPIO_InitStruct.Pin = Switch1_Pin | Switch2_Pin | Switch3_Pin
 8002ca2:	23ff      	movs	r3, #255	; 0xff
 8002ca4:	9305      	str	r3, [sp, #20]
				| Switch4_Pin | Switch5_Pin | Switch6_Pin | Switch7_Pin
				| Switch8_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca6:	9406      	str	r4, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca8:	9507      	str	r5, [sp, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002caa:	a905      	add	r1, sp, #20
 8002cac:	0038      	movs	r0, r7
 8002cae:	f7fd fb4f 	bl	8000350 <HAL_GPIO_Init>

		/*Configure GPIO pins : LED3_Pin LED4_Pin LED5_Pin LED6_Pin
		 LED1_Pin LED2_Pin */
		GPIO_InitStruct.Pin = LED3_Pin | LED4_Pin | LED5_Pin | LED6_Pin
 8002cb2:	4643      	mov	r3, r8
 8002cb4:	9305      	str	r3, [sp, #20]
				| LED1_Pin | LED2_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb6:	9506      	str	r5, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	9408      	str	r4, [sp, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbc:	a905      	add	r1, sp, #20
 8002cbe:	0038      	movs	r0, r7
 8002cc0:	f7fd fb46 	bl	8000350 <HAL_GPIO_Init>

	}
 8002cc4:	b00a      	add	sp, #40	; 0x28
 8002cc6:	bce0      	pop	{r5, r6, r7}
 8002cc8:	46ba      	mov	sl, r7
 8002cca:	46b1      	mov	r9, r6
 8002ccc:	46a8      	mov	r8, r5
 8002cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	48000800 	.word	0x48000800
 8002cd8:	000080c0 	.word	0x000080c0
 8002cdc:	48000400 	.word	0x48000400

08002ce0 <MX_USART1_Init>:
	static void MX_USART1_Init(void) {
 8002ce0:	b510      	push	{r4, lr}
		husart1.Instance = USART1;
 8002ce2:	4809      	ldr	r0, [pc, #36]	; (8002d08 <MX_USART1_Init+0x28>)
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <MX_USART1_Init+0x2c>)
 8002ce6:	6003      	str	r3, [r0, #0]
		husart1.Init.BaudRate = 38400;
 8002ce8:	2396      	movs	r3, #150	; 0x96
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	6043      	str	r3, [r0, #4]
		husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	6083      	str	r3, [r0, #8]
		husart1.Init.StopBits = USART_STOPBITS_1;
 8002cf2:	60c3      	str	r3, [r0, #12]
		husart1.Init.Parity = USART_PARITY_NONE;
 8002cf4:	6103      	str	r3, [r0, #16]
		husart1.Init.Mode = USART_MODE_TX_RX;
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	6142      	str	r2, [r0, #20]
		husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8002cfa:	6183      	str	r3, [r0, #24]
		husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8002cfc:	61c3      	str	r3, [r0, #28]
		husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8002cfe:	6203      	str	r3, [r0, #32]
		if (HAL_USART_Init(&husart1) != HAL_OK) {
 8002d00:	f7ff fa16 	bl	8002130 <HAL_USART_Init>
	}
 8002d04:	bd10      	pop	{r4, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	2000026c 	.word	0x2000026c
 8002d0c:	40013800 	.word	0x40013800

08002d10 <MX_I2C2_Init>:
	static void MX_I2C2_Init(void) {
 8002d10:	b510      	push	{r4, lr}
		hi2c2.Instance = I2C2;
 8002d12:	4c0d      	ldr	r4, [pc, #52]	; (8002d48 <MX_I2C2_Init+0x38>)
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <MX_I2C2_Init+0x3c>)
 8002d16:	6023      	str	r3, [r4, #0]
		hi2c2.Init.Timing = 0x20303E5D;
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <MX_I2C2_Init+0x40>)
 8002d1a:	6063      	str	r3, [r4, #4]
		hi2c2.Init.OwnAddress1 = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60a3      	str	r3, [r4, #8]
		hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d20:	2201      	movs	r2, #1
 8002d22:	60e2      	str	r2, [r4, #12]
		hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d24:	6123      	str	r3, [r4, #16]
		hi2c2.Init.OwnAddress2 = 0;
 8002d26:	6163      	str	r3, [r4, #20]
		hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d28:	61a3      	str	r3, [r4, #24]
		hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d2a:	61e3      	str	r3, [r4, #28]
		hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d2c:	6223      	str	r3, [r4, #32]
		if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002d2e:	0020      	movs	r0, r4
 8002d30:	f7fd fbf2 	bl	8000518 <HAL_I2C_Init>
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8002d34:	2100      	movs	r1, #0
 8002d36:	0020      	movs	r0, r4
 8002d38:	f7fd fc54 	bl	80005e4 <HAL_I2CEx_ConfigAnalogFilter>
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	0020      	movs	r0, r4
 8002d40:	f7fd fc7c 	bl	800063c <HAL_I2CEx_ConfigDigitalFilter>
	}
 8002d44:	bd10      	pop	{r4, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	20000220 	.word	0x20000220
 8002d4c:	40005800 	.word	0x40005800
 8002d50:	20303e5d 	.word	0x20303e5d

08002d54 <AltCodeSend.7491>:
	void AltCodeSend(int KP[4]) {
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	0006      	movs	r6, r0
		uint8_t hidWriteBuffer[8] = { 1, 4, 0, 0, 0, 0, 0, 0 }; // This is the key write buffer
 8002d5a:	a904      	add	r1, sp, #16
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <AltCodeSend.7491+0x5c>)
 8002d5e:	001a      	movs	r2, r3
 8002d60:	ca11      	ldmia	r2!, {r0, r4}
 8002d62:	c111      	stmia	r1!, {r0, r4}
		uint8_t hidRelBuffer[8] = { 1, 0, 0, 0, 0, 0, 0, 0 };// This is the key release buffer
 8002d64:	a902      	add	r1, sp, #8
 8002d66:	ca11      	ldmia	r2!, {r0, r4}
 8002d68:	c111      	stmia	r1!, {r0, r4}
		uint8_t hidAltBuffer[8] = { 1, 4, 0, 0, 0, 0, 0, 0 };// This is a buffer to send just alt
 8002d6a:	466a      	mov	r2, sp
 8002d6c:	cb03      	ldmia	r3!, {r0, r1}
 8002d6e:	c203      	stmia	r2!, {r0, r1}
		for (int j = 0; j < 4; j++) {
 8002d70:	2400      	movs	r4, #0
 8002d72:	e014      	b.n	8002d9e <AltCodeSend.7491+0x4a>
			hidWriteBuffer[3] = KP[j];
 8002d74:	00a3      	lsls	r3, r4, #2
 8002d76:	599b      	ldr	r3, [r3, r6]
 8002d78:	a904      	add	r1, sp, #16
 8002d7a:	70cb      	strb	r3, [r1, #3]
			USBD_HID_SendReport(&hUsbDeviceFS, hidWriteBuffer, 8);
 8002d7c:	4d0d      	ldr	r5, [pc, #52]	; (8002db4 <AltCodeSend.7491+0x60>)
 8002d7e:	2208      	movs	r2, #8
 8002d80:	0028      	movs	r0, r5
 8002d82:	f7ff fa9e 	bl	80022c2 <USBD_HID_SendReport>
			HAL_Delay(HID_DELAY);
 8002d86:	200a      	movs	r0, #10
 8002d88:	f7fd fa7a 	bl	8000280 <HAL_Delay>
			USBD_HID_SendReport(&hUsbDeviceFS, hidAltBuffer, 8);
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	4669      	mov	r1, sp
 8002d90:	0028      	movs	r0, r5
 8002d92:	f7ff fa96 	bl	80022c2 <USBD_HID_SendReport>
			HAL_Delay(HID_DELAY);
 8002d96:	200a      	movs	r0, #10
 8002d98:	f7fd fa72 	bl	8000280 <HAL_Delay>
		for (int j = 0; j < 4; j++) {
 8002d9c:	3401      	adds	r4, #1
 8002d9e:	2c03      	cmp	r4, #3
 8002da0:	dde8      	ble.n	8002d74 <AltCodeSend.7491+0x20>
		USBD_HID_SendReport(&hUsbDeviceFS, hidRelBuffer, 8);
 8002da2:	2208      	movs	r2, #8
 8002da4:	a902      	add	r1, sp, #8
 8002da6:	4803      	ldr	r0, [pc, #12]	; (8002db4 <AltCodeSend.7491+0x60>)
 8002da8:	f7ff fa8b 	bl	80022c2 <USBD_HID_SendReport>
	}
 8002dac:	b006      	add	sp, #24
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	080036e0 	.word	0x080036e0
 8002db4:	200002b4 	.word	0x200002b4

08002db8 <SystemClock_Config>:
	void SystemClock_Config(void) {
 8002db8:	b530      	push	{r4, r5, lr}
 8002dba:	b097      	sub	sp, #92	; 0x5c
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002dbc:	2218      	movs	r2, #24
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	a80c      	add	r0, sp, #48	; 0x30
 8002dc2:	f000 fc49 	bl	8003658 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	2100      	movs	r1, #0
 8002dca:	a806      	add	r0, sp, #24
 8002dcc:	f000 fc44 	bl	8003658 <memset>
		RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002dd0:	2214      	movs	r2, #20
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	a801      	add	r0, sp, #4
 8002dd6:	f000 fc3f 	bl	8003658 <memset>
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	930a      	str	r3, [sp, #40]	; 0x28
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dde:	930b      	str	r3, [sp, #44]	; 0x2c
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de0:	2502      	movs	r5, #2
 8002de2:	9512      	str	r5, [sp, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	025b      	lsls	r3, r3, #9
 8002de8:	9313      	str	r3, [sp, #76]	; 0x4c
		RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	035b      	lsls	r3, r3, #13
 8002dee:	9314      	str	r3, [sp, #80]	; 0x50
		RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002df0:	2400      	movs	r4, #0
 8002df2:	9415      	str	r4, [sp, #84]	; 0x54
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002df4:	a80a      	add	r0, sp, #40	; 0x28
 8002df6:	f7fe fd3b 	bl	8001870 <HAL_RCC_OscConfig>
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	9306      	str	r3, [sp, #24]
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dfe:	9507      	str	r5, [sp, #28]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e00:	9408      	str	r4, [sp, #32]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e02:	9409      	str	r4, [sp, #36]	; 0x24
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)
 8002e04:	2101      	movs	r1, #1
 8002e06:	a806      	add	r0, sp, #24
 8002e08:	f7fe ffa2 	bl	8001d50 <HAL_RCC_ClockConfig>
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <SystemClock_Config+0x68>)
 8002e0e:	9301      	str	r3, [sp, #4]
		PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002e10:	9403      	str	r4, [sp, #12]
		PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	9305      	str	r3, [sp, #20]
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002e16:	a801      	add	r0, sp, #4
 8002e18:	f7ff f85c 	bl	8001ed4 <HAL_RCCEx_PeriphCLKConfig>
	}
 8002e1c:	b017      	add	sp, #92	; 0x5c
 8002e1e:	bd30      	pop	{r4, r5, pc}
 8002e20:	00020001 	.word	0x00020001

08002e24 <main>:
int main(void) {
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	b0a2      	sub	sp, #136	; 0x88
	int keyBindArry[8] = { 0x1E, 0x1F, 0x20, 0x21, 41, 35, 80, 79 };
 8002e28:	a91a      	add	r1, sp, #104	; 0x68
 8002e2a:	4c88      	ldr	r4, [pc, #544]	; (800304c <main+0x228>)
 8002e2c:	0023      	movs	r3, r4
 8002e2e:	3310      	adds	r3, #16
 8002e30:	000a      	movs	r2, r1
 8002e32:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002e34:	c223      	stmia	r2!, {r0, r1, r5}
 8002e36:	cb23      	ldmia	r3!, {r0, r1, r5}
 8002e38:	c223      	stmia	r2!, {r0, r1, r5}
 8002e3a:	cb03      	ldmia	r3!, {r0, r1}
 8002e3c:	c203      	stmia	r2!, {r0, r1}
	HAL_Init();
 8002e3e:	f7fd fa01 	bl	8000244 <HAL_Init>
	SystemClock_Config();
 8002e42:	f7ff ffb9 	bl	8002db8 <SystemClock_Config>
	MX_GPIO_Init();
 8002e46:	f7ff feb7 	bl	8002bb8 <MX_GPIO_Init>
	MX_USART1_Init();
 8002e4a:	f7ff ff49 	bl	8002ce0 <MX_USART1_Init>
	MX_I2C2_Init();
 8002e4e:	f7ff ff5f 	bl	8002d10 <MX_I2C2_Init>
	MX_USB_DEVICE_Init();
 8002e52:	f000 f9cb 	bl	80031ec <MX_USB_DEVICE_Init>
	volatile int keyBufferCur[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; //Creating a buffer and previous iter buffer for press and release
 8002e56:	2220      	movs	r2, #32
 8002e58:	2100      	movs	r1, #0
 8002e5a:	a812      	add	r0, sp, #72	; 0x48
 8002e5c:	f000 fbfc 	bl	8003658 <memset>
	int keyBufferPrev[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; //size is due to number of keys
 8002e60:	2220      	movs	r2, #32
 8002e62:	2100      	movs	r1, #0
 8002e64:	a80a      	add	r0, sp, #40	; 0x28
 8002e66:	f000 fbf7 	bl	8003658 <memset>
	uint8_t hidWriteBuffer1[8] = { 1, 0, 0, 0, 0, 0, 0, 0 }; //This is the USB key HID Buffer
 8002e6a:	aa08      	add	r2, sp, #32
 8002e6c:	3408      	adds	r4, #8
 8002e6e:	cc0a      	ldmia	r4!, {r1, r3}
 8002e70:	c20a      	stmia	r2!, {r1, r3}
	HAL_GPIO_WritePin(GPIOA, STATUS_D1_Pin, GPIO_PIN_RESET);
 8002e72:	2490      	movs	r4, #144	; 0x90
 8002e74:	05e4      	lsls	r4, r4, #23
 8002e76:	2200      	movs	r2, #0
 8002e78:	2101      	movs	r1, #1
 8002e7a:	0020      	movs	r0, r4
 8002e7c:	f7fd fb45 	bl	800050a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D2_Pin, GPIO_PIN_RESET);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2102      	movs	r1, #2
 8002e84:	0020      	movs	r0, r4
 8002e86:	f7fd fb40 	bl	800050a <HAL_GPIO_WritePin>
 8002e8a:	e013      	b.n	8002eb4 <main+0x90>
			CurrPresSum += keyBufferCur[j] = (1 ^ Key_Val2[j]); //HAL reads active low, like a maniac. This is my method for flipping the bit from HAL, packing a buffer and summing it. Yuck.
 8002e8c:	008a      	lsls	r2, r1, #2
 8002e8e:	466b      	mov	r3, sp
 8002e90:	58d3      	ldr	r3, [r2, r3]
 8002e92:	2001      	movs	r0, #1
 8002e94:	4043      	eors	r3, r0
 8002e96:	a812      	add	r0, sp, #72	; 0x48
 8002e98:	5013      	str	r3, [r2, r0]
 8002e9a:	18ed      	adds	r5, r5, r3
			PrevPresSum += (keyBufferCur[j] != keyBufferPrev[j]); //This checks for a press to release transition between loops
 8002e9c:	5813      	ldr	r3, [r2, r0]
 8002e9e:	a80a      	add	r0, sp, #40	; 0x28
 8002ea0:	5812      	ldr	r2, [r2, r0]
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	1e5a      	subs	r2, r3, #1
 8002ea6:	4193      	sbcs	r3, r2
 8002ea8:	18e4      	adds	r4, r4, r3
		for (int j = 0; j < 8; j++) {
 8002eaa:	3101      	adds	r1, #1
 8002eac:	2907      	cmp	r1, #7
 8002eae:	dded      	ble.n	8002e8c <main+0x68>
		if (CurrPresSum != 0 || PrevPresSum != 0) {
 8002eb0:	432c      	orrs	r4, r5
 8002eb2:	d163      	bne.n	8002f7c <main+0x158>
		int Key_Val2[8] = { (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)),
 8002eb4:	4c66      	ldr	r4, [pc, #408]	; (8003050 <main+0x22c>)
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	0020      	movs	r0, r4
 8002eba:	f7fd fb1f 	bl	80004fc <HAL_GPIO_ReadPin>
 8002ebe:	9000      	str	r0, [sp, #0]
				(HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin)),
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	0020      	movs	r0, r4
 8002ec4:	f7fd fb1a 	bl	80004fc <HAL_GPIO_ReadPin>
		int Key_Val2[8] = { (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)),
 8002ec8:	9001      	str	r0, [sp, #4]
				(HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin)),
 8002eca:	2104      	movs	r1, #4
 8002ecc:	0020      	movs	r0, r4
 8002ece:	f7fd fb15 	bl	80004fc <HAL_GPIO_ReadPin>
		int Key_Val2[8] = { (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)),
 8002ed2:	9002      	str	r0, [sp, #8]
				(HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin)),
 8002ed4:	2108      	movs	r1, #8
 8002ed6:	0020      	movs	r0, r4
 8002ed8:	f7fd fb10 	bl	80004fc <HAL_GPIO_ReadPin>
		int Key_Val2[8] = { (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)),
 8002edc:	9003      	str	r0, [sp, #12]
				(HAL_GPIO_ReadPin(Switch5_GPIO_Port, Switch5_Pin)),
 8002ede:	2110      	movs	r1, #16
 8002ee0:	0020      	movs	r0, r4
 8002ee2:	f7fd fb0b 	bl	80004fc <HAL_GPIO_ReadPin>
		int Key_Val2[8] = { (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)),
 8002ee6:	9004      	str	r0, [sp, #16]
				(HAL_GPIO_ReadPin(Switch6_GPIO_Port, Switch6_Pin)),
 8002ee8:	2120      	movs	r1, #32
 8002eea:	0020      	movs	r0, r4
 8002eec:	f7fd fb06 	bl	80004fc <HAL_GPIO_ReadPin>
		int Key_Val2[8] = { (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)),
 8002ef0:	9005      	str	r0, [sp, #20]
				(HAL_GPIO_ReadPin(Switch7_GPIO_Port, Switch7_Pin)),
 8002ef2:	2140      	movs	r1, #64	; 0x40
 8002ef4:	0020      	movs	r0, r4
 8002ef6:	f7fd fb01 	bl	80004fc <HAL_GPIO_ReadPin>
		int Key_Val2[8] = { (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)),
 8002efa:	9006      	str	r0, [sp, #24]
				(HAL_GPIO_ReadPin(Switch8_GPIO_Port, Switch8_Pin)) };
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	0020      	movs	r0, r4
 8002f00:	f7fd fafc 	bl	80004fc <HAL_GPIO_ReadPin>
		int Key_Val2[8] = { (HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)),
 8002f04:	9007      	str	r0, [sp, #28]
		for (int j = 0; j < 8; j++) {
 8002f06:	2100      	movs	r1, #0
		int CurrPresSum = 0; //Formerly g
 8002f08:	2500      	movs	r5, #0
		int PrevPresSum = 0; //Formerly k
 8002f0a:	2400      	movs	r4, #0
		for (int j = 0; j < 8; j++) {
 8002f0c:	e7ce      	b.n	8002eac <main+0x88>
				if (keyBufferCur[w] == 1 && keyBufferPrev[w] == 0) {
 8002f0e:	00a3      	lsls	r3, r4, #2
 8002f10:	aa0a      	add	r2, sp, #40	; 0x28
 8002f12:	589b      	ldr	r3, [r3, r2]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d125      	bne.n	8002f64 <main+0x140>
							keyBindArry[w];
 8002f18:	00a3      	lsls	r3, r4, #2
 8002f1a:	aa1a      	add	r2, sp, #104	; 0x68
 8002f1c:	589e      	ldr	r6, [r3, r2]
					hidWriteBuffer1[NextAveHIDByte(hidWriteBuffer1, 4, 8)] =
 8002f1e:	ad08      	add	r5, sp, #32
 8002f20:	2208      	movs	r2, #8
 8002f22:	2104      	movs	r1, #4
 8002f24:	0028      	movs	r0, r5
 8002f26:	f7ff fe32 	bl	8002b8e <NextAveHIDByte.7479>
 8002f2a:	542e      	strb	r6, [r5, r0]
 8002f2c:	e01a      	b.n	8002f64 <main+0x140>
					for (int q = 4; q < 8; q++) //To send a release, I need to send a 0 rather than the prev byte
 8002f2e:	3501      	adds	r5, #1
 8002f30:	2d07      	cmp	r5, #7
 8002f32:	dc0f      	bgt.n	8002f54 <main+0x130>
						if (hidWriteBuffer1[q] == keyBindArry[w]) //and because of the way I structured it
 8002f34:	ab08      	add	r3, sp, #32
 8002f36:	5d5a      	ldrb	r2, [r3, r5]
 8002f38:	00a3      	lsls	r3, r4, #2
 8002f3a:	a91a      	add	r1, sp, #104	; 0x68
 8002f3c:	585b      	ldr	r3, [r3, r1]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d1f5      	bne.n	8002f2e <main+0x10a>
							hidWriteBuffer1[q] = 0; //That previous byte is hiding
 8002f42:	ab08      	add	r3, sp, #32
 8002f44:	2200      	movs	r2, #0
 8002f46:	555a      	strb	r2, [r3, r5]
							HAL_GPIO_WritePin(GPIOA, STATUS_D1_Pin,
 8002f48:	2090      	movs	r0, #144	; 0x90
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	05c0      	lsls	r0, r0, #23
 8002f4e:	f7fd fadc 	bl	800050a <HAL_GPIO_WritePin>
 8002f52:	e7ec      	b.n	8002f2e <main+0x10a>
			for (int w = 0; w < 8; w++) {
 8002f54:	3401      	adds	r4, #1
 8002f56:	2c07      	cmp	r4, #7
 8002f58:	dc12      	bgt.n	8002f80 <main+0x15c>
				if (keyBufferCur[w] == 1 && keyBufferPrev[w] == 0) {
 8002f5a:	00a3      	lsls	r3, r4, #2
 8002f5c:	aa12      	add	r2, sp, #72	; 0x48
 8002f5e:	589b      	ldr	r3, [r3, r2]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d0d4      	beq.n	8002f0e <main+0xea>
				if (keyBufferCur[w] == 0 && keyBufferPrev[w] == 1) //I kind of wrote myself in a corner
 8002f64:	00a3      	lsls	r3, r4, #2
 8002f66:	aa12      	add	r2, sp, #72	; 0x48
 8002f68:	589b      	ldr	r3, [r3, r2]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f2      	bne.n	8002f54 <main+0x130>
 8002f6e:	00a3      	lsls	r3, r4, #2
 8002f70:	aa0a      	add	r2, sp, #40	; 0x28
 8002f72:	589b      	ldr	r3, [r3, r2]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d1ed      	bne.n	8002f54 <main+0x130>
					for (int q = 4; q < 8; q++) //To send a release, I need to send a 0 rather than the prev byte
 8002f78:	2504      	movs	r5, #4
 8002f7a:	e7d9      	b.n	8002f30 <main+0x10c>
			for (int w = 0; w < 8; w++) {
 8002f7c:	2400      	movs	r4, #0
 8002f7e:	e7ea      	b.n	8002f56 <main+0x132>
			if (keyBufferCur[0] == 1 && keyBufferPrev[0] == 0) {
 8002f80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d016      	beq.n	8002fb4 <main+0x190>
			if (keyBufferCur[1] == 1 && keyBufferPrev[1] == 0) {
 8002f86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d01a      	beq.n	8002fc2 <main+0x19e>
			if (keyBufferCur[2] == 1 && keyBufferPrev[2] == 0) {
 8002f8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d01f      	beq.n	8002fd2 <main+0x1ae>
			if (keyBufferCur[3] == 1 && keyBufferPrev[3] == 0) {
 8002f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d024      	beq.n	8002fe2 <main+0x1be>
			if (keyBufferCur[4] == 1 && keyBufferPrev[4] == 0) {
 8002f98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d029      	beq.n	8002ff2 <main+0x1ce>
			if (keyBufferCur[5] == 1 && keyBufferPrev[5] == 0) {
 8002f9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d02e      	beq.n	8003002 <main+0x1de>
			if (keyBufferCur[6] == 1 && keyBufferPrev[6] == 0) {
 8002fa4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d033      	beq.n	8003012 <main+0x1ee>
			if (keyBufferCur[7] == 1 && keyBufferPrev[7] == 0) {
 8002faa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d038      	beq.n	8003022 <main+0x1fe>
			for (int w = 0; w < 8; w++) {
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e044      	b.n	800303e <main+0x21a>
			if (keyBufferCur[0] == 1 && keyBufferPrev[0] == 0) {
 8002fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e5      	bne.n	8002f86 <main+0x162>
				AltCodeSend(MinAUm);
 8002fba:	4826      	ldr	r0, [pc, #152]	; (8003054 <main+0x230>)
 8002fbc:	f7ff feca 	bl	8002d54 <AltCodeSend.7491>
 8002fc0:	e7e1      	b.n	8002f86 <main+0x162>
			if (keyBufferCur[1] == 1 && keyBufferPrev[1] == 0) {
 8002fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e1      	bne.n	8002f8c <main+0x168>
				AltCodeSend(MinOUm);
 8002fc8:	4822      	ldr	r0, [pc, #136]	; (8003054 <main+0x230>)
 8002fca:	3010      	adds	r0, #16
 8002fcc:	f7ff fec2 	bl	8002d54 <AltCodeSend.7491>
 8002fd0:	e7dc      	b.n	8002f8c <main+0x168>
			if (keyBufferCur[2] == 1 && keyBufferPrev[2] == 0) {
 8002fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1dc      	bne.n	8002f92 <main+0x16e>
				AltCodeSend(MinUUm);
 8002fd8:	481e      	ldr	r0, [pc, #120]	; (8003054 <main+0x230>)
 8002fda:	3020      	adds	r0, #32
 8002fdc:	f7ff feba 	bl	8002d54 <AltCodeSend.7491>
 8002fe0:	e7d7      	b.n	8002f92 <main+0x16e>
			if (keyBufferCur[3] == 1 && keyBufferPrev[3] == 0) {
 8002fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1d7      	bne.n	8002f98 <main+0x174>
				AltCodeSend(SharfS);
 8002fe8:	481a      	ldr	r0, [pc, #104]	; (8003054 <main+0x230>)
 8002fea:	3030      	adds	r0, #48	; 0x30
 8002fec:	f7ff feb2 	bl	8002d54 <AltCodeSend.7491>
 8002ff0:	e7d2      	b.n	8002f98 <main+0x174>
			if (keyBufferCur[4] == 1 && keyBufferPrev[4] == 0) {
 8002ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1d2      	bne.n	8002f9e <main+0x17a>
				AltCodeSend(MajAUm);
 8002ff8:	4816      	ldr	r0, [pc, #88]	; (8003054 <main+0x230>)
 8002ffa:	3040      	adds	r0, #64	; 0x40
 8002ffc:	f7ff feaa 	bl	8002d54 <AltCodeSend.7491>
 8003000:	e7cd      	b.n	8002f9e <main+0x17a>
			if (keyBufferCur[5] == 1 && keyBufferPrev[5] == 0) {
 8003002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1cd      	bne.n	8002fa4 <main+0x180>
				AltCodeSend(MajOUm);
 8003008:	4812      	ldr	r0, [pc, #72]	; (8003054 <main+0x230>)
 800300a:	3050      	adds	r0, #80	; 0x50
 800300c:	f7ff fea2 	bl	8002d54 <AltCodeSend.7491>
 8003010:	e7c8      	b.n	8002fa4 <main+0x180>
			if (keyBufferCur[6] == 1 && keyBufferPrev[6] == 0) {
 8003012:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1c8      	bne.n	8002faa <main+0x186>
				AltCodeSend(MajUUm);
 8003018:	480e      	ldr	r0, [pc, #56]	; (8003054 <main+0x230>)
 800301a:	3060      	adds	r0, #96	; 0x60
 800301c:	f7ff fe9a 	bl	8002d54 <AltCodeSend.7491>
 8003020:	e7c3      	b.n	8002faa <main+0x186>
			if (keyBufferCur[7] == 1 && keyBufferPrev[7] == 0) {
 8003022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1c3      	bne.n	8002fb0 <main+0x18c>
				AltCodeSend(EuroSg);
 8003028:	480a      	ldr	r0, [pc, #40]	; (8003054 <main+0x230>)
 800302a:	3070      	adds	r0, #112	; 0x70
 800302c:	f7ff fe92 	bl	8002d54 <AltCodeSend.7491>
 8003030:	e7be      	b.n	8002fb0 <main+0x18c>
				(keyBufferPrev[v] = keyBufferCur[v]);
 8003032:	009a      	lsls	r2, r3, #2
 8003034:	a912      	add	r1, sp, #72	; 0x48
 8003036:	5850      	ldr	r0, [r2, r1]
 8003038:	a90a      	add	r1, sp, #40	; 0x28
 800303a:	5050      	str	r0, [r2, r1]
			for (int v = 0; v < 8; v++) {
 800303c:	3301      	adds	r3, #1
 800303e:	2b07      	cmp	r3, #7
 8003040:	ddf7      	ble.n	8003032 <main+0x20e>
			HAL_Delay(20);
 8003042:	2014      	movs	r0, #20
 8003044:	f7fd f91c 	bl	8000280 <HAL_Delay>
	while (1) {
 8003048:	e734      	b.n	8002eb4 <main+0x90>
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	080036e0 	.word	0x080036e0
 8003050:	48000400 	.word	0x48000400
 8003054:	20000130 	.word	0x20000130

08003058 <Error_Handler>:
	void Error_Handler(void) {
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

		/* USER CODE END Error_Handler_Debug */
	}
 8003058:	4770      	bx	lr
	...

0800305c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800305c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <HAL_MspInit+0x2c>)
 8003060:	6999      	ldr	r1, [r3, #24]
 8003062:	2201      	movs	r2, #1
 8003064:	4311      	orrs	r1, r2
 8003066:	6199      	str	r1, [r3, #24]
 8003068:	6999      	ldr	r1, [r3, #24]
 800306a:	400a      	ands	r2, r1
 800306c:	9200      	str	r2, [sp, #0]
 800306e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	0549      	lsls	r1, r1, #21
 8003076:	430a      	orrs	r2, r1
 8003078:	61da      	str	r2, [r3, #28]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	400b      	ands	r3, r1
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003082:	b002      	add	sp, #8
 8003084:	4770      	bx	lr
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	40021000 	.word	0x40021000

0800308c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800308c:	b510      	push	{r4, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003092:	2214      	movs	r2, #20
 8003094:	2100      	movs	r1, #0
 8003096:	a803      	add	r0, sp, #12
 8003098:	f000 fade 	bl	8003658 <memset>
  if(hi2c->Instance==I2C2)
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <HAL_I2C_MspInit+0x60>)
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80030a4:	b008      	add	sp, #32
 80030a6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a8:	4c11      	ldr	r4, [pc, #68]	; (80030f0 <HAL_I2C_MspInit+0x64>)
 80030aa:	6962      	ldr	r2, [r4, #20]
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	02c9      	lsls	r1, r1, #11
 80030b0:	430a      	orrs	r2, r1
 80030b2:	6162      	str	r2, [r4, #20]
 80030b4:	6963      	ldr	r3, [r4, #20]
 80030b6:	400b      	ands	r3, r1
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030bc:	23c0      	movs	r3, #192	; 0xc0
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030c2:	2312      	movs	r3, #18
 80030c4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c6:	3b11      	subs	r3, #17
 80030c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ca:	2203      	movs	r2, #3
 80030cc:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80030ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d0:	a903      	add	r1, sp, #12
 80030d2:	4808      	ldr	r0, [pc, #32]	; (80030f4 <HAL_I2C_MspInit+0x68>)
 80030d4:	f7fd f93c 	bl	8000350 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80030d8:	69e2      	ldr	r2, [r4, #28]
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	03c9      	lsls	r1, r1, #15
 80030de:	430a      	orrs	r2, r1
 80030e0:	61e2      	str	r2, [r4, #28]
 80030e2:	69e3      	ldr	r3, [r4, #28]
 80030e4:	400b      	ands	r3, r1
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	9b02      	ldr	r3, [sp, #8]
}
 80030ea:	e7db      	b.n	80030a4 <HAL_I2C_MspInit+0x18>
 80030ec:	40005800 	.word	0x40005800
 80030f0:	40021000 	.word	0x40021000
 80030f4:	48000400 	.word	0x48000400

080030f8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80030f8:	b510      	push	{r4, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fe:	2214      	movs	r2, #20
 8003100:	2100      	movs	r1, #0
 8003102:	a803      	add	r0, sp, #12
 8003104:	f000 faa8 	bl	8003658 <memset>
  if(husart->Instance==USART1)
 8003108:	6822      	ldr	r2, [r4, #0]
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_USART_MspInit+0x64>)
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_USART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003110:	b008      	add	sp, #32
 8003112:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_USART_MspInit+0x68>)
 8003116:	6999      	ldr	r1, [r3, #24]
 8003118:	2080      	movs	r0, #128	; 0x80
 800311a:	01c0      	lsls	r0, r0, #7
 800311c:	4301      	orrs	r1, r0
 800311e:	6199      	str	r1, [r3, #24]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	4002      	ands	r2, r0
 8003124:	9201      	str	r2, [sp, #4]
 8003126:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	0289      	lsls	r1, r1, #10
 800312e:	430a      	orrs	r2, r1
 8003130:	615a      	str	r2, [r3, #20]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	400b      	ands	r3, r1
 8003136:	9302      	str	r3, [sp, #8]
 8003138:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800313a:	23e0      	movs	r3, #224	; 0xe0
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003148:	3303      	adds	r3, #3
 800314a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800314c:	3b02      	subs	r3, #2
 800314e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	2090      	movs	r0, #144	; 0x90
 8003152:	a903      	add	r1, sp, #12
 8003154:	05c0      	lsls	r0, r0, #23
 8003156:	f7fd f8fb 	bl	8000350 <HAL_GPIO_Init>
}
 800315a:	e7d9      	b.n	8003110 <HAL_USART_MspInit+0x18>
 800315c:	40013800 	.word	0x40013800
 8003160:	40021000 	.word	0x40021000

08003164 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003164:	4770      	bx	lr

08003166 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003166:	e7fe      	b.n	8003166 <HardFault_Handler>

08003168 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003168:	4770      	bx	lr

0800316a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800316a:	4770      	bx	lr

0800316c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800316c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316e:	f7fd f879 	bl	8000264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003172:	bd10      	pop	{r4, pc}

08003174 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8003174:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003176:	4802      	ldr	r0, [pc, #8]	; (8003180 <USB_IRQHandler+0xc>)
 8003178:	f7fe facc 	bl	8001714 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800317c:	bd10      	pop	{r4, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	200004d8 	.word	0x200004d8

08003184 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <SystemInit+0x50>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2101      	movs	r1, #1
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4811      	ldr	r0, [pc, #68]	; (80031d8 <SystemInit+0x54>)
 8003192:	4002      	ands	r2, r0
 8003194:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4810      	ldr	r0, [pc, #64]	; (80031dc <SystemInit+0x58>)
 800319a:	4002      	ands	r2, r0
 800319c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	480f      	ldr	r0, [pc, #60]	; (80031e0 <SystemInit+0x5c>)
 80031a2:	4002      	ands	r2, r0
 80031a4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	480e      	ldr	r0, [pc, #56]	; (80031e4 <SystemInit+0x60>)
 80031aa:	4002      	ands	r2, r0
 80031ac:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	200f      	movs	r0, #15
 80031b2:	4382      	bics	r2, r0
 80031b4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
  /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 80031b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b8:	480b      	ldr	r0, [pc, #44]	; (80031e8 <SystemInit+0x64>)
 80031ba:	4002      	ands	r2, r0
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set default USB clock to PLLCLK, since there is no HSI48 */
  RCC->CFGR3 |= (uint32_t)0x00000080U;  
 80031be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c0:	2080      	movs	r0, #128	; 0x80
 80031c2:	4302      	orrs	r2, r0
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80031c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c8:	438a      	bics	r2, r1
 80031ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]

}
 80031d0:	4770      	bx	lr
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40021000 	.word	0x40021000
 80031d8:	08ffb80c 	.word	0x08ffb80c
 80031dc:	fef6ffff 	.word	0xfef6ffff
 80031e0:	fffbffff 	.word	0xfffbffff
 80031e4:	ffc0ffff 	.word	0xffc0ffff
 80031e8:	fffffe6c 	.word	0xfffffe6c

080031ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80031ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80031ee:	4c07      	ldr	r4, [pc, #28]	; (800320c <MX_USB_DEVICE_Init+0x20>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	4907      	ldr	r1, [pc, #28]	; (8003210 <MX_USB_DEVICE_Init+0x24>)
 80031f4:	0020      	movs	r0, r4
 80031f6:	f7ff f879 	bl	80022ec <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 80031fa:	4906      	ldr	r1, [pc, #24]	; (8003214 <MX_USB_DEVICE_Init+0x28>)
 80031fc:	0020      	movs	r0, r4
 80031fe:	f7ff f891 	bl	8002324 <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 8003202:	0020      	movs	r0, r4
 8003204:	f7ff f897 	bl	8002336 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003208:	bd10      	pop	{r4, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	200002b4 	.word	0x200002b4
 8003210:	200001cc 	.word	0x200001cc
 8003214:	200000f8 	.word	0x200000f8

08003218 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8003218:	b510      	push	{r4, lr}
  SystemClock_Config();
 800321a:	f7ff fdcd 	bl	8002db8 <SystemClock_Config>
}
 800321e:	bd10      	pop	{r4, pc}

08003220 <HAL_PCD_MspInit>:
{
 8003220:	b500      	push	{lr}
 8003222:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 8003224:	6802      	ldr	r2, [r0, #0]
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_PCD_MspInit+0x38>)
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_PCD_MspInit+0x10>
}
 800322c:	b003      	add	sp, #12
 800322e:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_PCD_MspInit+0x3c>)
 8003232:	69d1      	ldr	r1, [r2, #28]
 8003234:	2080      	movs	r0, #128	; 0x80
 8003236:	0400      	lsls	r0, r0, #16
 8003238:	4301      	orrs	r1, r0
 800323a:	61d1      	str	r1, [r2, #28]
 800323c:	69d3      	ldr	r3, [r2, #28]
 800323e:	4003      	ands	r3, r0
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003244:	2200      	movs	r2, #0
 8003246:	2100      	movs	r1, #0
 8003248:	201f      	movs	r0, #31
 800324a:	f7fd f82b 	bl	80002a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800324e:	201f      	movs	r0, #31
 8003250:	f7fd f858 	bl	8000304 <HAL_NVIC_EnableIRQ>
}
 8003254:	e7ea      	b.n	800322c <HAL_PCD_MspInit+0xc>
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	40005c00 	.word	0x40005c00
 800325c:	40021000 	.word	0x40021000

08003260 <HAL_PCD_SetupStageCallback>:
{
 8003260:	b510      	push	{r4, lr}
 8003262:	0001      	movs	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003264:	2387      	movs	r3, #135	; 0x87
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	58c0      	ldr	r0, [r0, r3]
 800326a:	31ed      	adds	r1, #237	; 0xed
 800326c:	31ff      	adds	r1, #255	; 0xff
 800326e:	f7ff f87f 	bl	8002370 <USBD_LL_SetupStage>
}
 8003272:	bd10      	pop	{r4, pc}

08003274 <HAL_PCD_DataOutStageCallback>:
{
 8003274:	b510      	push	{r4, lr}
 8003276:	0003      	movs	r3, r0
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003278:	2287      	movs	r2, #135	; 0x87
 800327a:	0092      	lsls	r2, r2, #2
 800327c:	5880      	ldr	r0, [r0, r2]
 800327e:	00ca      	lsls	r2, r1, #3
 8003280:	1a52      	subs	r2, r2, r1
 8003282:	0092      	lsls	r2, r2, #2
 8003284:	189b      	adds	r3, r3, r2
 8003286:	3319      	adds	r3, #25
 8003288:	33ff      	adds	r3, #255	; 0xff
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	f7ff f8a4 	bl	80023d8 <USBD_LL_DataOutStage>
}
 8003290:	bd10      	pop	{r4, pc}

08003292 <HAL_PCD_DataInStageCallback>:
{
 8003292:	b510      	push	{r4, lr}
 8003294:	0003      	movs	r3, r0
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003296:	2287      	movs	r2, #135	; 0x87
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	5880      	ldr	r0, [r0, r2]
 800329c:	00ca      	lsls	r2, r1, #3
 800329e:	1a52      	subs	r2, r2, r1
 80032a0:	0092      	lsls	r2, r2, #2
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a6:	f7ff f8d4 	bl	8002452 <USBD_LL_DataInStage>
}
 80032aa:	bd10      	pop	{r4, pc}

080032ac <HAL_PCD_SOFCallback>:
{
 80032ac:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80032ae:	2387      	movs	r3, #135	; 0x87
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	58c0      	ldr	r0, [r0, r3]
 80032b4:	f7ff f967 	bl	8002586 <USBD_LL_SOF>
}
 80032b8:	bd10      	pop	{r4, pc}

080032ba <HAL_PCD_ResetCallback>:
{ 
 80032ba:	b570      	push	{r4, r5, r6, lr}
 80032bc:	0004      	movs	r4, r0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80032be:	2587      	movs	r5, #135	; 0x87
 80032c0:	00ad      	lsls	r5, r5, #2
 80032c2:	2101      	movs	r1, #1
 80032c4:	5940      	ldr	r0, [r0, r5]
 80032c6:	f7ff f949 	bl	800255c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80032ca:	5960      	ldr	r0, [r4, r5]
 80032cc:	f7ff f923 	bl	8002516 <USBD_LL_Reset>
}
 80032d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080032d4 <HAL_PCD_SuspendCallback>:
{
 80032d4:	b510      	push	{r4, lr}
 80032d6:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80032d8:	2387      	movs	r3, #135	; 0x87
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	58c0      	ldr	r0, [r0, r3]
 80032de:	f7ff f940 	bl	8002562 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80032e2:	69a3      	ldr	r3, [r4, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80032e8:	4a02      	ldr	r2, [pc, #8]	; (80032f4 <HAL_PCD_SuspendCallback+0x20>)
 80032ea:	6913      	ldr	r3, [r2, #16]
 80032ec:	2106      	movs	r1, #6
 80032ee:	430b      	orrs	r3, r1
 80032f0:	6113      	str	r3, [r2, #16]
}
 80032f2:	bd10      	pop	{r4, pc}
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <HAL_PCD_ResumeCallback>:
{
 80032f8:	b510      	push	{r4, lr}
 80032fa:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80032fc:	6983      	ldr	r3, [r0, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d105      	bne.n	800330e <HAL_PCD_ResumeCallback+0x16>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003302:	2387      	movs	r3, #135	; 0x87
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	58e0      	ldr	r0, [r4, r3]
 8003308:	f7ff f936 	bl	8002578 <USBD_LL_Resume>
}
 800330c:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <HAL_PCD_ResumeCallback+0x28>)
 8003310:	6913      	ldr	r3, [r2, #16]
 8003312:	2106      	movs	r1, #6
 8003314:	438b      	bics	r3, r1
 8003316:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8003318:	f7ff ff7e 	bl	8003218 <SystemClockConfig_Resume>
 800331c:	e7f1      	b.n	8003302 <HAL_PCD_ResumeCallback+0xa>
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <USBD_LL_Init>:
{
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003328:	4817      	ldr	r0, [pc, #92]	; (8003388 <USBD_LL_Init+0x64>)
 800332a:	2387      	movs	r3, #135	; 0x87
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 8003330:	3304      	adds	r3, #4
 8003332:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 8003334:	4b15      	ldr	r3, [pc, #84]	; (800338c <USBD_LL_Init+0x68>)
 8003336:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003338:	2308      	movs	r3, #8
 800333a:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800333c:	2202      	movs	r2, #2
 800333e:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003340:	2300      	movs	r3, #0
 8003342:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003344:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003346:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003348:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800334a:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800334c:	f7fd f9a0 	bl	8000690 <HAL_PCD_Init>
 8003350:	2800      	cmp	r0, #0
 8003352:	d116      	bne.n	8003382 <USBD_LL_Init+0x5e>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003354:	2588      	movs	r5, #136	; 0x88
 8003356:	00ad      	lsls	r5, r5, #2
 8003358:	2318      	movs	r3, #24
 800335a:	2200      	movs	r2, #0
 800335c:	2100      	movs	r1, #0
 800335e:	5960      	ldr	r0, [r4, r5]
 8003360:	f7fe fa68 	bl	8001834 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003364:	2358      	movs	r3, #88	; 0x58
 8003366:	2200      	movs	r2, #0
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	5960      	ldr	r0, [r4, r5]
 800336c:	f7fe fa62 	bl	8001834 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8003370:	5960      	ldr	r0, [r4, r5]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2200      	movs	r2, #0
 8003378:	2181      	movs	r1, #129	; 0x81
 800337a:	f7fe fa5b 	bl	8001834 <HAL_PCDEx_PMAConfig>
}
 800337e:	2000      	movs	r0, #0
 8003380:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8003382:	f7ff fe69 	bl	8003058 <Error_Handler>
 8003386:	e7e5      	b.n	8003354 <USBD_LL_Init+0x30>
 8003388:	200004d8 	.word	0x200004d8
 800338c:	40005c00 	.word	0x40005c00

08003390 <USBD_LL_Start>:
{
 8003390:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003392:	2388      	movs	r3, #136	; 0x88
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	58c0      	ldr	r0, [r0, r3]
 8003398:	f7fd f9da 	bl	8000750 <HAL_PCD_Start>
  switch (hal_status) {
 800339c:	2802      	cmp	r0, #2
 800339e:	d004      	beq.n	80033aa <USBD_LL_Start+0x1a>
 80033a0:	d805      	bhi.n	80033ae <USBD_LL_Start+0x1e>
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d000      	beq.n	80033a8 <USBD_LL_Start+0x18>
      usb_status = USBD_FAIL;
 80033a6:	2002      	movs	r0, #2
}
 80033a8:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 80033aa:	2001      	movs	r0, #1
 80033ac:	e7fc      	b.n	80033a8 <USBD_LL_Start+0x18>
      usb_status = USBD_FAIL;
 80033ae:	2002      	movs	r0, #2
 80033b0:	e7fa      	b.n	80033a8 <USBD_LL_Start+0x18>

080033b2 <USBD_LL_OpenEP>:
{
 80033b2:	b510      	push	{r4, lr}
 80033b4:	0014      	movs	r4, r2
 80033b6:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80033b8:	2388      	movs	r3, #136	; 0x88
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	58c0      	ldr	r0, [r0, r3]
 80033be:	0023      	movs	r3, r4
 80033c0:	f7fd f9ee 	bl	80007a0 <HAL_PCD_EP_Open>
  switch (hal_status) {
 80033c4:	2802      	cmp	r0, #2
 80033c6:	d004      	beq.n	80033d2 <USBD_LL_OpenEP+0x20>
 80033c8:	d805      	bhi.n	80033d6 <USBD_LL_OpenEP+0x24>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d000      	beq.n	80033d0 <USBD_LL_OpenEP+0x1e>
      usb_status = USBD_FAIL;
 80033ce:	2002      	movs	r0, #2
}
 80033d0:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 80033d2:	2001      	movs	r0, #1
 80033d4:	e7fc      	b.n	80033d0 <USBD_LL_OpenEP+0x1e>
      usb_status = USBD_FAIL;
 80033d6:	2002      	movs	r0, #2
 80033d8:	e7fa      	b.n	80033d0 <USBD_LL_OpenEP+0x1e>

080033da <USBD_LL_CloseEP>:
{
 80033da:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80033dc:	2388      	movs	r3, #136	; 0x88
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	58c0      	ldr	r0, [r0, r3]
 80033e2:	f7fd fb63 	bl	8000aac <HAL_PCD_EP_Close>
  switch (hal_status) {
 80033e6:	2802      	cmp	r0, #2
 80033e8:	d004      	beq.n	80033f4 <USBD_LL_CloseEP+0x1a>
 80033ea:	d805      	bhi.n	80033f8 <USBD_LL_CloseEP+0x1e>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d000      	beq.n	80033f2 <USBD_LL_CloseEP+0x18>
      usb_status = USBD_FAIL;
 80033f0:	2002      	movs	r0, #2
}
 80033f2:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 80033f4:	2001      	movs	r0, #1
 80033f6:	e7fc      	b.n	80033f2 <USBD_LL_CloseEP+0x18>
      usb_status = USBD_FAIL;
 80033f8:	2002      	movs	r0, #2
 80033fa:	e7fa      	b.n	80033f2 <USBD_LL_CloseEP+0x18>

080033fc <USBD_LL_StallEP>:
{
 80033fc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80033fe:	2388      	movs	r3, #136	; 0x88
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	58c0      	ldr	r0, [r0, r3]
 8003404:	f7fd fd2a 	bl	8000e5c <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8003408:	2802      	cmp	r0, #2
 800340a:	d004      	beq.n	8003416 <USBD_LL_StallEP+0x1a>
 800340c:	d805      	bhi.n	800341a <USBD_LL_StallEP+0x1e>
 800340e:	2800      	cmp	r0, #0
 8003410:	d000      	beq.n	8003414 <USBD_LL_StallEP+0x18>
      usb_status = USBD_FAIL;
 8003412:	2002      	movs	r0, #2
}
 8003414:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 8003416:	2001      	movs	r0, #1
 8003418:	e7fc      	b.n	8003414 <USBD_LL_StallEP+0x18>
      usb_status = USBD_FAIL;
 800341a:	2002      	movs	r0, #2
 800341c:	e7fa      	b.n	8003414 <USBD_LL_StallEP+0x18>

0800341e <USBD_LL_ClearStallEP>:
{
 800341e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003420:	2388      	movs	r3, #136	; 0x88
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	58c0      	ldr	r0, [r0, r3]
 8003426:	f7fd fd75 	bl	8000f14 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 800342a:	2802      	cmp	r0, #2
 800342c:	d004      	beq.n	8003438 <USBD_LL_ClearStallEP+0x1a>
 800342e:	d805      	bhi.n	800343c <USBD_LL_ClearStallEP+0x1e>
 8003430:	2800      	cmp	r0, #0
 8003432:	d000      	beq.n	8003436 <USBD_LL_ClearStallEP+0x18>
      usb_status = USBD_FAIL;
 8003434:	2002      	movs	r0, #2
}
 8003436:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 8003438:	2001      	movs	r0, #1
 800343a:	e7fc      	b.n	8003436 <USBD_LL_ClearStallEP+0x18>
      usb_status = USBD_FAIL;
 800343c:	2002      	movs	r0, #2
 800343e:	e7fa      	b.n	8003436 <USBD_LL_ClearStallEP+0x18>

08003440 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003440:	2388      	movs	r3, #136	; 0x88
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8003446:	b24a      	sxtb	r2, r1
 8003448:	2a00      	cmp	r2, #0
 800344a:	db09      	blt.n	8003460 <USBD_LL_IsStallEP+0x20>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800344c:	227f      	movs	r2, #127	; 0x7f
 800344e:	4011      	ands	r1, r2
 8003450:	00ca      	lsls	r2, r1, #3
 8003452:	1a51      	subs	r1, r2, r1
 8003454:	0089      	lsls	r1, r1, #2
 8003456:	185b      	adds	r3, r3, r1
 8003458:	330b      	adds	r3, #11
 800345a:	33ff      	adds	r3, #255	; 0xff
 800345c:	7818      	ldrb	r0, [r3, #0]
}
 800345e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003460:	227f      	movs	r2, #127	; 0x7f
 8003462:	4011      	ands	r1, r2
 8003464:	00ca      	lsls	r2, r1, #3
 8003466:	1a51      	subs	r1, r2, r1
 8003468:	0089      	lsls	r1, r1, #2
 800346a:	185b      	adds	r3, r3, r1
 800346c:	332a      	adds	r3, #42	; 0x2a
 800346e:	7818      	ldrb	r0, [r3, #0]
 8003470:	e7f5      	b.n	800345e <USBD_LL_IsStallEP+0x1e>

08003472 <USBD_LL_SetUSBAddress>:
{
 8003472:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003474:	2388      	movs	r3, #136	; 0x88
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	58c0      	ldr	r0, [r0, r3]
 800347a:	f7fd f975 	bl	8000768 <HAL_PCD_SetAddress>
  switch (hal_status) {
 800347e:	2802      	cmp	r0, #2
 8003480:	d004      	beq.n	800348c <USBD_LL_SetUSBAddress+0x1a>
 8003482:	d805      	bhi.n	8003490 <USBD_LL_SetUSBAddress+0x1e>
 8003484:	2800      	cmp	r0, #0
 8003486:	d000      	beq.n	800348a <USBD_LL_SetUSBAddress+0x18>
      usb_status = USBD_FAIL;
 8003488:	2002      	movs	r0, #2
}
 800348a:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 800348c:	2001      	movs	r0, #1
 800348e:	e7fc      	b.n	800348a <USBD_LL_SetUSBAddress+0x18>
      usb_status = USBD_FAIL;
 8003490:	2002      	movs	r0, #2
 8003492:	e7fa      	b.n	800348a <USBD_LL_SetUSBAddress+0x18>

08003494 <USBD_LL_Transmit>:
{
 8003494:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003496:	2488      	movs	r4, #136	; 0x88
 8003498:	00a4      	lsls	r4, r4, #2
 800349a:	5900      	ldr	r0, [r0, r4]
 800349c:	f7fd fdba 	bl	8001014 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 80034a0:	2802      	cmp	r0, #2
 80034a2:	d004      	beq.n	80034ae <USBD_LL_Transmit+0x1a>
 80034a4:	d805      	bhi.n	80034b2 <USBD_LL_Transmit+0x1e>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d000      	beq.n	80034ac <USBD_LL_Transmit+0x18>
      usb_status = USBD_FAIL;
 80034aa:	2002      	movs	r0, #2
}
 80034ac:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 80034ae:	2001      	movs	r0, #1
 80034b0:	e7fc      	b.n	80034ac <USBD_LL_Transmit+0x18>
      usb_status = USBD_FAIL;
 80034b2:	2002      	movs	r0, #2
 80034b4:	e7fa      	b.n	80034ac <USBD_LL_Transmit+0x18>

080034b6 <USBD_LL_PrepareReceive>:
{
 80034b6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80034b8:	2488      	movs	r4, #136	; 0x88
 80034ba:	00a4      	lsls	r4, r4, #2
 80034bc:	5900      	ldr	r0, [r0, r4]
 80034be:	f7fd fbc7 	bl	8000c50 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 80034c2:	2802      	cmp	r0, #2
 80034c4:	d004      	beq.n	80034d0 <USBD_LL_PrepareReceive+0x1a>
 80034c6:	d805      	bhi.n	80034d4 <USBD_LL_PrepareReceive+0x1e>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d000      	beq.n	80034ce <USBD_LL_PrepareReceive+0x18>
      usb_status = USBD_FAIL;
 80034cc:	2002      	movs	r0, #2
}
 80034ce:	bd10      	pop	{r4, pc}
      usb_status = USBD_BUSY;
 80034d0:	2001      	movs	r0, #1
 80034d2:	e7fc      	b.n	80034ce <USBD_LL_PrepareReceive+0x18>
      usb_status = USBD_FAIL;
 80034d4:	2002      	movs	r0, #2
 80034d6:	e7fa      	b.n	80034ce <USBD_LL_PrepareReceive+0x18>

080034d8 <USBD_static_malloc>:
}
 80034d8:	4800      	ldr	r0, [pc, #0]	; (80034dc <USBD_static_malloc+0x4>)
 80034da:	4770      	bx	lr
 80034dc:	20000208 	.word	0x20000208

080034e0 <USBD_static_free>:
}
 80034e0:	4770      	bx	lr
	...

080034e4 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80034e4:	2312      	movs	r3, #18
 80034e6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 80034e8:	4800      	ldr	r0, [pc, #0]	; (80034ec <USBD_FS_DeviceDescriptor+0x8>)
 80034ea:	4770      	bx	lr
 80034ec:	200001b4 	.word	0x200001b4

080034f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 80034f0:	2304      	movs	r3, #4
 80034f2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
 80034f4:	4801      	ldr	r0, [pc, #4]	; (80034fc <USBD_FS_LangIDStrDescriptor+0xc>)
}
 80034f6:	3014      	adds	r0, #20
 80034f8:	4770      	bx	lr
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	200001b4 	.word	0x200001b4

08003500 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003500:	b510      	push	{r4, lr}
 8003502:	000a      	movs	r2, r1
  if(speed == 0)
 8003504:	2800      	cmp	r0, #0
 8003506:	d105      	bne.n	8003514 <USBD_FS_ProductStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003508:	4905      	ldr	r1, [pc, #20]	; (8003520 <USBD_FS_ProductStrDescriptor+0x20>)
 800350a:	4806      	ldr	r0, [pc, #24]	; (8003524 <USBD_FS_ProductStrDescriptor+0x24>)
 800350c:	f7ff faeb 	bl	8002ae6 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003510:	4803      	ldr	r0, [pc, #12]	; (8003520 <USBD_FS_ProductStrDescriptor+0x20>)
 8003512:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003514:	4902      	ldr	r1, [pc, #8]	; (8003520 <USBD_FS_ProductStrDescriptor+0x20>)
 8003516:	4803      	ldr	r0, [pc, #12]	; (8003524 <USBD_FS_ProductStrDescriptor+0x24>)
 8003518:	f7ff fae5 	bl	8002ae6 <USBD_GetString>
 800351c:	e7f8      	b.n	8003510 <USBD_FS_ProductStrDescriptor+0x10>
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	200006f8 	.word	0x200006f8
 8003524:	08003750 	.word	0x08003750

08003528 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003528:	b510      	push	{r4, lr}
 800352a:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800352c:	4c03      	ldr	r4, [pc, #12]	; (800353c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800352e:	0021      	movs	r1, r4
 8003530:	4803      	ldr	r0, [pc, #12]	; (8003540 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003532:	f7ff fad8 	bl	8002ae6 <USBD_GetString>
  return USBD_StrDesc;
}
 8003536:	0020      	movs	r0, r4
 8003538:	bd10      	pop	{r4, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	200006f8 	.word	0x200006f8
 8003540:	08003768 	.word	0x08003768

08003544 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003544:	b510      	push	{r4, lr}
 8003546:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8003548:	2800      	cmp	r0, #0
 800354a:	d105      	bne.n	8003558 <USBD_FS_SerialStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800354c:	4905      	ldr	r1, [pc, #20]	; (8003564 <USBD_FS_SerialStrDescriptor+0x20>)
 800354e:	4806      	ldr	r0, [pc, #24]	; (8003568 <USBD_FS_SerialStrDescriptor+0x24>)
 8003550:	f7ff fac9 	bl	8002ae6 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003554:	4803      	ldr	r0, [pc, #12]	; (8003564 <USBD_FS_SerialStrDescriptor+0x20>)
 8003556:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003558:	4902      	ldr	r1, [pc, #8]	; (8003564 <USBD_FS_SerialStrDescriptor+0x20>)
 800355a:	4803      	ldr	r0, [pc, #12]	; (8003568 <USBD_FS_SerialStrDescriptor+0x24>)
 800355c:	f7ff fac3 	bl	8002ae6 <USBD_GetString>
 8003560:	e7f8      	b.n	8003554 <USBD_FS_SerialStrDescriptor+0x10>
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	200006f8 	.word	0x200006f8
 8003568:	0800377c 	.word	0x0800377c

0800356c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800356c:	b510      	push	{r4, lr}
 800356e:	000a      	movs	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8003570:	2800      	cmp	r0, #0
 8003572:	d105      	bne.n	8003580 <USBD_FS_ConfigStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003574:	4905      	ldr	r1, [pc, #20]	; (800358c <USBD_FS_ConfigStrDescriptor+0x20>)
 8003576:	4806      	ldr	r0, [pc, #24]	; (8003590 <USBD_FS_ConfigStrDescriptor+0x24>)
 8003578:	f7ff fab5 	bl	8002ae6 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800357c:	4803      	ldr	r0, [pc, #12]	; (800358c <USBD_FS_ConfigStrDescriptor+0x20>)
 800357e:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003580:	4902      	ldr	r1, [pc, #8]	; (800358c <USBD_FS_ConfigStrDescriptor+0x20>)
 8003582:	4803      	ldr	r0, [pc, #12]	; (8003590 <USBD_FS_ConfigStrDescriptor+0x24>)
 8003584:	f7ff faaf 	bl	8002ae6 <USBD_GetString>
 8003588:	e7f8      	b.n	800357c <USBD_FS_ConfigStrDescriptor+0x10>
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	200006f8 	.word	0x200006f8
 8003590:	0800378c 	.word	0x0800378c

08003594 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003594:	b510      	push	{r4, lr}
 8003596:	000a      	movs	r2, r1
  if(speed == 0)
 8003598:	2800      	cmp	r0, #0
 800359a:	d105      	bne.n	80035a8 <USBD_FS_InterfaceStrDescriptor+0x14>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800359c:	4905      	ldr	r1, [pc, #20]	; (80035b4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800359e:	4806      	ldr	r0, [pc, #24]	; (80035b8 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80035a0:	f7ff faa1 	bl	8002ae6 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80035a4:	4803      	ldr	r0, [pc, #12]	; (80035b4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80035a6:	bd10      	pop	{r4, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80035a8:	4902      	ldr	r1, [pc, #8]	; (80035b4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 80035aa:	4803      	ldr	r0, [pc, #12]	; (80035b8 <USBD_FS_InterfaceStrDescriptor+0x24>)
 80035ac:	f7ff fa9b 	bl	8002ae6 <USBD_GetString>
 80035b0:	e7f8      	b.n	80035a4 <USBD_FS_InterfaceStrDescriptor+0x10>
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	200006f8 	.word	0x200006f8
 80035b8:	08003798 	.word	0x08003798

080035bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035bc:	480d      	ldr	r0, [pc, #52]	; (80035f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c0:	480d      	ldr	r0, [pc, #52]	; (80035f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80035c2:	490e      	ldr	r1, [pc, #56]	; (80035fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80035c4:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <LoopForever+0xe>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c8:	e002      	b.n	80035d0 <LoopCopyDataInit>

080035ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ce:	3304      	adds	r3, #4

080035d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d4:	d3f9      	bcc.n	80035ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035d8:	4c0b      	ldr	r4, [pc, #44]	; (8003608 <LoopForever+0x16>)
  movs r3, #0
 80035da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035dc:	e001      	b.n	80035e2 <LoopFillZerobss>

080035de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e0:	3204      	adds	r2, #4

080035e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e4:	d3fb      	bcc.n	80035de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80035e6:	f7ff fdcd 	bl	8003184 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80035ea:	f000 f811 	bl	8003610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035ee:	f7ff fc19 	bl	8002e24 <main>

080035f2 <LoopForever>:

LoopForever:
    b LoopForever
 80035f2:	e7fe      	b.n	80035f2 <LoopForever>
  ldr   r0, =_estack
 80035f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80035f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035fc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003600:	080037b0 	.word	0x080037b0
  ldr r2, =_sbss
 8003604:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003608:	200008f8 	.word	0x200008f8

0800360c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800360c:	e7fe      	b.n	800360c <ADC1_IRQHandler>
	...

08003610 <__libc_init_array>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	2600      	movs	r6, #0
 8003614:	4d0c      	ldr	r5, [pc, #48]	; (8003648 <__libc_init_array+0x38>)
 8003616:	4c0d      	ldr	r4, [pc, #52]	; (800364c <__libc_init_array+0x3c>)
 8003618:	1b64      	subs	r4, r4, r5
 800361a:	10a4      	asrs	r4, r4, #2
 800361c:	42a6      	cmp	r6, r4
 800361e:	d109      	bne.n	8003634 <__libc_init_array+0x24>
 8003620:	2600      	movs	r6, #0
 8003622:	f000 f821 	bl	8003668 <_init>
 8003626:	4d0a      	ldr	r5, [pc, #40]	; (8003650 <__libc_init_array+0x40>)
 8003628:	4c0a      	ldr	r4, [pc, #40]	; (8003654 <__libc_init_array+0x44>)
 800362a:	1b64      	subs	r4, r4, r5
 800362c:	10a4      	asrs	r4, r4, #2
 800362e:	42a6      	cmp	r6, r4
 8003630:	d105      	bne.n	800363e <__libc_init_array+0x2e>
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	00b3      	lsls	r3, r6, #2
 8003636:	58eb      	ldr	r3, [r5, r3]
 8003638:	4798      	blx	r3
 800363a:	3601      	adds	r6, #1
 800363c:	e7ee      	b.n	800361c <__libc_init_array+0xc>
 800363e:	00b3      	lsls	r3, r6, #2
 8003640:	58eb      	ldr	r3, [r5, r3]
 8003642:	4798      	blx	r3
 8003644:	3601      	adds	r6, #1
 8003646:	e7f2      	b.n	800362e <__libc_init_array+0x1e>
 8003648:	080037a8 	.word	0x080037a8
 800364c:	080037a8 	.word	0x080037a8
 8003650:	080037a8 	.word	0x080037a8
 8003654:	080037ac 	.word	0x080037ac

08003658 <memset>:
 8003658:	0003      	movs	r3, r0
 800365a:	1882      	adds	r2, r0, r2
 800365c:	4293      	cmp	r3, r2
 800365e:	d100      	bne.n	8003662 <memset+0xa>
 8003660:	4770      	bx	lr
 8003662:	7019      	strb	r1, [r3, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	e7f9      	b.n	800365c <memset+0x4>

08003668 <_init>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr

08003674 <_fini>:
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367a:	bc08      	pop	{r3}
 800367c:	469e      	mov	lr, r3
 800367e:	4770      	bx	lr
